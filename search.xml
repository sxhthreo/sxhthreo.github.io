<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python数据处理:数据分析处理库Pandas</title>
      <link href="/2022/08/16/python04-python-pandas/"/>
      <url>/2022/08/16/python04-python-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Pandas读取数据"><a href="#一、Pandas读取数据" class="headerlink" title="一、Pandas读取数据"></a>一、Pandas读取数据</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/titanic.csv'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">#.head()可以读取前几条数据,指定前几条都可以,相对应还有.tail()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>df.info()</code>返回当前的信息：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">891</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">890</span>Data columns <span class="token punctuation">(</span>total <span class="token number">12</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>PassengerId    <span class="token number">891</span> non<span class="token operator">-</span>null int64Survived       <span class="token number">891</span> non<span class="token operator">-</span>null int64Pclass         <span class="token number">891</span> non<span class="token operator">-</span>null int64Name           <span class="token number">891</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>Sex            <span class="token number">891</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>Age            <span class="token number">714</span> non<span class="token operator">-</span>null float64SibSp          <span class="token number">891</span> non<span class="token operator">-</span>null int64Parch          <span class="token number">891</span> non<span class="token operator">-</span>null int64Ticket         <span class="token number">891</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>Fare           <span class="token number">891</span> non<span class="token operator">-</span>null float64Cabin          <span class="token number">204</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>Embarked       <span class="token number">889</span> non<span class="token operator">-</span>null <span class="token builtin">object</span>dtypes<span class="token punctuation">:</span> float64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int64<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">83.6</span><span class="token operator">+</span> KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>df.index</code>：返回<code>RangeIndex(start=0, stop=891, step=1)</code></p></li><li><p><code>df.columns</code>：返回</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Name'</span><span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token string">'SibSp'</span><span class="token punctuation">,</span>       <span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">,</span> <span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>df.dtypes</code>：返回</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">PassengerId      int64Survived         int64Pclass           int64Name            <span class="token builtin">object</span>Sex             <span class="token builtin">object</span>Age            float64SibSp            int64Parch            int64Ticket          <span class="token builtin">object</span>Fare           float64Cabin           <span class="token builtin">object</span>Embarked        <span class="token builtin">object</span>dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>df.values</code>：返回</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">7.25</span><span class="token punctuation">,</span> nan<span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">71.2833</span><span class="token punctuation">,</span> <span class="token string">'C85'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">7.925</span><span class="token punctuation">,</span> nan<span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">889</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">23.45</span><span class="token punctuation">,</span> nan<span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">890</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">30.0</span><span class="token punctuation">,</span> <span class="token string">'C148'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">891</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">7.75</span><span class="token punctuation">,</span> nan<span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">object</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Pandas基本操作"><a href="#二、Pandas基本操作" class="headerlink" title="二、Pandas基本操作"></a>二、Pandas基本操作</h1><h2 id="2-1-基本结构及操作"><a href="#2-1-基本结构及操作" class="headerlink" title="2.1 基本结构及操作"></a>2.1 基本结构及操作</h2><p>创建一个<code>DataFrame</code>结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'country'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token string">'ccc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">'population'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>df_data</code>则为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">country</th><th style="text-align:right">population</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">aaa</td><td style="text-align:right">10</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">bbb</td><td style="text-align:right">12</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">ccc</td><td style="text-align:right">14</td></tr></tbody></table></div><p><code>series</code>是<code>DataFrame</code>中的一行/列，底层是<code>ndarray</code>结构。取指定的数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span>age<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0</span>    <span class="token number">22.0</span><span class="token number">1</span>    <span class="token number">38.0</span><span class="token number">2</span>    <span class="token number">26.0</span><span class="token number">3</span>    <span class="token number">35.0</span><span class="token number">4</span>    <span class="token number">35.0</span>Name<span class="token punctuation">:</span> Age<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pandas</code>中索引可以由我们自己指定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Name</th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Sex</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Ticket</th><th style="text-align:right">Fare</th><th style="text-align:right">Cabin</th><th style="text-align:right">Embarked</th></tr></thead><tbody><tr><td style="text-align:right">Braund, Mr. Owen Harris</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">male</td><td style="text-align:right">22.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">A/5 21171</td><td style="text-align:right">7.2500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">female</td><td style="text-align:right">38.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">PC 17599</td><td style="text-align:right">71.2833</td><td style="text-align:right">C85</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">Heikkinen, Miss. Laina</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">female</td><td style="text-align:right">26.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">STON/O2. 3101282</td><td style="text-align:right">7.9250</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td style="text-align:right">4</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">female</td><td style="text-align:right">35.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">113803</td><td style="text-align:right">53.1000</td><td style="text-align:right">C123</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Allen, Mr. William Henry</td><td style="text-align:right">5</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">male</td><td style="text-align:right">35.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">373450</td><td style="text-align:right">8.0500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr></tbody></table></div><p>然后打印<code>df[&#39;Age&#39;][:5]</code>，则结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">NameBraund<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Owen Harris                                <span class="token number">22.0</span>Cumings<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> John Bradley <span class="token punctuation">(</span>Florence Briggs Thayer<span class="token punctuation">)</span>    <span class="token number">38.0</span>Heikkinen<span class="token punctuation">,</span> Miss<span class="token punctuation">.</span> Laina                                 <span class="token number">26.0</span>Futrelle<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> Jacques Heath <span class="token punctuation">(</span>Lily May Peel<span class="token punctuation">)</span>           <span class="token number">35.0</span>Allen<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> William Henry                               <span class="token number">35.0</span>Name<span class="token punctuation">:</span> Age<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印<code>age[&#39;Allen, Mr. William Henry&#39;]</code>，则结果为<code>35.0</code>。</p><p><code>pandas</code>可以对结果进行运算：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">10</span>age<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">NameBraund<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Owen Harris                                <span class="token number">32.0</span>Cumings<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> John Bradley <span class="token punctuation">(</span>Florence Briggs Thayer<span class="token punctuation">)</span>    <span class="token number">48.0</span>Heikkinen<span class="token punctuation">,</span> Miss<span class="token punctuation">.</span> Laina                                 <span class="token number">36.0</span>Futrelle<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> Jacques Heath <span class="token punctuation">(</span>Lily May Peel<span class="token punctuation">)</span>           <span class="token number">45.0</span>Allen<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> William Henry                               <span class="token number">45.0</span>Name<span class="token punctuation">:</span> Age<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>age = age *10</code>同理，与<code>numpy</code>的语法一致。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#396.99117647058824,均值</span>age<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#900.0</span>age<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#104.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>describe()</code>函数可以得到<strong>数据的基本统计特性</strong>，即数量、均值、标准差、最小值、<code>25/50/75%</code>值、最大值：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Fare</th></tr></thead><tbody><tr><td style="text-align:right">count</td><td style="text-align:right">891.000000</td><td style="text-align:right">891.000000</td><td style="text-align:right">891.000000</td><td style="text-align:right">714.000000</td><td style="text-align:right">891.000000</td><td style="text-align:right">891.000000</td><td style="text-align:right">891.000000</td></tr><tr><td style="text-align:right">mean</td><td style="text-align:right">446.000000</td><td style="text-align:right">0.383838</td><td style="text-align:right">2.308642</td><td style="text-align:right">29.699118</td><td style="text-align:right">0.523008</td><td style="text-align:right">0.381594</td><td style="text-align:right">32.204208</td></tr><tr><td style="text-align:right">std</td><td style="text-align:right">257.353842</td><td style="text-align:right">0.486592</td><td style="text-align:right">0.836071</td><td style="text-align:right">14.526497</td><td style="text-align:right">1.102743</td><td style="text-align:right">0.806057</td><td style="text-align:right">49.693429</td></tr><tr><td style="text-align:right">min</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.420000</td><td style="text-align:right">0.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">0.000000</td></tr><tr><td style="text-align:right">25%</td><td style="text-align:right">223.500000</td><td style="text-align:right">0.000000</td><td style="text-align:right">2.000000</td><td style="text-align:right">20.125000</td><td style="text-align:right">0.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">7.910400</td></tr><tr><td style="text-align:right">50%</td><td style="text-align:right">446.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">3.000000</td><td style="text-align:right">28.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">14.454200</td></tr><tr><td style="text-align:right">75%</td><td style="text-align:right">668.500000</td><td style="text-align:right">1.000000</td><td style="text-align:right">3.000000</td><td style="text-align:right">38.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.000000</td><td style="text-align:right">31.000000</td></tr><tr><td style="text-align:right">max</td><td style="text-align:right">891.000000</td><td style="text-align:right">1.000000</td><td style="text-align:right">3.000000</td><td style="text-align:right">80.000000</td><td style="text-align:right">8.000000</td><td style="text-align:right">6.000000</td><td style="text-align:right">512.329200</td></tr></tbody></table></div><h2 id="2-2-pandas索引"><a href="#2-2-pandas索引" class="headerlink" title="2.2 pandas索引"></a>2.2 pandas索引</h2><p>上一节介绍的索引定位：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">Age</th><th style="text-align:right">Fare</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">22.0</td><td style="text-align:right">7.2500</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">38.0</td><td style="text-align:right">71.2833</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">26.0</td><td style="text-align:right">7.9250</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">35.0</td><td style="text-align:right">53.1000</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">35.0</td><td style="text-align:right">8.0500</td></tr></tbody></table></div><h3 id="2-2-1-iloc"><a href="#2-2-1-iloc" class="headerlink" title="2.2.1 iloc"></a>2.2.1 iloc</h3><p><strong><code>iloc</code>：用<code>position</code>来去定位。</strong></p><p><code>df.iloc[0]</code>的打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PassengerId                          <span class="token number">1</span>Survived                             <span class="token number">0</span>Pclass                               <span class="token number">3</span>Name           Braund<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Owen HarrisSex                               maleAge                                 <span class="token number">22</span>SibSp                                <span class="token number">1</span>Parch                                <span class="token number">0</span>Ticket                       A<span class="token operator">/</span><span class="token number">5</span> <span class="token number">21171</span>Fare                              <span class="token number">7.25</span>Cabin                              NaNEmbarked                             SName<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，<code>df.iloc[0:5]</code>的打印结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Name</th><th style="text-align:right">Sex</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Ticket</th><th style="text-align:right">Fare</th><th style="text-align:right">Cabin</th><th style="text-align:right">Embarked</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">Braund, Mr. Owen Harris</td><td style="text-align:right">male</td><td style="text-align:right">22.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">A/5 21171</td><td style="text-align:right">7.2500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td style="text-align:right">female</td><td style="text-align:right">38.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">PC 17599</td><td style="text-align:right">71.2833</td><td style="text-align:right">C85</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">Heikkinen, Miss. Laina</td><td style="text-align:right">female</td><td style="text-align:right">26.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">STON/O2. 3101282</td><td style="text-align:right">7.9250</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td style="text-align:right">female</td><td style="text-align:right">35.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">113803</td><td style="text-align:right">53.1000</td><td style="text-align:right">C123</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">Allen, Mr. William Henry</td><td style="text-align:right">male</td><td style="text-align:right">35.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">373450</td><td style="text-align:right">8.0500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr></tbody></table></div><p><code>df.iloc[0:5,1:3]</code>的打印结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">0</td><td style="text-align:right">3</td></tr></tbody></table></div><h3 id="2-2-2-loc"><a href="#2-2-2-loc" class="headerlink" title="2.2.2 loc"></a>2.2.2 loc</h3><p><strong><code>loc</code>：用<code>label</code>来去定位。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'Name'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Heikkinen, Miss. Laina'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PassengerId                   <span class="token number">3</span>Survived                      <span class="token number">1</span>Pclass                        <span class="token number">3</span>Sex                      femaleAge                          <span class="token number">26</span>SibSp                         <span class="token number">0</span>Parch                         <span class="token number">0</span>Ticket         STON<span class="token operator">/</span>O2<span class="token punctuation">.</span> <span class="token number">3101282</span>Fare                      <span class="token number">7.925</span>Cabin                       NaNEmbarked                      SName<span class="token punctuation">:</span> Heikkinen<span class="token punctuation">,</span> Miss<span class="token punctuation">.</span> Laina<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印某个指标：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Heikkinen, Miss. Laina'</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token comment">#7.9249999999999998</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用切片进行索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Heikkinen, Miss. Laina'</span><span class="token punctuation">:</span><span class="token string">'Allen, Mr. William Henry'</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right">Name</th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Sex</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Ticket</th><th style="text-align:right">Fare</th><th style="text-align:right">Cabin</th><th style="text-align:right">Embarked</th></tr></thead><tbody><tr><td style="text-align:right">Heikkinen, Miss. Laina</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">female</td><td style="text-align:right">26.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">STON/O2. 3101282</td><td style="text-align:right">7.925</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td style="text-align:right">4</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">female</td><td style="text-align:right">35.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">113803</td><td style="text-align:right">53.100</td><td style="text-align:right">C123</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Allen, Mr. William Henry</td><td style="text-align:right">5</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">male</td><td style="text-align:right">35.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">373450</td><td style="text-align:right">8.050</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr></tbody></table></div><p>可以进行赋值操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Heikkinen, Miss. Laina'</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-3-bool类型的索引"><a href="#2-2-3-bool类型的索引" class="headerlink" title="2.2.3 bool类型的索引"></a>2.2.3 bool类型的索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">NameBraund<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Owen Harris                                      <span class="token boolean">False</span>Cumings<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> John Bradley <span class="token punctuation">(</span>Florence Briggs Thayer<span class="token punctuation">)</span>           <span class="token boolean">True</span>Heikkinen<span class="token punctuation">,</span> Miss<span class="token punctuation">.</span> Laina                                        <span class="token boolean">True</span>Futrelle<span class="token punctuation">,</span> Mrs<span class="token punctuation">.</span> Jacques Heath <span class="token punctuation">(</span>Lily May Peel<span class="token punctuation">)</span>                  <span class="token boolean">True</span>Allen<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> William Henry                                     <span class="token boolean">False</span>Moran<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> James                                             <span class="token boolean">False</span>McCarthy<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Timothy J                                       <span class="token boolean">True</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right">Name</th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Sex</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Ticket</th><th style="text-align:right">Fare</th><th style="text-align:right">Cabin</th><th style="text-align:right">Embarked</th></tr></thead><tbody><tr><td style="text-align:right">Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">female</td><td style="text-align:right">38.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">PC 17599</td><td style="text-align:right">71.2833</td><td style="text-align:right">C85</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">Heikkinen, Miss. Laina</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">female</td><td style="text-align:right">26.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">STON/O2. 3101282</td><td style="text-align:right">1000.0000</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td style="text-align:right">4</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">female</td><td style="text-align:right">35.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">113803</td><td style="text-align:right">53.1000</td><td style="text-align:right">C123</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">McCarthy, Mr. Timothy J</td><td style="text-align:right">7</td><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">male</td><td style="text-align:right">54.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">17463</td><td style="text-align:right">51.8625</td><td style="text-align:right">E46</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">Fortune, Mr. Charles Alexander</td><td style="text-align:right">28</td><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">male</td><td style="text-align:right">19.0</td><td style="text-align:right">3</td><td style="text-align:right">2</td><td style="text-align:right">19950</td><td style="text-align:right">263.0000</td><td style="text-align:right">C23 C25 C27</td><td style="text-align:right">S</td></tr></tbody></table></div><p><code>df[df[&#39;Sex&#39;] == &#39;male&#39;][:5]</code>，返回的结果类似。</p><p>可以对这些数据进行运算：</p><ul><li><p>比如对<code>Age</code><strong>作平均值</strong>：<code>df.loc[df[&#39;Sex&#39;] == &#39;male&#39;,&#39;Age&#39;].mean()</code></p></li><li><p><strong>计数</strong>：<code>(df[&#39;Age&#39;] &gt; 70).sum()</code></p></li></ul><h3 id="2-2-4-索引进阶isin-where-query"><a href="#2-2-4-索引进阶isin-where-query" class="headerlink" title="2.2.4 索引进阶isin/where/query"></a>2.2.4 索引进阶isin/where/query</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断一个数是否在当前序列中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">4    False3     True2    False1     True0     Truedtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0  a    0   b    1   c    21  a    3   b    4   c    5dtype: int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s2<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>s2<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0  b    11  a    3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dates <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20220819'</span><span class="token punctuation">,</span>periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>dates<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">2022-08-19</td><td style="text-align:right">-1.400125</td><td style="text-align:right">1.250936</td><td style="text-align:right">-0.220523</td><td style="text-align:right">0.771322</td></tr><tr><td style="text-align:right">2022-08-20</td><td style="text-align:right">-0.837570</td><td style="text-align:right">-0.321949</td><td style="text-align:right">1.868991</td><td style="text-align:right">-1.722395</td></tr><tr><td style="text-align:right">2022-08-21</td><td style="text-align:right">-0.578139</td><td style="text-align:right">0.431476</td><td style="text-align:right">-0.019026</td><td style="text-align:right">-0.040017</td></tr><tr><td style="text-align:right">2022-08-22</td><td style="text-align:right">0.385588</td><td style="text-align:right">2.463628</td><td style="text-align:right">-0.066183</td><td style="text-align:right">-0.948124</td></tr><tr><td style="text-align:right">2022-08-23</td><td style="text-align:right">0.833327</td><td style="text-align:right">0.451540</td><td style="text-align:right">-1.124371</td><td style="text-align:right">-0.328375</td></tr><tr><td style="text-align:right">2022-08-24</td><td style="text-align:right">-0.387599</td><td style="text-align:right">1.547158</td><td style="text-align:right">-0.806947</td><td style="text-align:right">0.233735</td></tr><tr><td style="text-align:right">2022-08-25</td><td style="text-align:right">-0.940428</td><td style="text-align:right">0.286457</td><td style="text-align:right">0.412619</td><td style="text-align:right">0.531194</td></tr><tr><td style="text-align:right">2022-08-26</td><td style="text-align:right">-0.379863</td><td style="text-align:right">-0.211559</td><td style="text-align:right">-1.288098</td><td style="text-align:right">1.592291</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>where<span class="token punctuation">(</span>df <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">2022-08-19</td><td style="text-align:right">-1.400125</td><td style="text-align:right">NaN</td><td style="text-align:right">-0.220523</td><td style="text-align:right">NaN</td></tr><tr><td style="text-align:right">2022-08-20</td><td style="text-align:right">-0.837570</td><td style="text-align:right">-0.321949</td><td style="text-align:right">NaN</td><td style="text-align:right">-1.722395</td></tr><tr><td style="text-align:right">2022-08-21</td><td style="text-align:right">-0.578139</td><td style="text-align:right">NaN</td><td style="text-align:right">-0.019026</td><td style="text-align:right">-0.040017</td></tr><tr><td style="text-align:right">2022-08-22</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">-0.066183</td><td style="text-align:right">-0.948124</td></tr><tr><td style="text-align:right">2022-08-23</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">-1.124371</td><td style="text-align:right">-0.328375</td></tr><tr><td style="text-align:right">2022-08-24</td><td style="text-align:right">-0.387599</td><td style="text-align:right">NaN</td><td style="text-align:right">-0.806947</td><td style="text-align:right">NaN</td></tr><tr><td style="text-align:right">2022-08-25</td><td style="text-align:right">-0.940428</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td></tr><tr><td style="text-align:right">2022-08-26</td><td style="text-align:right">-0.379863</td><td style="text-align:right">-0.211559</td><td style="text-align:right">-1.288098</td><td style="text-align:right">NaN</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>where<span class="token punctuation">(</span>df <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>df<span class="token punctuation">)</span><span class="token comment">#不满足条件的可以指定取反</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">2017-11-24</td><td style="text-align:right">-1.690231</td><td style="text-align:right">-0.338101</td><td style="text-align:right">-1.071022</td><td style="text-align:right">-1.084637</td></tr><tr><td style="text-align:right">2017-11-25</td><td style="text-align:right">-1.292291</td><td style="text-align:right">-0.449885</td><td style="text-align:right">-0.468264</td><td style="text-align:right">-0.637102</td></tr><tr><td style="text-align:right">2017-11-26</td><td style="text-align:right">-0.602494</td><td style="text-align:right">-0.591658</td><td style="text-align:right">-0.301893</td><td style="text-align:right">-1.050524</td></tr><tr><td style="text-align:right">2017-11-27</td><td style="text-align:right">-1.132170</td><td style="text-align:right">-1.310110</td><td style="text-align:right">-0.552812</td><td style="text-align:right">-0.370947</td></tr><tr><td style="text-align:right">2017-11-28</td><td style="text-align:right">-0.113234</td><td style="text-align:right">-0.859983</td><td style="text-align:right">-0.381977</td><td style="text-align:right">-0.371730</td></tr><tr><td style="text-align:right">2017-11-29</td><td style="text-align:right">-0.616029</td><td style="text-align:right">-0.209225</td><td style="text-align:right">-1.879964</td><td style="text-align:right">-0.179152</td></tr><tr><td style="text-align:right">2017-11-30</td><td style="text-align:right">-0.554969</td><td style="text-align:right">-0.656240</td><td style="text-align:right">-2.449274</td><td style="text-align:right">-0.302113</td></tr><tr><td style="text-align:right">2017-12-01</td><td style="text-align:right">-0.700342</td><td style="text-align:right">-1.068990</td><td style="text-align:right">-0.572698</td><td style="text-align:right">-0.577581</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">a</th><th style="text-align:right">b</th><th style="text-align:right">c</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">0.760971</td><td style="text-align:right">0.910097</td><td style="text-align:right">0.480540</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">0.242792</td><td style="text-align:right">0.778342</td><td style="text-align:right">0.852441</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">0.147953</td><td style="text-align:right">0.449719</td><td style="text-align:right">0.539780</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">0.519164</td><td style="text-align:right">0.936192</td><td style="text-align:right">0.402399</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">0.365343</td><td style="text-align:right">0.148621</td><td style="text-align:right">0.176917</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">0.837852</td><td style="text-align:right">0.283028</td><td style="text-align:right">0.527734</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">0.729312</td><td style="text-align:right">0.066871</td><td style="text-align:right">0.747968</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">0.502851</td><td style="text-align:right">0.462246</td><td style="text-align:right">0.116735</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">0.472404</td><td style="text-align:right">0.517753</td><td style="text-align:right">0.945877</td></tr><tr><td style="text-align:right">9</td><td style="text-align:right">0.962282</td><td style="text-align:right">0.300276</td><td style="text-align:right">0.258252</td></tr></tbody></table></div><p><strong>查询操作</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'(a&lt;b)'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'(a&lt;b) &amp; (b&lt;c)'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-3-groupby操作"><a href="#2-3-groupby操作" class="headerlink" title="2.3 groupby操作"></a>2.3 groupby操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token string">'data'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">data</th><th style="text-align:right">key</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">5</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">10</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">5</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">10</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">15</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">10</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">15</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">20</td><td style="text-align:right">C</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A data     <span class="token number">15</span>key     AAAdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>B data     <span class="token number">30</span>key     BBBdtype<span class="token punctuation">:</span> <span class="token builtin">object</span>C data     <span class="token number">45</span>key     CCCdtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若使用<code>groupby</code>操作，则为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">key</th><th style="text-align:right">data</th></tr></thead><tbody><tr><td style="text-align:right">A</td><td style="text-align:right">15</td></tr><tr><td style="text-align:right">B</td><td style="text-align:right">30</td></tr><tr><td style="text-align:right">C</td><td style="text-align:right">45</td></tr></tbody></table></div><p>也可以通过<code>numpy</code>格式得出上述结果，则为：<code>df.groupby(&#39;key&#39;).aggregate(np.sum)</code>。</p><p>平均值也类似：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">key</th><th style="text-align:right">data</th></tr></thead><tbody><tr><td style="text-align:right">A</td><td style="text-align:right">5</td></tr><tr><td style="text-align:right">B</td><td style="text-align:right">10</td></tr><tr><td style="text-align:right">C</td><td style="text-align:right">15</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/titanic.csv'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Sexfemale    <span class="token number">27.915709</span>male      <span class="token number">30.726645</span>Name<span class="token punctuation">:</span> Age<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                           <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'B'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span>                          <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'C'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token string">'D'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">foo</td><td style="text-align:right">one</td><td style="text-align:right">-0.785250</td><td style="text-align:right">1.010458</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">bar</td><td style="text-align:right">one</td><td style="text-align:right">2.549941</td><td style="text-align:right">1.704677</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">foo</td><td style="text-align:right">two</td><td style="text-align:right">-0.255153</td><td style="text-align:right">-0.603249</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">bar</td><td style="text-align:right">three</td><td style="text-align:right">-0.954625</td><td style="text-align:right">0.117662</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">foo</td><td style="text-align:right">two</td><td style="text-align:right">-0.548512</td><td style="text-align:right">0.648127</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">bar</td><td style="text-align:right">two</td><td style="text-align:right">-0.642762</td><td style="text-align:right">-1.111568</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">foo</td><td style="text-align:right">one</td><td style="text-align:right">0.870697</td><td style="text-align:right">0.556371</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">foo</td><td style="text-align:right">three</td><td style="text-align:right">0.839937</td><td style="text-align:right">0.798669</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">bar</td><td style="text-align:right">3</td><td style="text-align:right">3</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">foo</td><td style="text-align:right">5</td><td style="text-align:right">5</td><td style="text-align:right">5</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220817225035447.png" alt="image-20220817225035447"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_letter_type</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> letter<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'a'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'b'</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>get_letter_type<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">a    1b    3Name: 0, dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_group<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">X</th><th style="text-align:right">Y</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">A</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">A</td><td style="text-align:right">3</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相同的索引会进行合并显示：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220818114122296.png" alt="相同的索引合并显示"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>as_index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">bar</td><td style="text-align:right">one</td><td style="text-align:right">2.549941</td><td style="text-align:right">1.704677</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">bar</td><td style="text-align:right">three</td><td style="text-align:right">-0.954625</td><td style="text-align:right">0.117662</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">bar</td><td style="text-align:right">two</td><td style="text-align:right">-0.642762</td><td style="text-align:right">-1.111568</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">foo</td><td style="text-align:right">one</td><td style="text-align:right">0.085447</td><td style="text-align:right">1.566829</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">foo</td><td style="text-align:right">three</td><td style="text-align:right">0.839937</td><td style="text-align:right">0.798669</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">foo</td><td style="text-align:right">two</td><td style="text-align:right">-0.803665</td><td style="text-align:right">0.044878</td></tr></tbody></table></div><p>重新构建索引：<code>df.groupby([&#39;A&#39;,&#39;B&#39;]).sum().reset_index()</code>，也能显示以上结果。</p><p>得到分组组合个数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">A    B    bar  one      1     three    1     two      1foo  one      2     three    1     two      2dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取统计特性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220818114731194.png" alt="获取统计特性"></p><p><code>agg</code>函数用于调用<code>groupby</code>函数之后，对数据做一些聚合操作，包括<code>sum</code>,<code>min</code>,<code>max</code>以及其他一些聚合函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>grouped<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">,</span>np<span class="token punctuation">.</span>std<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:right">sum</th><th style="text-align:right">mean</th><th style="text-align:right">std</th></tr></thead><tbody><tr><td style="text-align:right">bar</td><td style="text-align:right">0.952553</td><td style="text-align:right">0.317518</td><td style="text-align:right">1.939613</td></tr><tr><td style="text-align:right">foo</td><td style="text-align:right">0.121719</td><td style="text-align:right">0.024344</td><td style="text-align:right">0.781542</td></tr></tbody></table></div><p>还可以通过字典结构指定分组名字：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grouped<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'res_sum'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">,</span><span class="token string">'res_mean'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">,</span><span class="token string">'res_std'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>std<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4-数值运算"><a href="#2-4-数值运算" class="headerlink" title="2.4 数值运算"></a>2.4 数值运算</h2><h3 id="2-4-1-运算"><a href="#2-4-1-运算" class="headerlink" title="2.4.1 运算"></a>2.4.1 运算</h3><p>构造<code>DataFrame</code>结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th></tr></thead><tbody><tr><td style="text-align:right">a</td><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">b</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认<strong>按列求和</strong>，返回结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A    <span class="token number">5</span>B    <span class="token number">7</span>C    <span class="token number">9</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以指定维度：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#也可以使用df.sum(axis = 'columns')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a     <span class="token number">6</span>b    <span class="token number">15</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还有<code>df.mean()</code>、<code>df.min()</code>、<code>df.max()</code>、<code>df.median()</code>(中位数)等。</p><h3 id="2-4-2-二元统计"><a href="#2-4-2-二元统计" class="headerlink" title="2.4.2 二元统计"></a>2.4.2 二元统计</h3><ul><li><strong>统计协方差</strong>：<code>df.cov()</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Fare</th></tr></thead><tbody><tr><td style="text-align:right">PassengerId</td><td style="text-align:right">66231.000000</td><td style="text-align:right">-0.626966</td><td style="text-align:right">-7.561798</td><td style="text-align:right">138.696504</td><td style="text-align:right">-16.325843</td><td style="text-align:right">-0.342697</td><td style="text-align:right">161.883369</td></tr><tr><td style="text-align:right">Survived</td><td style="text-align:right">-0.626966</td><td style="text-align:right">0.236772</td><td style="text-align:right">-0.137703</td><td style="text-align:right">-0.551296</td><td style="text-align:right">-0.018954</td><td style="text-align:right">0.032017</td><td style="text-align:right">6.221787</td></tr><tr><td style="text-align:right">Pclass</td><td style="text-align:right">-7.561798</td><td style="text-align:right">-0.137703</td><td style="text-align:right">0.699015</td><td style="text-align:right">-4.496004</td><td style="text-align:right">0.076599</td><td style="text-align:right">0.012429</td><td style="text-align:right">-22.830196</td></tr><tr><td style="text-align:right">Age</td><td style="text-align:right">138.696504</td><td style="text-align:right">-0.551296</td><td style="text-align:right">-4.496004</td><td style="text-align:right">211.019125</td><td style="text-align:right">-4.163334</td><td style="text-align:right">-2.344191</td><td style="text-align:right">73.849030</td></tr><tr><td style="text-align:right">SibSp</td><td style="text-align:right">-16.325843</td><td style="text-align:right">-0.018954</td><td style="text-align:right">0.076599</td><td style="text-align:right">-4.163334</td><td style="text-align:right">1.216043</td><td style="text-align:right">0.368739</td><td style="text-align:right">8.748734</td></tr><tr><td style="text-align:right">Parch</td><td style="text-align:right">-0.342697</td><td style="text-align:right">0.032017</td><td style="text-align:right">0.012429</td><td style="text-align:right">-2.344191</td><td style="text-align:right">0.368739</td><td style="text-align:right">0.649728</td><td style="text-align:right">8.661052</td></tr><tr><td style="text-align:right">Fare</td><td style="text-align:right">161.883369</td><td style="text-align:right">6.221787</td><td style="text-align:right">-22.830196</td><td style="text-align:right">73.849030</td><td style="text-align:right">8.748734</td><td style="text-align:right">8.661052</td><td style="text-align:right">2469.436846</td></tr></tbody></table></div><ul><li><strong>统计相关系数</strong>：<code>df.corr()</code></li></ul><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Fare</th></tr></thead><tbody><tr><td style="text-align:right">PassengerId</td><td style="text-align:right">1.000000</td><td style="text-align:right">-0.005007</td><td style="text-align:right">-0.035144</td><td style="text-align:right">0.036847</td><td style="text-align:right">-0.057527</td><td style="text-align:right">-0.001652</td><td style="text-align:right">0.012658</td></tr><tr><td style="text-align:right">Survived</td><td style="text-align:right">-0.005007</td><td style="text-align:right">1.000000</td><td style="text-align:right">-0.338481</td><td style="text-align:right">-0.077221</td><td style="text-align:right">-0.035322</td><td style="text-align:right">0.081629</td><td style="text-align:right">0.257307</td></tr><tr><td style="text-align:right">Pclass</td><td style="text-align:right">-0.035144</td><td style="text-align:right">-0.338481</td><td style="text-align:right">1.000000</td><td style="text-align:right">-0.369226</td><td style="text-align:right">0.083081</td><td style="text-align:right">0.018443</td><td style="text-align:right">-0.549500</td></tr><tr><td style="text-align:right">Age</td><td style="text-align:right">0.036847</td><td style="text-align:right">-0.077221</td><td style="text-align:right">-0.369226</td><td style="text-align:right">1.000000</td><td style="text-align:right">-0.308247</td><td style="text-align:right">-0.189119</td><td style="text-align:right">0.096067</td></tr><tr><td style="text-align:right">SibSp</td><td style="text-align:right">-0.057527</td><td style="text-align:right">-0.035322</td><td style="text-align:right">0.083081</td><td style="text-align:right">-0.308247</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.414838</td><td style="text-align:right">0.159651</td></tr><tr><td style="text-align:right">Parch</td><td style="text-align:right">-0.001652</td><td style="text-align:right">0.081629</td><td style="text-align:right">0.018443</td><td style="text-align:right">-0.189119</td><td style="text-align:right">0.414838</td><td style="text-align:right">1.000000</td><td style="text-align:right">0.216225</td></tr><tr><td style="text-align:right">Fare</td><td style="text-align:right">0.012658</td><td style="text-align:right">0.257307</td><td style="text-align:right">-0.549500</td><td style="text-align:right">0.096067</td><td style="text-align:right">0.159651</td><td style="text-align:right">0.216225</td><td style="text-align:right">1.000000</td></tr></tbody></table></div><ul><li><strong>统计不同属性的个数<code>value_counts</code></strong>：<code>df[&#39;Age&#39;].value_counts()</code></li></ul><pre class="line-numbers language-none"><code class="language-none">24.00    3022.00    2718.00    2619.00    2530.00    2528.00    2521.00    2425.00    2336.00    2229.00    2032.00    18......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以指定为升序：<code>df[&#39;Age&#39;].value_counts(ascending = True)</code></p><p>可以通过<code>bins</code>作分组：<code>df[&#39;Age&#39;].value_counts(ascending = True,bins = 5)</code></p><pre class="line-numbers language-none"><code class="language-none">(64.084, 80.0]       11(48.168, 64.084]     69(0.339, 16.336]     100(32.252, 48.168]    188(16.336, 32.252]    346Name: Age, dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>count()</code>可以用于计数样本：<code>df[&#39;Pclass&#39;].count()</code></li></ul><h2 id="2-5-对象操作"><a href="#2-5-对象操作" class="headerlink" title="2.5 对象操作"></a>2.5 对象操作</h2><h3 id="2-5-1-Series结构的增删改查"><a href="#2-5-1-Series结构的增删改查" class="headerlink" title="2.5.1 Series结构的增删改查"></a>2.5.1 Series结构的增删改查</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data <span class="token operator">=</span> data<span class="token punctuation">,</span>index <span class="token operator">=</span> index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回结果为：</p><pre class="line-numbers language-none"><code class="language-none">a    10b    11c    12dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查操作</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#10</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#a    10</span><span class="token comment">#b    11</span><span class="token comment">#dtype: int64</span>mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span>s<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token comment">#11</span>s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改操作</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> s<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>s1<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">a    100b     11c     12dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用<code>replace</code>函数进行修改(<code>inplace = True</code>将在原始<code>series</code>结构进行改变)：</p><p><code>s1.replace(to_replace = 100,value = 101,inplace = True)</code></p><pre class="line-numbers language-none"><code class="language-none">a    101b     11c     12dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以修改索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1<span class="token punctuation">.</span>index<span class="token comment">#Index(['a', 'b', 'c'], dtype='object')</span>s1<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token comment">#a    101 b     11 d     12 dtype: int64</span>s1<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#单独修改某一索引,index值指定成字典结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>增操作</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">]</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data <span class="token operator">=</span> data<span class="token punctuation">,</span>index <span class="token operator">=</span> index<span class="token punctuation">)</span>s3 <span class="token operator">=</span> s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token comment">#第一种</span>s3<span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token comment">#第二种</span>s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">,</span>ignore_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#ignore_index = True,改变原有索引方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ignore_index = False</code>：</p><pre class="line-numbers language-none"><code class="language-none">A    101b     11d     12j    500h    100k    110dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ignore_index = True</code>：</p><pre class="line-numbers language-none"><code class="language-none">0    1011     112     123    5004    1005    110dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删操作</strong>：</p><ul><li><code>del s1[&#39;A&#39;]</code></li><li><code>s1.drop([&#39;b&#39;,&#39;d&#39;],inplace = True)</code></li></ul><h3 id="2-5-2-DataFrame结构的增删改查"><a href="#2-5-2-DataFrame结构的增删改查" class="headerlink" title="2.5.2 DataFrame结构的增删改查"></a>2.5.2 DataFrame结构的增删改查</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span>index<span class="token punctuation">,</span>columns <span class="token operator">=</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查操作是类似的</strong>：</p><ul><li><code>df[&#39;A&#39;]</code></li><li><code>df.iloc[0]</code></li><li><code>df.loc[&#39;a&#39;]</code></li></ul><p><strong>改操作</strong>：</p><ul><li><code>df.loc[&#39;a&#39;][&#39;A&#39;]</code></li><li><code>df.loc[&#39;a&#39;][&#39;A&#39;] = 150</code></li><li><code>df.index = [&#39;f&#39;,&#39;g&#39;]</code></li></ul><p><strong>增操作</strong>：</p><ul><li>增加行：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#增加一行数据</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">]</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span>index<span class="token punctuation">,</span>columns <span class="token operator">=</span> columns<span class="token punctuation">)</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>df2<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#连接操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加列：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">[</span><span class="token string">'Tang'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token comment">#增加新的列</span>df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df5 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df2<span class="token punctuation">,</span>df4<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#增加多列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">Tang</th><th style="text-align:right">D</th><th style="text-align:right">E</th></tr></thead><tbody><tr><td style="text-align:right">j</td><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">10</td><td style="text-align:right">10</td><td style="text-align:right">11</td></tr><tr><td style="text-align:right">k</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr></tbody></table></div><p><strong>删操作</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df5<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'j'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#删除一行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">Tang</th><th style="text-align:right">D</th><th style="text-align:right">E</th></tr></thead><tbody><tr><td style="text-align:right">k</td><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">6</td><td style="text-align:right">11</td><td style="text-align:right">12</td><td style="text-align:right">13</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> df5<span class="token punctuation">[</span><span class="token string">'Tang'</span><span class="token punctuation">]</span><span class="token comment">#删除一列数据</span>df5<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#删除多列数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-3-merge操作"><a href="#2-5-3-merge操作" class="headerlink" title="2.5.3 merge操作"></a>2.5.3 merge操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span><span class="token string">'K1'</span><span class="token punctuation">,</span><span class="token string">'K2'</span><span class="token punctuation">,</span><span class="token string">'K3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A0'</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">,</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'B0'</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span><span class="token string">'K1'</span><span class="token punctuation">,</span><span class="token string">'K2'</span><span class="token punctuation">,</span><span class="token string">'K3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'C0'</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'D0'</span><span class="token punctuation">,</span><span class="token string">'D1'</span><span class="token punctuation">,</span><span class="token string">'D2'</span><span class="token punctuation">,</span><span class="token string">'D3'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>on <span class="token operator">=</span> <span class="token string">'key'</span><span class="token punctuation">)</span><span class="token comment">#不加on默认以相同元素为键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">key</th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">K0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">K1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">K2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">K3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">C3</td><td style="text-align:right">D3</td></tr></tbody></table></div><p>若有两个键<code>key1</code>、<code>key2</code>，执行<code>pd.merge(left,right,on = &#39;key1&#39;)</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">key1</th><th style="text-align:right">key2_x</th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">key2_y</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">K0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">K1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">K2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">K3</td><td style="text-align:right">K3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">K3</td><td style="text-align:right">C3</td><td style="text-align:right">D3</td></tr></tbody></table></div><p>若执行<code>res = pd.merge(left, right, on = [&#39;key1&#39;,&#39;key2&#39;])</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">key1</th><th style="text-align:right">key2</th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">K3</td><td style="text-align:right">K3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">C3</td><td style="text-align:right">D3</td></tr></tbody></table></div><p>若两个键有部分不一致，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span> <span class="token string">'K1'</span><span class="token punctuation">,</span> <span class="token string">'K2'</span><span class="token punctuation">,</span> <span class="token string">'K3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span> <span class="token string">'K1'</span><span class="token punctuation">,</span> <span class="token string">'K2'</span><span class="token punctuation">,</span> <span class="token string">'K3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A0'</span><span class="token punctuation">,</span> <span class="token string">'A1'</span><span class="token punctuation">,</span> <span class="token string">'A2'</span><span class="token punctuation">,</span> <span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'B0'</span><span class="token punctuation">,</span> <span class="token string">'B1'</span><span class="token punctuation">,</span> <span class="token string">'B2'</span><span class="token punctuation">,</span> <span class="token string">'B3'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span> <span class="token string">'K1'</span><span class="token punctuation">,</span> <span class="token string">'K2'</span><span class="token punctuation">,</span> <span class="token string">'K3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'K0'</span><span class="token punctuation">,</span> <span class="token string">'K1'</span><span class="token punctuation">,</span> <span class="token string">'K2'</span><span class="token punctuation">,</span> <span class="token string">'K4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'C0'</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'C2'</span><span class="token punctuation">,</span> <span class="token string">'C3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'D0'</span><span class="token punctuation">,</span> <span class="token string">'D1'</span><span class="token punctuation">,</span> <span class="token string">'D2'</span><span class="token punctuation">,</span> <span class="token string">'D3'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仍执行<code>res = pd.merge(left, right, on = [&#39;key1&#39;,&#39;key2&#39;])</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">key1</th><th style="text-align:right">key2</th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr></tbody></table></div><p>若指定<code>how = outer</code>，即取并集：<code>res = pd.merge(left, right, on = [&#39;key1&#39;, &#39;key2&#39;], how = &#39;outer&#39;)</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">key1</th><th style="text-align:right">key2</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">K3</td><td style="text-align:right">K3</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">K3</td><td style="text-align:right">K4</td><td style="text-align:right">C3</td><td style="text-align:right">D3</td></tr></tbody></table></div><p>加入指示器<code>indicator</code>，<code>res = pd.merge(left, right, on = [&#39;key1&#39;, &#39;key2&#39;], how = &#39;outer&#39;, indicator = True)</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">key1</th><th style="text-align:right">key2</th><th style="text-align:right">C</th><th style="text-align:right">D</th><th style="text-align:right">_merge</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td><td style="text-align:right">both</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td><td style="text-align:right">both</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td><td style="text-align:right">both</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">K3</td><td style="text-align:right">K3</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">left_only</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td><td style="text-align:right">K3</td><td style="text-align:right">K4</td><td style="text-align:right">C3</td><td style="text-align:right">D3</td><td style="text-align:right">right_only</td></tr></tbody></table></div><p>指定以左表/右表为基准：如<code>res = pd.merge(left, right, how = &#39;left&#39;)</code>，则结果为：</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">key1</th><th style="text-align:right">key2</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">A0</td><td style="text-align:right">B0</td><td style="text-align:right">K0</td><td style="text-align:right">K0</td><td style="text-align:right">C0</td><td style="text-align:right">D0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">A1</td><td style="text-align:right">B1</td><td style="text-align:right">K1</td><td style="text-align:right">K1</td><td style="text-align:right">C1</td><td style="text-align:right">D1</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">A2</td><td style="text-align:right">B2</td><td style="text-align:right">K2</td><td style="text-align:right">K2</td><td style="text-align:right">C2</td><td style="text-align:right">D2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">A3</td><td style="text-align:right">B3</td><td style="text-align:right">K3</td><td style="text-align:right">K3</td><td style="text-align:right">NaN</td><td style="text-align:right">NaN</td></tr></tbody></table></div><h2 id="2-6-显示设置"><a href="#2-6-显示设置" class="headerlink" title="2.6 显示设置"></a>2.6 显示设置</h2><p>网址：<a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html?highlight=set_option#pandas.set_option">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html?highlight=set_option#pandas.set_option</a></p><ul><li>显示当前显示数据最大行数：<code>pd.get_option(&#39;display.max_rows&#39;)</code></li><li>设置当前显示数据最大行数：<code>pd.set_option(&#39;display.max_rows&#39;,6)</code></li></ul><p>同理，列操作分别为：<code>pd.get_option(&#39;display.max_columns&#39;)</code>，<code>pd.set_option(&#39;display.max_columns&#39;,30)</code>。</p><ul><li>设置字符串长度：<code>pd.get_option(&#39;display.max_colwidth&#39;)</code>，<code>pd.set_option(&#39;display.max_colwidth&#39;,100)</code></li><li>设置字符串小数点精度：<code>pd.get_option(&#39;display.precision&#39;)</code>，<code>pd.set_option(&#39;display.precision&#39;,5)</code></li></ul><h2 id="2-7-数据透视表"><a href="#2-7-数据透视表" class="headerlink" title="2.7 数据透视表"></a>2.7 数据透视表</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdexample <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Month'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"January"</span><span class="token punctuation">,</span> <span class="token string">"January"</span><span class="token punctuation">,</span> <span class="token string">"January"</span><span class="token punctuation">,</span> <span class="token string">"January"</span><span class="token punctuation">,</span>                                   <span class="token string">"February"</span><span class="token punctuation">,</span> <span class="token string">"February"</span><span class="token punctuation">,</span> <span class="token string">"February"</span><span class="token punctuation">,</span> <span class="token string">"February"</span><span class="token punctuation">,</span>                                   <span class="token string">"March"</span><span class="token punctuation">,</span> <span class="token string">"March"</span><span class="token punctuation">,</span> <span class="token string">"March"</span><span class="token punctuation">,</span> <span class="token string">"March"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'Category'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Transportation"</span><span class="token punctuation">,</span> <span class="token string">"Grocery"</span><span class="token punctuation">,</span> <span class="token string">"Household"</span><span class="token punctuation">,</span> <span class="token string">"Entertainment"</span><span class="token punctuation">,</span>                                <span class="token string">"Transportation"</span><span class="token punctuation">,</span> <span class="token string">"Grocery"</span><span class="token punctuation">,</span> <span class="token string">"Household"</span><span class="token punctuation">,</span> <span class="token string">"Entertainment"</span><span class="token punctuation">,</span>                                <span class="token string">"Transportation"</span><span class="token punctuation">,</span> <span class="token string">"Grocery"</span><span class="token punctuation">,</span> <span class="token string">"Household"</span><span class="token punctuation">,</span> <span class="token string">"Entertainment"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token string">'Amount'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">74.</span><span class="token punctuation">,</span> <span class="token number">235.</span><span class="token punctuation">,</span> <span class="token number">175.</span><span class="token punctuation">,</span> <span class="token number">100.</span><span class="token punctuation">,</span> <span class="token number">115.</span><span class="token punctuation">,</span> <span class="token number">240.</span><span class="token punctuation">,</span> <span class="token number">225.</span><span class="token punctuation">,</span> <span class="token number">125.</span><span class="token punctuation">,</span> <span class="token number">90.</span><span class="token punctuation">,</span> <span class="token number">260.</span><span class="token punctuation">,</span> <span class="token number">200.</span><span class="token punctuation">,</span> <span class="token number">120.</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">Month</th><th style="text-align:right">Category</th><th style="text-align:right">Amount</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">January</td><td style="text-align:right">Transportation</td><td style="text-align:right">74.0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">January</td><td style="text-align:right">Grocery</td><td style="text-align:right">235.0</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">January</td><td style="text-align:right">Household</td><td style="text-align:right">175.0</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">January</td><td style="text-align:right">Entertainment</td><td style="text-align:right">100.0</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">February</td><td style="text-align:right">Transportation</td><td style="text-align:right">115.0</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">February</td><td style="text-align:right">Grocery</td><td style="text-align:right">240.0</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">February</td><td style="text-align:right">Household</td><td style="text-align:right">225.0</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">February</td><td style="text-align:right">Entertainment</td><td style="text-align:right">125.0</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">March</td><td style="text-align:right">Transportation</td><td style="text-align:right">90.0</td></tr><tr><td style="text-align:right">9</td><td style="text-align:right">March</td><td style="text-align:right">Grocery</td><td style="text-align:right">260.0</td></tr><tr><td style="text-align:right">10</td><td style="text-align:right">March</td><td style="text-align:right">Household</td><td style="text-align:right">200.0</td></tr><tr><td style="text-align:right">11</td><td style="text-align:right">March</td><td style="text-align:right">Entertainment</td><td style="text-align:right">120.0</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">example_pivot <span class="token operator">=</span> example<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">'Category'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span> <span class="token string">'Month'</span><span class="token punctuation">,</span>values <span class="token operator">=</span> <span class="token string">'Amount'</span><span class="token punctuation">)</span><span class="token comment">#values代表统计属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Month</th><th style="text-align:right">February</th><th style="text-align:right">January</th><th style="text-align:right">March</th></tr></thead><tbody><tr><td style="text-align:right">Category</td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td style="text-align:right">Entertainment</td><td style="text-align:right">125.0</td><td style="text-align:right">100.0</td><td style="text-align:right">120.0</td></tr><tr><td style="text-align:right">Grocery</td><td style="text-align:right">240.0</td><td style="text-align:right">235.0</td><td style="text-align:right">260.0</td></tr><tr><td style="text-align:right">Household</td><td style="text-align:right">225.0</td><td style="text-align:right">175.0</td><td style="text-align:right">200.0</td></tr><tr><td style="text-align:right">Transportation</td><td style="text-align:right">115.0</td><td style="text-align:right">74.0</td><td style="text-align:right">90.0</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">example_pivot<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">CategoryEntertainment     345.0Grocery           735.0Household         600.0Transportation    279.0dtype: float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">example_pivot<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">MonthFebruary    705.0January     584.0March       670.0dtype: float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/titanic.csv'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">PassengerId</th><th style="text-align:right">Survived</th><th style="text-align:right">Pclass</th><th style="text-align:right">Name</th><th style="text-align:right">Sex</th><th style="text-align:right">Age</th><th style="text-align:right">SibSp</th><th style="text-align:right">Parch</th><th style="text-align:right">Ticket</th><th style="text-align:right">Fare</th><th style="text-align:right">Cabin</th><th style="text-align:right">Embarked</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">Braund, Mr. Owen Harris</td><td style="text-align:right">male</td><td style="text-align:right">22.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">A/5 21171</td><td style="text-align:right">7.2500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td style="text-align:right">female</td><td style="text-align:right">38.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">PC 17599</td><td style="text-align:right">71.2833</td><td style="text-align:right">C85</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">1</td><td style="text-align:right">3</td><td style="text-align:right">Heikkinen, Miss. Laina</td><td style="text-align:right">female</td><td style="text-align:right">26.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">STON/O2. 3101282</td><td style="text-align:right">7.9250</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td style="text-align:right">female</td><td style="text-align:right">35.0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">113803</td><td style="text-align:right">53.1000</td><td style="text-align:right">C123</td><td style="text-align:right">S</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">0</td><td style="text-align:right">3</td><td style="text-align:right">Allen, Mr. William Henry</td><td style="text-align:right">male</td><td style="text-align:right">35.0</td><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">373450</td><td style="text-align:right">8.0500</td><td style="text-align:right">NaN</td><td style="text-align:right">S</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#默认值就是求平均</span>df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token string">'Fare'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Pclass</th><th style="text-align:right">1</th><th style="text-align:right">2</th><th style="text-align:right">3</th></tr></thead><tbody><tr><td style="text-align:right">Sex</td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td style="text-align:right">female</td><td style="text-align:right">106.125798</td><td style="text-align:right">21.970121</td><td style="text-align:right">16.118810</td></tr><tr><td style="text-align:right">male</td><td style="text-align:right">67.226127</td><td style="text-align:right">19.741782</td><td style="text-align:right">12.661633</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#指定为求最大值</span>df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token string">'Fare'</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span><span class="token comment">#指定求平均</span>df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">'Pclass'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'Sex'</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Pclass</th><th style="text-align:right">1</th><th style="text-align:right">2</th><th style="text-align:right">3</th></tr></thead><tbody><tr><td style="text-align:right">Sex</td><td style="text-align:right"></td><td style="text-align:right"></td><td style="text-align:right"></td></tr><tr><td style="text-align:right">female</td><td style="text-align:right">512.3292</td><td style="text-align:right">65.0</td><td style="text-align:right">69.55</td></tr><tr><td style="text-align:right">male</td><td style="text-align:right">512.3292</td><td style="text-align:right">73.5</td><td style="text-align:right">69.55</td></tr></tbody></table></div><p>类似地，还有计数：<code>df.pivot_table(index = &#39;Sex&#39;,columns=&#39;Pclass&#39;,values=&#39;Fare&#39;,aggfunc=&#39;count&#39;)</code>。</p><p><code>pandas</code>中也有类似计数：<code>pd.crosstab(index = df[&#39;Sex&#39;],columns = df[&#39;Pclass&#39;])</code></p><h1 id="三、时间操作"><a href="#三、时间操作" class="headerlink" title="三、时间操作"></a>三、时间操作</h1><h2 id="3-1-时间基本操作"><a href="#3-1-时间基本操作" class="headerlink" title="3.1 时间基本操作"></a>3.1 时间基本操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdts <span class="token operator">=</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2022-08-17'</span><span class="token punctuation">)</span><span class="token comment">#Timestamp('2022-08-17 00:00:00')</span>ts<span class="token punctuation">.</span>month<span class="token comment">#8</span>ts<span class="token punctuation">.</span>day<span class="token comment">#17</span>ts <span class="token operator">+</span> pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span><span class="token string">'5 days'</span><span class="token punctuation">)</span><span class="token comment">#Timestamp('2022-08-22 00:00:00')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，还有<code>pd.to_datetime(&#39;2022-08-17&#39;)</code>/<code>pd.to_datetime(&#39;17/8/2022&#39;)</code>来构造时间。</p><p>一般我们可以用于构造<code>series</code>结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2022-08-17 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'2022-08-22 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'2022-08-23 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    2022-08-17 00:00:001    2022-08-22 00:00:002    2022-08-23 00:00:00dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把它转换为<code>datetime</code>类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0   2022-08-171   2022-08-222   2022-08-23dtype: datetime64[ns]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以调用它的属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ts<span class="token punctuation">.</span>dt<span class="token punctuation">.</span>hour<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    01    02    0dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">ts<span class="token punctuation">.</span>dt<span class="token punctuation">.</span>weekday<span class="token comment">#星期索引,周一的索引为0,依此类推</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    21    02    1dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造<code>series</code>结构，可以直接指定<code>datetime</code>类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2022-08-24'</span><span class="token punctuation">,</span>periods <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>freq <span class="token operator">=</span> <span class="token string">'12H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#freq为时间间隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0   2022-08-24 00:00:001   2022-08-24 12:00:002   2022-08-25 00:00:003   2022-08-25 12:00:004   2022-08-26 00:00:005   2022-08-26 12:00:006   2022-08-27 00:00:007   2022-08-27 12:00:008   2022-08-28 00:00:009   2022-08-28 12:00:00dtype: datetime64[ns]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定<code>index</code>列并解析<code>date</code>数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/flowdata.csv'</span><span class="token punctuation">,</span>index_col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>parse_dates <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-时间序列操作"><a href="#3-2-时间序列操作" class="headerlink" title="3.2 时间序列操作"></a>3.2 时间序列操作</h2><p>进行<strong>取数据操作</strong>：【指定索引】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span>pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2012-01-01 09:00'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2012-01-01 19:00'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'2012-01-01 09:00'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'2012-01-01 19:00'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Time</th><th style="text-align:right">L06_347</th><th style="text-align:right">LS06_347</th><th style="text-align:right">LS06_348</th></tr></thead><tbody><tr><td style="text-align:right">2012-01-01 09:00:00</td><td style="text-align:right">0.330750</td><td style="text-align:right">0.293583</td><td style="text-align:right">0.029750</td></tr><tr><td style="text-align:right">2012-01-01 12:00:00</td><td style="text-align:right">0.295000</td><td style="text-align:right">0.285167</td><td style="text-align:right">0.031750</td></tr><tr><td style="text-align:right">2012-01-01 15:00:00</td><td style="text-align:right">0.301417</td><td style="text-align:right">0.287750</td><td style="text-align:right">0.031417</td></tr><tr><td style="text-align:right">2012-01-01 18:00:00</td><td style="text-align:right">0.322083</td><td style="text-align:right">0.304167</td><td style="text-align:right">0.038083</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'2013'</span><span class="token punctuation">]</span><span class="token comment">#根据年份取</span>data<span class="token punctuation">[</span><span class="token string">'2012-01'</span><span class="token punctuation">:</span><span class="token string">'2012-03'</span><span class="token punctuation">]</span><span class="token comment">#根据年份+月份取</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#根据布尔类型索引取出月份</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#取出时间片段法1</span>data<span class="token punctuation">.</span>between_time<span class="token punctuation">(</span><span class="token string">'08:00'</span><span class="token punctuation">,</span><span class="token string">'12:00'</span><span class="token punctuation">)</span><span class="token comment">#取出时间片段法2,包含端点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对时间序列进行<strong>重采样</strong>：<code>data.resample(&#39;D&#39;).mean().head()</code>/<code>data.resample(&#39;D&#39;).max().head()</code></p><div class="table-container"><table><thead><tr><th style="text-align:right">Time</th><th style="text-align:right">L06_347</th><th style="text-align:right">LS06_347</th><th style="text-align:right">LS06_348</th><th style="text-align:right">month</th></tr></thead><tbody><tr><td style="text-align:right">2009-01-01</td><td style="text-align:right">0.125010</td><td style="text-align:right">0.092281</td><td style="text-align:right">0.016635</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2009-01-02</td><td style="text-align:right">0.124146</td><td style="text-align:right">0.095781</td><td style="text-align:right">0.016406</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2009-01-03</td><td style="text-align:right">0.113562</td><td style="text-align:right">0.085542</td><td style="text-align:right">0.016094</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2009-01-04</td><td style="text-align:right">0.140198</td><td style="text-align:right">0.102708</td><td style="text-align:right">0.017323</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">2009-01-05</td><td style="text-align:right">0.128812</td><td style="text-align:right">0.104490</td><td style="text-align:right">0.018167</td><td style="text-align:right">1</td></tr></tbody></table></div><p>取时间节点为多天(如3天)：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'3D'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#以月份为单位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>画图展示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib notebook<span class="token comment">#进行画图展示</span>data<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220817180544761.png" alt="image-20220817180544761" style="zoom:50%;" /></p><h1 id="四、Pandas常用操作"><a href="#四、Pandas常用操作" class="headerlink" title="四、Pandas常用操作"></a>四、Pandas常用操作</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'group'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">group</th><th style="text-align:right">data</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">a</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">a</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">a</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">b</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">b</td><td style="text-align:right">12</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">b</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">c</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">c</td><td style="text-align:right">5</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">c</td><td style="text-align:right">7</td></tr></tbody></table></div><h2 id="4-1-排序"><a href="#4-1-排序" class="headerlink" title="4.1 排序"></a>4.1 排序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'group'</span><span class="token punctuation">,</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">group</th><th style="text-align:right">data</th></tr></thead><tbody><tr><td style="text-align:right">6</td><td style="text-align:right">c</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">7</td><td style="text-align:right">c</td><td style="text-align:right">5</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">c</td><td style="text-align:right">7</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">b</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">b</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">b</td><td style="text-align:right">12</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">a</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">a</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">0</td><td style="text-align:right">a</td><td style="text-align:right">4</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'k1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'k2'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'k2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">k1</th><th style="text-align:right">k2</th></tr></thead><tbody><tr><td style="text-align:right">2</td><td style="text-align:right">one</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">one</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">0</td><td style="text-align:right">one</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">two</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">two</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">two</td><td style="text-align:right">4</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">two</td><td style="text-align:right">4</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#去除重复数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">k1</th><th style="text-align:right">k2</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">one</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">one</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">one</td><td style="text-align:right">1</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">two</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">two</td><td style="text-align:right">4</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset <span class="token operator">=</span> <span class="token string">'k1'</span><span class="token punctuation">)</span><span class="token comment">#指定列去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">k1</th><th>k2</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">one</td><td>3</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">two</td><td>3</td></tr></tbody></table></div><h2 id="4-2-同类项合并-作映射"><a href="#4-2-同类项合并-作映射" class="headerlink" title="4.2 同类项合并(作映射)"></a>4.2 同类项合并(作映射)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'food'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">food_map</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'A'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'A'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'B'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'B'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'B'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'C'</span>    <span class="token keyword">elif</span> series<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'C'</span>data<span class="token punctuation">[</span><span class="token string">'food_map'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>food_map<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token string">'columns'</span><span class="token punctuation">)</span><span class="token comment">#对数据执行相同的操作(函数)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">data</th><th style="text-align:right">food</th><th style="text-align:right">food_map</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">A1</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">A2</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">B1</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">B2</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">B3</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">6</td><td style="text-align:right">C1</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">7</td><td style="text-align:right">C2</td><td style="text-align:right">C</td></tr></tbody></table></div><p>或使用<code>map</code>操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">food2Upper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'A1'</span><span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span>    <span class="token string">'A2'</span><span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span>    <span class="token string">'B1'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span>    <span class="token string">'B2'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span>    <span class="token string">'B3'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span>    <span class="token string">'C1'</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">,</span>    <span class="token string">'C2'</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span><span class="token string">'upper'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>food2Upper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">data</th><th style="text-align:right">food</th><th style="text-align:right">food_map</th><th style="text-align:right">upper</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">A1</td><td style="text-align:right">A</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">2</td><td style="text-align:right">A2</td><td style="text-align:right">A</td><td style="text-align:right">A</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">3</td><td style="text-align:right">B1</td><td style="text-align:right">B</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">4</td><td style="text-align:right">B2</td><td style="text-align:right">B</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">5</td><td style="text-align:right">B3</td><td style="text-align:right">B</td><td style="text-align:right">B</td></tr><tr><td style="text-align:right">5</td><td style="text-align:right">6</td><td style="text-align:right">C1</td><td style="text-align:right">C</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">6</td><td style="text-align:right">7</td><td style="text-align:right">C2</td><td style="text-align:right">C</td><td style="text-align:right">C</td></tr></tbody></table></div><h2 id="4-3-assign、replace方法"><a href="#4-3-assign、replace方法" class="headerlink" title="4.3 assign、replace方法"></a>4.3 assign、replace方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data1'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">'data2'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>ration <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">data1</th><th style="text-align:right">data2</th><th style="text-align:right">ration</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">-1.069925</td><td style="text-align:right">-0.186540</td><td style="text-align:right">5.735617</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">0.636127</td><td style="text-align:right">0.020425</td><td style="text-align:right">31.143814</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">0.366197</td><td style="text-align:right">-0.102836</td><td style="text-align:right">-3.560992</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">-0.975327</td><td style="text-align:right">0.451201</td><td style="text-align:right">-2.161624</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">-1.562407</td><td style="text-align:right">-2.436845</td><td style="text-align:right">0.641160</td></tr></tbody></table></div><p>使用<code>drop</code>方法可以删去<code>ration</code>列：<code>df2.drop(&#39;ration&#39;,axis=&#39;columns&#39;,inplace=True)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    1.01    2.02    3.03    4.04    5.05    6.06    7.07    8.08    NaNdtype: float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-连续值离散化：cut方法"><a href="#4-4-连续值离散化：cut方法" class="headerlink" title="4.4 连续值离散化：cut方法"></a>4.4 连续值离散化：cut方法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">]</span>bins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span>bins_res <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span>bins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[(10, 40], (10, 40], (10, 40], (10, 40], (10, 40], (10, 40], (40, 80], (40, 80], (40, 80], (40, 80]]Categories (2, interval[int64]): [(10, 40] &lt; (40, 80]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">bins_res<span class="token punctuation">.</span>labels<span class="token comment">#array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1], dtype=int8)</span>pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>bins_res<span class="token punctuation">)</span><span class="token comment">#(10, 40]    6  (40, 80]    4  dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[(10, 30], (10, 30], (10, 30], (10, 30], (10, 30], (30, 50], (30, 50], (50, 80], (50, 80], (50, 80]]Categories (3, interval[int64]): [(10, 30] &lt; (30, 50] &lt; (50, 80]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">group_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Yonth'</span><span class="token punctuation">,</span><span class="token string">'Mille'</span><span class="token punctuation">,</span><span class="token string">'Old'</span><span class="token punctuation">]</span><span class="token comment">#pd.cut(ages,[10,20,50,80],labels=group_names)</span>pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>labels<span class="token operator">=</span>group_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#labels即bins换完之后的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Mille    4Old      3Yonth    3dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-缺失值的情况"><a href="#4-5-缺失值的情况" class="headerlink" title="4.5 缺失值的情况"></a>4.5 缺失值的情况</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">0</td><td style="text-align:right">1.0</td><td style="text-align:right">2.0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">NaN</td><td style="text-align:right">0.0</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">0</td><td style="text-align:right">0.0</td><td style="text-align:right">NaN</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">0</td><td style="text-align:right">1.0</td><td style="text-align:right">2.0</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看是否有缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">False</td><td style="text-align:right">False</td><td style="text-align:right">False</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">False</td><td style="text-align:right">True</td><td style="text-align:right">False</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">False</td><td style="text-align:right">False</td><td style="text-align:right">True</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">False</td><td style="text-align:right">False</td><td style="text-align:right">False</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#哪一列是否有缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    False1     True2     Truedtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#哪一行是否有缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    False1     True2     True3    Falsedtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#填充缺失值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">012001.02.0105.00.0200.05.0301.02.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#通过布尔类型的索引找到带缺失值的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th></tr></thead><tbody><tr><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">NaN</td><td style="text-align:right">0.0</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">0</td><td style="text-align:right">0.0</td><td style="text-align:right">NaN</td></tr></tbody></table></div><h2 id="4-6-字符串操作"><a href="#4-6-字符串操作" class="headerlink" title="4.6 字符串操作"></a>4.6 字符串操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'gaer'</span><span class="token punctuation">,</span><span class="token string">'GAER'</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0       A1       b2       B3    gaer4    GAER5     NaNdtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#将字符串中的字母全部转为小写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0       a1       b2       b3    gaer4    gaer5     NaNdtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，将字符串中的字母全部转为大写可使用：<code>s.str.upper()</code>。</p><p>统计字符串长度：<code>s.str.len()</code></p><p>去除字符串中的空格：<code>strip</code>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">index <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'  tang'</span><span class="token punctuation">,</span><span class="token string">'yu   '</span><span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>index<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>还可以只去掉左/右空格：<code>index.str.lstrip()</code>,<code>index.str.rstrip()</code></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A a'</span><span class="token punctuation">,</span><span class="token string">'B b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns <span class="token operator">=</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A_a</th><th style="text-align:right">B_b</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">-1.392628</td><td style="text-align:right">1.020082</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">0.866707</td><td style="text-align:right">0.654731</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">-0.320871</td><td style="text-align:right">1.360513</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a_b_C'</span><span class="token punctuation">,</span><span class="token string">'c_d_e'</span><span class="token punctuation">,</span><span class="token string">'f_g_h'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    [a, b, C]1    [c, d, e]2    [f, g, h]dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到新的字段：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span>expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">0</th><th style="text-align:right">1</th><th style="text-align:right">2</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">a</td><td style="text-align:right">b</td><td style="text-align:right">C</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">c</td><td style="text-align:right">d</td><td style="text-align:right">e</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">f</td><td style="text-align:right">g</td><td style="text-align:right">h</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span>expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">0</th><th style="text-align:right">1</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">a</td><td style="text-align:right">b_C</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">c</td><td style="text-align:right">d_e</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">f</td><td style="text-align:right">g_h</td></tr></tbody></table></div><p>进行<strong>包含的判断</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'Aas'</span><span class="token punctuation">,</span><span class="token string">'Afgew'</span><span class="token punctuation">,</span><span class="token string">'Ager'</span><span class="token punctuation">,</span><span class="token string">'Agre'</span><span class="token punctuation">,</span><span class="token string">'Ager'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0        A1      Aas2    Afgew3     Ager4     Agre5     Agerdtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'Ag'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    False1    False2    False3     True4     True5     Truedtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定分隔符：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a|b'</span><span class="token punctuation">,</span><span class="token string">'a|c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>sep <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">a</th><th style="text-align:right">b</th><th style="text-align:right">c</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">0</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">1</td><td style="text-align:right">0</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">1</td><td style="text-align:right">0</td><td style="text-align:right">1</td></tr></tbody></table></div><h2 id="4-7-Pandas绘图"><a href="#4-7-Pandas绘图" class="headerlink" title="4.7 Pandas绘图"></a>4.7 Pandas绘图</h2><h3 id="4-7-1-画折线图"><a href="#4-7-1-画折线图" class="headerlink" title="4.7.1 画折线图"></a>4.7.1 画折线图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nps <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#生成标准正态分布的伪随机数(均值为0，方差为1) </span>s<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819121800261.png" alt="image-20220819121800261"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Out[3]:</p><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">-0.887275</td><td style="text-align:right">0.191912</td><td style="text-align:right">0.276001</td><td style="text-align:right">-0.804419</td></tr><tr><td style="text-align:right">10</td><td style="text-align:right">-0.404738</td><td style="text-align:right">-1.942269</td><td style="text-align:right">0.183497</td><td style="text-align:right">-1.845532</td></tr><tr><td style="text-align:right">20</td><td style="text-align:right">-0.746758</td><td style="text-align:right">-1.534280</td><td style="text-align:right">0.178036</td><td style="text-align:right">-0.790430</td></tr><tr><td style="text-align:right">30</td><td style="text-align:right">-0.702495</td><td style="text-align:right">-2.510148</td><td style="text-align:right">1.879569</td><td style="text-align:right">-0.421204</td></tr><tr><td style="text-align:right">40</td><td style="text-align:right">-0.023128</td><td style="text-align:right">-1.389147</td><td style="text-align:right">2.205663</td><td style="text-align:right">-0.253191</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819121911613.png" alt="image-20220819121911613"></p><h3 id="4-7-2-画柱状图"><a href="#4-7-2-画柱状图" class="headerlink" title="4.7.2 画柱状图"></a>4.7.2 画柱状图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcdefghijklmnop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax <span class="token operator">=</span> axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token comment">#bar表示竖着画</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax <span class="token operator">=</span> axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>kind<span class="token operator">=</span><span class="token string">'barh'</span><span class="token punctuation">)</span><span class="token comment">#barh表示横着画</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819122925825.png" alt="image-20220819122925825" style="zoom: 80%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'five'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'Genus'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right">Genus</th><th style="text-align:right">A</th><th style="text-align:right">B</th><th style="text-align:right">C</th><th style="text-align:right">D</th></tr></thead><tbody><tr><td style="text-align:right">one</td><td style="text-align:right">0.130214</td><td style="text-align:right">0.536757</td><td style="text-align:right">0.243533</td><td style="text-align:right">0.371248</td></tr><tr><td style="text-align:right">two</td><td style="text-align:right">0.424017</td><td style="text-align:right">0.052330</td><td style="text-align:right">0.932248</td><td style="text-align:right">0.482683</td></tr><tr><td style="text-align:right">three</td><td style="text-align:right">0.084314</td><td style="text-align:right">0.589451</td><td style="text-align:right">0.876603</td><td style="text-align:right">0.604232</td></tr><tr><td style="text-align:right">four</td><td style="text-align:right">0.561504</td><td style="text-align:right">0.121044</td><td style="text-align:right">0.303261</td><td style="text-align:right">0.065200</td></tr><tr><td style="text-align:right">five</td><td style="text-align:right">0.680850</td><td style="text-align:right">0.177105</td><td style="text-align:right">0.314080</td><td style="text-align:right">0.153842</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819123407782.png" alt="image-20220819123407782" style="zoom: 67%;" /></p><h3 id="4-7-3-直方图"><a href="#4-7-3-直方图" class="headerlink" title="4.7.3 直方图"></a>4.7.3 直方图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'tips.csv'</span><span class="token punctuation">)</span>tips<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:right"></th><th style="text-align:right">total_bill</th><th style="text-align:right">tip</th><th style="text-align:right">sex</th><th style="text-align:right">smoker</th><th style="text-align:right">day</th><th style="text-align:right">time</th><th style="text-align:right">size</th></tr></thead><tbody><tr><td style="text-align:right">0</td><td style="text-align:right">16.99</td><td style="text-align:right">1.01</td><td style="text-align:right">Female</td><td style="text-align:right">No</td><td style="text-align:right">Sun</td><td style="text-align:right">Dinner</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">1</td><td style="text-align:right">10.34</td><td style="text-align:right">1.66</td><td style="text-align:right">Male</td><td style="text-align:right">No</td><td style="text-align:right">Sun</td><td style="text-align:right">Dinner</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">21.01</td><td style="text-align:right">3.50</td><td style="text-align:right">Male</td><td style="text-align:right">No</td><td style="text-align:right">Sun</td><td style="text-align:right">Dinner</td><td style="text-align:right">3</td></tr><tr><td style="text-align:right">3</td><td style="text-align:right">23.68</td><td style="text-align:right">3.31</td><td style="text-align:right">Male</td><td style="text-align:right">No</td><td style="text-align:right">Sun</td><td style="text-align:right">Dinner</td><td style="text-align:right">2</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">24.59</td><td style="text-align:right">3.61</td><td style="text-align:right">Female</td><td style="text-align:right">No</td><td style="text-align:right">Sun</td><td style="text-align:right">Dinner</td><td style="text-align:right">4</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">tips<span class="token punctuation">.</span>total_bill<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'hist'</span><span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819123610876.png" alt="image-20220819123610876" style="zoom:67%;" /></p><h3 id="4-7-4-散点图"><a href="#4-7-4-散点图" class="headerlink" title="4.7.4 散点图"></a>4.7.4 散点图</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">macro <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'macrodata.csv'</span><span class="token punctuation">)</span>macro<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> macro<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'quarter'</span><span class="token punctuation">,</span><span class="token string">'realgdp'</span><span class="token punctuation">,</span><span class="token string">'realcons'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token string">'quarter'</span><span class="token punctuation">,</span><span class="token string">'realgdp'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819123833970.png" alt="image-20220819123833970" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>scatter_matrix<span class="token punctuation">(</span>data<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819124538160.png" alt="image-20220819124538160" style="zoom:67%;" /></p><h1 id="五、Pandas大数据处理技巧"><a href="#五、Pandas大数据处理技巧" class="headerlink" title="五、Pandas大数据处理技巧"></a>五、Pandas大数据处理技巧</h1><h2 id="5-1-获取平均内存使用大小"><a href="#5-1-获取平均内存使用大小" class="headerlink" title="5.1 获取平均内存使用大小"></a>5.1 获取平均内存使用大小</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">g1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'game_logs.csv'</span><span class="token punctuation">)</span>g1<span class="token punctuation">.</span>shape<span class="token comment">#(171907, 161),数据+列</span>g1<span class="token punctuation">.</span>info<span class="token punctuation">(</span>memory_usage<span class="token operator">=</span><span class="token string">'deep'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 171907 entries, 0 to 171906Columns: 161 entries, date to acquisition_infodtypes: float64(77), int64(6), object(78)memory usage: 859.4 MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dtype <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'float64'</span><span class="token punctuation">,</span><span class="token string">'int64'</span><span class="token punctuation">,</span><span class="token string">'object'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    selected_dtype <span class="token operator">=</span> g1<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include <span class="token operator">=</span> <span class="token punctuation">[</span>dtype<span class="token punctuation">]</span><span class="token punctuation">)</span>    mean_usage_b <span class="token operator">=</span> selected_dtype<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span>deep <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    mean_usage_mb <span class="token operator">=</span> mean_usage_b <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'平均内存占用'</span><span class="token punctuation">,</span>dtype<span class="token punctuation">,</span>mean_usage_mb<span class="token punctuation">,</span><span class="token string">'MB'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">平均内存占用 float64 1.294733194204477 MB平均内存占用 int64 1.1242000034877233 MB平均内存占用 object 9.500870656363572 MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看各种类型能表达的最大数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npint_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'uint8'</span><span class="token punctuation">,</span><span class="token string">'int8'</span><span class="token punctuation">,</span><span class="token string">'int16'</span><span class="token punctuation">,</span><span class="token string">'int32'</span><span class="token punctuation">,</span><span class="token string">'int64'</span><span class="token punctuation">]</span><span class="token comment">#uint8为无符号整数</span><span class="token keyword">for</span> it <span class="token keyword">in</span> int_types<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Machine parameters for uint8---------------------------------------------------------------min &#x3D; 0max &#x3D; 255---------------------------------------------------------------Machine parameters for int8---------------------------------------------------------------min &#x3D; -128max &#x3D; 127---------------------------------------------------------------Machine parameters for int16---------------------------------------------------------------min &#x3D; -32768max &#x3D; 32767---------------------------------------------------------------Machine parameters for int32---------------------------------------------------------------min &#x3D; -2147483648max &#x3D; 2147483647---------------------------------------------------------------Machine parameters for int64---------------------------------------------------------------min &#x3D; -9223372036854775808max &#x3D; 9223372036854775807---------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2-更改数据类型"><a href="#9-2-更改数据类型" class="headerlink" title="9.2 更改数据类型"></a>9.2 更改数据类型</h2><p>向下转换数据类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mem_usage</span><span class="token punctuation">(</span>pandas_obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>pandas_obj<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">)</span><span class="token punctuation">:</span>        usage_b <span class="token operator">=</span> pandas_obj<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span>deep <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        usage_b <span class="token operator">=</span> pandas_obj<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span>deep <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    usage_mb <span class="token operator">=</span> usage_b<span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token string">'&#123;:03.2f&#125; MB'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>usage_mb<span class="token punctuation">)</span>g1_int <span class="token operator">=</span> g1<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'int64'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>coverted_int <span class="token operator">=</span> g1_int<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_numeric<span class="token punctuation">,</span>downcast <span class="token operator">=</span> <span class="token string">'unsigned'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>g1_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#7.87 MB</span><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>coverted_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#1.48 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以将<code>float64</code>类型的数据转换为<code>float</code>类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">gl_obj <span class="token operator">=</span> gl<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'object'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>gl_obj<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819163403748.png" alt="image-20220819163403748"></p><p>可观察<code>day_of_week</code>列的<code>unique</code>值非常少，故将<code>object</code>类型转为<code>category</code>类型，即可将重复的数据映射到同一个内存空间：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dow <span class="token operator">=</span> g1_obj<span class="token punctuation">.</span>day_of_weekdow<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    Thu1    Fri2    Sat3    Mon4    TueName: day_of_week, dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dow_cat <span class="token operator">=</span> dow<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span>dow_cat<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    Thu1    Fri2    Sat3    Mon4    TueName: day_of_week, dtype: categoryCategories (7, object): [&#39;Fri&#39;, &#39;Mon&#39;, &#39;Sat&#39;, &#39;Sun&#39;, &#39;Thu&#39;, &#39;Tue&#39;, &#39;Wed&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dow_cat<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>codes<span class="token comment">#查看编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    41    02    23    14    55    46    27    28    19    5dtype: int8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>dow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#9.84 MB</span><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>dow_cat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0.16 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可根据以下程序进行判断重复数据是否较多：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">converted_obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> gl_obj<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    num_unique_values <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>gl_obj<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    num_total_values <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>gl_obj<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num_unique_values <span class="token operator">/</span> num_total_values <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">:</span>        converted_obj<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> gl_obj<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        converted_obj<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> gl_obj<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>gl_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#751.64 MB</span><span class="token keyword">print</span><span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>converted_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#51.67 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-3-对时间类型的优化"><a href="#9-3-对时间类型的优化" class="headerlink" title="9.3 对时间类型的优化"></a>9.3 对时间类型的优化</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">date <span class="token operator">=</span> optimized_gl<span class="token punctuation">.</span>datedate<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0    187105041    187105052    187105063    187105084    18710509Name: date, dtype: uint32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0.66 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定为标准时间格式，占用内存将变多：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">optimized_gl<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>date<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>mem_usage<span class="token punctuation">(</span>optimized_gl<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#1.31 MB</span>optimized_gl<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0   1871-05-041   1871-05-052   1871-05-063   1871-05-084   1871-05-09Name: date, dtype: datetime64[ns]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理:可视化库Matplotlib</title>
      <link href="/2022/08/16/python05-python-matplotlib/"/>
      <url>/2022/08/16/python05-python-matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Matplotlib基本操作"><a href="#一、Matplotlib基本操作" class="headerlink" title="一、Matplotlib基本操作"></a>一、Matplotlib基本操作</h1><h2 id="1-1-绘制基本图"><a href="#1-1-绘制基本图" class="headerlink" title="1.1 绘制基本图"></a>1.1 绘制基本图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'xlabel'</span><span class="token punctuation">)</span><span class="token comment">#横轴含义解释</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'ylabel'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819195838003.png" alt="image-20220819195838003" style="zoom:67%;" /></p><p>还可以设置横轴字体：<code>plt.xlabel(&#39;xlabel&#39;,fontsize = 16)</code></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819195949582.png" alt="image-20220819195949582" style="zoom:67%;" /></p><h2 id="1-2-不同线条的绘制"><a href="#1-2-不同线条的绘制" class="headerlink" title="1.2 不同线条的绘制"></a>1.2 不同线条的绘制</h2><h3 id="1-2-1-线条类型"><a href="#1-2-1-线条类型" class="headerlink" title="1.2.1 线条类型"></a>1.2.1 线条类型</h3><p>线条类型可以自定义：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">类型</th><th style="text-align:center">字符</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center"><code>&#39;-&#39;</code></td><td style="text-align:center">实线</td><td style="text-align:center"><code>&#39;--&#39;</code></td><td style="text-align:center">虚线</td></tr><tr><td style="text-align:center"><code>&#39;-.&#39;</code></td><td style="text-align:center">虚点线</td><td style="text-align:center"><code>&#39;:&#39;</code></td><td style="text-align:center">点线</td></tr><tr><td style="text-align:center"><code>&#39;.&#39;</code></td><td style="text-align:center">点</td><td style="text-align:center"><code>&#39;,&#39;</code></td><td style="text-align:center">像素点</td></tr><tr><td style="text-align:center"><code>&#39;o&#39;</code></td><td style="text-align:center">圆点</td><td style="text-align:center"><code>&#39;v&#39;</code></td><td style="text-align:center">下三角点</td></tr><tr><td style="text-align:center"><code>&#39;^&#39;</code></td><td style="text-align:center">上三角点</td><td style="text-align:center"><code>&#39;&lt;&#39;</code></td><td style="text-align:center">左三角点</td></tr><tr><td style="text-align:center"><code>&#39;&gt;&#39;</code></td><td style="text-align:center">右三角点</td><td style="text-align:center"><code>&#39;1&#39;</code></td><td style="text-align:center">下三叉点</td></tr><tr><td style="text-align:center"><code>&#39;2&#39;</code></td><td style="text-align:center">上三叉点</td><td style="text-align:center"><code>&#39;3&#39;</code></td><td style="text-align:center">左三叉点</td></tr><tr><td style="text-align:center"><code>&#39;4&#39;</code></td><td style="text-align:center">右三叉点</td><td style="text-align:center"><code>&#39;s&#39;</code></td><td style="text-align:center">正方点</td></tr><tr><td style="text-align:center"><code>&#39;p&#39;</code></td><td style="text-align:center">五角点</td><td style="text-align:center"><code>&#39;*&#39;</code></td><td style="text-align:center">星形点</td></tr><tr><td style="text-align:center"><code>&#39;h&#39;</code></td><td style="text-align:center">六边形点1</td><td style="text-align:center"><code>&#39;H&#39;</code></td><td style="text-align:center">六边形点2</td></tr><tr><td style="text-align:center"><code>&#39;+&#39;</code></td><td style="text-align:center">加号点</td><td style="text-align:center"><code>&#39;x&#39;</code></td><td style="text-align:center">乘号点</td></tr><tr><td style="text-align:center"><code>&#39;D&#39;</code></td><td style="text-align:center">实心菱形点</td><td style="text-align:center"><code>&#39;d&#39;</code></td><td style="text-align:center">瘦菱形点</td></tr><tr><td style="text-align:center"><code>&#39;_&#39;</code></td><td style="text-align:center">横线点</td><td style="text-align:center"></td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'xlabel'</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'ylabel'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819200229110.png" alt="image-20220819200229110" style="zoom:67%;" /></p><h3 id="1-2-2-线条颜色"><a href="#1-2-2-线条颜色" class="headerlink" title="1.2.2 线条颜色"></a>1.2.2 线条颜色</h3><p>表示颜色的字符参数有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">颜色</th></tr></thead><tbody><tr><td style="text-align:center"><code>‘b’</code></td><td style="text-align:center">蓝色，blue</td></tr><tr><td style="text-align:center"><code>‘g’</code></td><td style="text-align:center">绿色，green</td></tr><tr><td style="text-align:center"><code>‘r’</code></td><td style="text-align:center">红色，red</td></tr><tr><td style="text-align:center"><code>‘c’</code></td><td style="text-align:center">青色，cyan</td></tr><tr><td style="text-align:center"><code>‘m’</code></td><td style="text-align:center">品红，magenta</td></tr><tr><td style="text-align:center"><code>‘y’</code></td><td style="text-align:center">黄色，yellow</td></tr><tr><td style="text-align:center"><code>‘k’</code></td><td style="text-align:center">黑色，black</td></tr><tr><td style="text-align:center"><code>‘w’</code></td><td style="text-align:center">白色，white</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'-.'</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'xlabel'</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'ylabel'</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819200800139.png" alt="image-20220819200800139" style="zoom:67%;" /></p><blockquote><p>注：</p><p>字体和线条类型可以合并书写，如：<code>plt.plot([1,2,3,4,5],[1,4,9,16,25],&#39;ro&#39;)</code>，表示红色线条+圆点型。</p></blockquote><h3 id="1-2-3-绘制多个线"><a href="#1-2-3-绘制多个线" class="headerlink" title="1.2.3 绘制多个线"></a>1.2.3 绘制多个线</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_numpy <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>tang_numpy<span class="token punctuation">,</span>tang_numpy<span class="token punctuation">,</span><span class="token string">'r--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>tang_numpy<span class="token punctuation">,</span>tang_numpy<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'bs'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>tang_numpy<span class="token punctuation">,</span>tang_numpy<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'go'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819201228319.png" alt="image-20220819201228319" style="zoom:67%;" /></p><h3 id="1-2-4-指定线条的宽度"><a href="#1-2-4-指定线条的宽度" class="headerlink" title="1.2.4 指定线条的宽度"></a>1.2.4 指定线条的宽度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>linewidth <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token comment">#linewidth指定线条的宽度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819202015785.png" alt="image-20220819202015785" style="zoom:67%;" /></p><h3 id="1-2-5-指定修饰和参数"><a href="#1-2-5-指定修饰和参数" class="headerlink" title="1.2.5 指定修饰和参数"></a>1.2.5 指定修饰和参数</h3><p>相关修饰：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#markersize代表点的大小</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">,</span>markerfacecolor<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>markersize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819202208081.png" alt="image-20220819202208081" style="zoom:67%;" /></p><p>先绘图，再设定参数，使用<code>setp</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">line <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>line<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>linewidth <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819202532994.png" alt="image-20220819202532994" style="zoom:67%;" /></p><h2 id="1-3-子图"><a href="#1-3-子图" class="headerlink" title="1.3 子图"></a>1.3 子图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 211 表示一会要画的图是2行一列的 最后一个1表示的是子图当中的第1个图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># 212 表示一会要画的图是2行一列的 最后一个1表示的是子图当中的第2个图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819203000844.png" alt="image-20220819203000844" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 121 表示一会要画的图是1行2列的 最后一个1表示的是子图当中的第1个图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># 122 表示一会要画的图是1行2列的 最后一个1表示的是子图当中的第2个图</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819203235138.png" alt="image-20220819203235138" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">321</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819203551230.png" alt="image-20220819203551230" style="zoom:67%;" /></p><h2 id="1-4-为图添加注释"><a href="#1-4-为图添加注释" class="headerlink" title="1.4 为图添加注释"></a>1.4 为图添加注释</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">':'</span><span class="token punctuation">,</span>marker <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">,</span>markerfacecolor<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>markersize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x:---'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y:---'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'tang yu di:---'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'tang yu di'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#添加网格</span><span class="token comment">#xy为箭头头端,xytext为注释,facecolor指定箭头颜色,shrink指定箭头长度</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">'tangyudi'</span><span class="token punctuation">,</span>xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arrowprops <span class="token operator">=</span>  <span class="token builtin">dict</span><span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>shrink<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span>headlength<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>headwidth <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819203718368.png" alt="image-20220819203718368" style="zoom:67%;" /></p><h2 id="1-5-风格设置"><a href="#1-5-风格设置" class="headerlink" title="1.5 风格设置"></a>1.5 风格设置</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>available<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[&#39;dark_background&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-ticks&#39;, &#39;bmh&#39;, &#39;ggplot&#39;, &#39;seaborn-darkgrid&#39;, &#39;classic&#39;, &#39;fivethirtyeight&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-whitegrid&#39;, &#39;seaborn-white&#39;, &#39;grayscale&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-poster&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819204918208.png" alt="image-20220819204918208" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'dark_background'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819204942977.png" alt="image-20220819204942977" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#多种风格混合使用</span>plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ggplot'</span><span class="token punctuation">,</span><span class="token string">'bmh'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819205027780.png" alt="image-20220819205027780" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>xkcd<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819205215305.png" alt="image-20220819205215305" style="zoom:67%;" /></p><h1 id="二、条形图"><a href="#二、条形图" class="headerlink" title="二、条形图"></a>二、条形图</h1><h2 id="2-1-条形图外观"><a href="#2-1-条形图外观" class="headerlink" title="2.1 条形图外观"></a>2.1 条形图外观</h2><p>使用<code>plt.subplots</code>函数时，可以直接在该函数内部设置子图纸信息。</p><p>该函数返回两个变量，一个是<code>Figure</code>实例<code>fig</code>，另一个 <code>AxesSubplot</code>实例<code>axes</code> 。<strong><code>fig</code>代表整个图像，<code>axes</code>代表坐标轴和画的子图，通过下标获取需要的子区域</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'nbagg'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltnp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>fig<span class="token punctuation">,</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>ncols <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>v_bars <span class="token operator">=</span> axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token comment">#竖着画</span>h_bars <span class="token operator">=</span> axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>barh<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token comment">#横着画,横坐标英文:horizontal axis</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>axhline<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'grey'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#从0点位置画线</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>axvline<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'grey'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819210829304.png" alt="image-20220819210829304" style="zoom:67%;" /></p><p><code>zip()</code>是<code>Python</code>的一个内建函数，它接受一系列可迭代的对象作为参数，<strong>将对象中对应的元素打包成一个个<code>tuple</code>(元组)</strong>，然后返回由这些<code>tuples</code>组成的<strong><code>list</code>(列表)</strong>。若传入参数的长度不等，则返回<code>list</code>的长度和参数中长度最短的对象相同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>v_bars <span class="token operator">=</span> ax<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'lightblue'</span><span class="token punctuation">)</span><span class="token keyword">for</span> bar<span class="token punctuation">,</span>height <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v_bars<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> height <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        bar<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>edgecolor <span class="token operator">=</span> <span class="token string">'darkred'</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">,</span>linewidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820114925833.png" alt="image-20220820114925833" style="zoom:67%;" /></p><h2 id="2-2-对图内部进行颜色填充"><a href="#2-2-对图内部进行颜色填充" class="headerlink" title="2.2 对图内部进行颜色填充"></a>2.2 对图内部进行颜色填充</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#cumsum()返回给定axis上的累计和</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'lightblue'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819211526275.png" alt="image-20220819211526275" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>x <span class="token operator">+</span><span class="token number">1</span>y2 <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>x <span class="token operator">+</span><span class="token number">1.2</span>y_mean <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span>x<span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.5</span><span class="token operator">*</span>x <span class="token operator">+</span><span class="token number">1.1</span>fig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y_mean<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220819232047702.png" alt="image-20220819232047702" style="zoom:67%;" /></p><h2 id="2-3-指定误差范围"><a href="#2-3-指定误差范围" class="headerlink" title="2.3 指定误差范围"></a>2.3 指定误差范围</h2><p><strong><code>xlim()</code>与<code>ylim()</code>——设置数值显示范围</strong>【防止条形图数据顶格】：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span>xmin<span class="token punctuation">,</span>xmax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>ymin<span class="token punctuation">,</span>ymax<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>xmin</code>：<code>x</code>轴上的显示下限</li><li><code>xmax</code>：<code>x</code>轴上的显示上限</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#指标</span>variance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token comment">#可以浮动的范围</span>bar_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bar1'</span><span class="token punctuation">,</span><span class="token string">'bar2'</span><span class="token punctuation">,</span><span class="token string">'bar3'</span><span class="token punctuation">]</span>x_pos <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bar_label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#len(bar_label)为3</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x_pos<span class="token punctuation">,</span>mean_values<span class="token punctuation">,</span>yerr<span class="token operator">=</span>variance<span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>max_y <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>mean_values<span class="token punctuation">,</span>variance<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>max_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>max_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#设置数值显示范围,不让他顶格</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'variable y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x_pos<span class="token punctuation">,</span>bar_label<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820153233603.png" alt="image-20220820153233603" style="zoom: 67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>bar_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bar1'</span><span class="token punctuation">,</span><span class="token string">'bar2'</span><span class="token punctuation">,</span><span class="token string">'bar3'</span><span class="token punctuation">]</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span>y_pos <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> y_pos<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span>alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span><span class="token operator">-</span>x2<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token builtin">max</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-条形图绘制案例"><a href="#2-4-条形图绘制案例" class="headerlink" title="2.4 条形图绘制案例"></a>2.4 条形图绘制案例</h2><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820153832719.png" alt="image-20220820153832719" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">green_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>blue_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>red_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'group 1'</span><span class="token punctuation">,</span> <span class="token string">'group 2'</span><span class="token punctuation">,</span> <span class="token string">'group 3'</span><span class="token punctuation">]</span>pos <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>green_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> width <span class="token operator">=</span> <span class="token number">0.2</span> fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>pos<span class="token punctuation">,</span>green_data<span class="token punctuation">,</span>width<span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span>label<span class="token operator">=</span>labels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token operator">+</span>width <span class="token keyword">for</span> p <span class="token keyword">in</span> pos<span class="token punctuation">]</span><span class="token punctuation">,</span>blue_data<span class="token punctuation">,</span>width<span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span>labels<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token operator">+</span>width<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> pos<span class="token punctuation">]</span><span class="token punctuation">,</span>red_data<span class="token punctuation">,</span>width<span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>label<span class="token operator">=</span>labels<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820154418765.png" alt="image-20220820154418765" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>bar_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> bar_labels<span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>bars <span class="token operator">=</span> plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span>data<span class="token punctuation">,</span>alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>vlines<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span>linestyle <span class="token operator">=</span> <span class="token string">'dashed'</span><span class="token punctuation">)</span><span class="token keyword">for</span> b<span class="token punctuation">,</span>d <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>bars<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>b<span class="token punctuation">.</span>get_width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">.</span>get_width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>get_y<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">.</span>get_height<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'&#123;:.2%&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token operator">/</span><span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820163051197.png" alt="image-20220820163051197" style="zoom:67%;" /></p><p>应用<code>ScalarMappable</code>指定颜色：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_values <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>x_pos <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mean_values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>colors <span class="token keyword">as</span> col<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>cm <span class="token keyword">as</span> cm<span class="token comment">#指定多少种数据就有多少种颜色,随意指定即可</span>cmap1 <span class="token operator">=</span> cm<span class="token punctuation">.</span>ScalarMappable<span class="token punctuation">(</span>col<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>mean_values<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>mean_values<span class="token punctuation">)</span><span class="token punctuation">,</span>cm<span class="token punctuation">.</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span>cmap2 <span class="token operator">=</span> cm<span class="token punctuation">.</span>ScalarMappable<span class="token punctuation">(</span>col<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>cm<span class="token punctuation">.</span>hot<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x_pos<span class="token punctuation">,</span>mean_values<span class="token punctuation">,</span>color <span class="token operator">=</span> cmap1<span class="token punctuation">.</span>to_rgba<span class="token punctuation">(</span>mean_values<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x_pos<span class="token punctuation">,</span>mean_values<span class="token punctuation">,</span>color <span class="token operator">=</span> cmap2<span class="token punctuation">.</span>to_rgba<span class="token punctuation">(</span>mean_values<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820163925764.png" alt="image-20220820163925764" style="zoom:67%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">patterns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span>mean_value <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>patterns<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>x_pos <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mean_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bars <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x_pos<span class="token punctuation">,</span>mean_value<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token keyword">for</span> bar<span class="token punctuation">,</span>pattern <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>bars<span class="token punctuation">,</span>patterns<span class="token punctuation">)</span><span class="token punctuation">:</span>    bar<span class="token punctuation">.</span>set_hatch<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820164805354.png" alt="image-20220820164805354" style="zoom:67%;" /></p><h1 id="三、盒图"><a href="#三、盒图" class="headerlink" title="三、盒图"></a>三、盒图</h1><p>盒图关注的点是1/4四分位点(<code>Q1</code>)、中位数、3/4四分位点(<code>Q3</code>)、离群点等。下图中，<code>Q1 - 1.5 * IQR</code>、<code>Q3 + 1.5 * IQR</code>为离群点。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820164935200.png" alt="image-20220820164935200" style="zoom: 80%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nptang_data <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>std<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> std <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#0为均值,std为方差,100为数据量</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>tang_data<span class="token punctuation">,</span>notch <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>sym <span class="token operator">=</span> <span class="token string">'s'</span><span class="token punctuation">,</span>vert <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#sym = 's',离群点使用方框来表示</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tang_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span><span class="token string">'x2'</span><span class="token punctuation">,</span><span class="token string">'x3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'box plot'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820170253526.png" alt="image-20220820170253526" style="zoom: 80%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_data <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>std<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> std <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bplot <span class="token operator">=</span> plt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>tang_data<span class="token punctuation">,</span>notch<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sym<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span>vert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tang_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span><span class="token string">'x2'</span><span class="token punctuation">,</span><span class="token string">'x3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'box plot'</span><span class="token punctuation">)</span><span class="token keyword">for</span> components <span class="token keyword">in</span> bplot<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> bplot<span class="token punctuation">[</span>components<span class="token punctuation">]</span><span class="token punctuation">:</span>        line<span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820200609238.png" alt="image-20220820200609238" style="zoom:80%;" /></p><p>将<code>vert</code>的值从<code>True</code>变为<code>False</code>，重新执行代码：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820200730312.png" alt="image-20220820200730312" style="zoom:80%;" /></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_data <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>std<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> std <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bplot <span class="token operator">=</span> plt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>tang_data<span class="token punctuation">,</span>notch<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sym<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span>vert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>patch_artist<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tang_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'x1'</span><span class="token punctuation">,</span><span class="token string">'x2'</span><span class="token punctuation">,</span><span class="token string">'x3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'box plot'</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'lightblue'</span><span class="token punctuation">,</span><span class="token string">'lightgreen'</span><span class="token punctuation">]</span><span class="token keyword">for</span> pathch<span class="token punctuation">,</span>color <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>bplot<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>colors<span class="token punctuation">)</span><span class="token punctuation">:</span>    pathch<span class="token punctuation">.</span>set_facecolor<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820200951569.png" alt="image-20220820200951569" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python机器学习</title>
      <link href="/2022/08/16/python06-python-ji-qi-xue-xi/"/>
      <url>/2022/08/16/python06-python-ji-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、线性回归"><a href="#一、线性回归" class="headerlink" title="一、线性回归"></a>一、线性回归</h1><h2 id="1-1-回归问题概述"><a href="#1-1-回归问题概述" class="headerlink" title="1.1 回归问题概述"></a>1.1 回归问题概述</h2><p>例：</p><ul><li>数据：工资和年龄（2个<strong>特征</strong>）</li><li>目标：预测银行会贷款给我多少钱（<strong>标签</strong>）</li><li>考虑：工资和年龄都会影响最终银行贷款的结果，那么它们各自有多大的影响？（<strong>参数</strong>）</li></ul><p>通俗解释：</p><ul><li><p><code>X1</code>,<code>X2</code>就是我们的两个特征（年龄，工资)</p></li><li><p><code>Y</code>是银行最终会借给我们多少钱</p></li><li><p>找到最合适的一条线（想象一个高维)来最好的拟合我们的数据点</p></li></ul><p>假设$\theta_{1}$是年龄的参数，$\theta_{2}$是工资的参数，拟合的平面是：$h_{\theta}(x) = \theta_{0}+\theta_{1}x_{1}+\theta_{2}x_{2}$($\theta_{0}$为<strong>偏置项</strong>)，整合为：</p><p>$h_{\theta}(x) = \sum_{i=0}^{n}\theta_{i}x_{i} = \theta^{T}x$(其中$x_{0} = [1,…,1]$)</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820231710408.png" alt="image-20220820231710408" style="zoom:67%;" /></p><p>对于每个样本，真实值和预测值存在差异，即有：$y^{(i)} = \theta^{T}x^{(i)}+\varepsilon^{(i)}$</p><h2 id="1-2-独立同分布的含义"><a href="#1-2-独立同分布的含义" class="headerlink" title="1.2 独立同分布的含义"></a>1.2 独立同分布的含义</h2><p>误差$\varepsilon^{(i)}$是独立并具有相同的分布，且服从均值为0、方差为$\theta^{2}$的<strong>高斯分布</strong>。</p><p>高斯分布：银行可能会多给，也可能会少给，但绝大多数情况下这个浮动不会太大，极小情况下浮动会比较大，符合正常情况。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820234415027.png" alt="image-20220820234415027" style="zoom: 80%;" /></p><h2 id="1-3-似然函数"><a href="#1-3-似然函数" class="headerlink" title="1.3 似然函数"></a>1.3 似然函数</h2><p>预测值与误差：$y^{(i)} = \theta^{T}x^{(i)}+\varepsilon^{(i)}$</p><p>由于误差服从高斯分布：$p\left(\epsilon^{(i)}\right)=\frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{\left(\epsilon^{(i)}\right)^{2}}{2 \sigma^{2}}\right)$</p><p>将(1)式代入(2)式：$p\left(y^{(i)} \mid x^{(i)} ; \theta\right)=\frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}}{2 \sigma^{2}}\right)$</p><blockquote><p>注：$\theta$和$x^{(i)}$进行组合后，与$y^{(i)}$（真实值）越接近越好。</p></blockquote><p><strong>似然函数</strong>：$L(\theta)=\prod_{i=1}^{m} p\left(y^{(i)} \mid x^{(i)} ; \theta\right)=\prod_{i=1}^{m} \frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}}{2 \sigma^{2}}\right)$</p><blockquote><p>注：</p><ul><li>独立同分布的前提下，联合概率密度等于边缘概率密度的乘积</li><li>解释：什么样的参数与数据组合后恰好是真实值</li></ul></blockquote><p><strong>对数似然</strong>：$\log L(\theta)=\log \prod_{i=1}^{m} \frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}}{2 \sigma^{2}}\right)$(对数中乘法可以转换为加法)</p><blockquote><p>展开化简：</p><p>$\begin{array}{l}<br>\sum_{i=1}^{m} \log \frac{1}{\sqrt{2 \pi} \sigma} \exp \left(-\frac{\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}}{2 \sigma^{2}}\right) \\<br>=m \log \frac{1}{\sqrt{2 \pi} \sigma}-\frac{1}{\sigma^{2}} \cdot \frac{1}{2} \sum_{i=1}^{m}\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}<br>\end{array}$</p></blockquote><p>目标：让似然函数越大越好，即下式越小越好：</p><p>$J(\theta)=\frac{1}{2} \sum_{i=1}^{m}\left(y^{(i)}-\theta^{T} x^{(i)}\right)^{2}$(<strong>最小二乘法</strong>)</p><ul><li><p>目标函数：$J(\theta)=\frac{1}{2} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}=\frac{1}{2}(X \theta-y)^{T}(X \theta-y)$</p></li><li><p>求偏导：</p><p>$\begin{array}{l}<br>\nabla_{\theta} J(\theta)=\nabla_{\theta}\left(\frac{1}{2}(X \theta-y)^{T}(X \theta-y)\right)=\nabla_{\theta}\left(\frac{1}{2}\left(\theta^{T} X^{T}-y^{T}\right)(X \theta-y)\right) \\<br>=\nabla_{\theta}\left(\frac{1}{2}\left(\theta^{T} X^{T} X \theta-\theta^{T} X^{T} y-y^{T} X \theta+y^{T} y\right)\right) \\<br>=\frac{1}{2}\left(2 X^{T} X \theta-X^{T} y-\left(y^{T} X\right)^{T}\right)=X^{T} X \theta-X^{T} y<br>\end{array}$</p></li><li><p>偏导为0：$\theta=\left(X^{T} X\right)^{-1} X^{T} y$</p></li></ul><blockquote><p>注：$X^{T}X$为对称阵。</p></blockquote><h2 id="1-4-梯度下降"><a href="#1-4-梯度下降" class="headerlink" title="1.4 梯度下降"></a>1.4 梯度下降</h2><p>机器学习的套路就是我交给机器一堆数据，然后告诉它什么样的学习方式是对的（<strong>目标函数</strong>），然后让它朝着这个方向去做。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数学建模:规划问题</title>
      <link href="/2022/08/16/python07-python-shu-xue-jian-mo-xue-xi/"/>
      <url>/2022/08/16/python07-python-shu-xue-jian-mo-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、线性规划模型"><a href="#一、线性规划模型" class="headerlink" title="一、线性规划模型"></a>一、线性规划模型</h1><p>线性规划的本质：</p><ul><li>问题是线性的</li><li>约束是线性的</li></ul><p>线性代数引入向量的目的：不是为了更好的画图，而是为了通过代数的方法<strong>解决几何的问题</strong>。</p><p>数的集合形态是向量，向量的集合形态是矩阵。</p><h2 id="1-1-矩阵的运算"><a href="#1-1-矩阵的运算" class="headerlink" title="1.1 矩阵的运算"></a>1.1 矩阵的运算</h2><p>用<code>Python</code>进行矩阵的运算：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#矩阵加法</span><span class="token builtin">sum</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token comment">#放缩</span>e <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> a<span class="token comment">#数乘、矩阵乘</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">#元素乘</span>e <span class="token operator">=</span> a <span class="token operator">*</span> d<span class="token comment">#转置</span>e <span class="token operator">=</span> c<span class="token punctuation">.</span>Te <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#逆矩阵</span>result <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">#行列式</span>result <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">#矩阵的秩</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>matrix_rank<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-一次方程组的解"><a href="#1-2-一次方程组的解" class="headerlink" title="1.2 一次方程组的解"></a>1.2 一次方程组的解</h2><p>$\left\{\begin{aligned}<br>10 x-y-2 z &amp;=72 \\<br>-x+10 y-2 z &amp;=83 \\<br>-x-y+5 z &amp;=42<br>\end{aligned}\right.$</p><p><code>numpy</code>库主要求解数值解，<code>sympy</code>库主要求解符号解。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npA <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#A为系数矩阵</span>b <span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#b为常数列</span>inv_A <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">#A的逆矩阵</span>x <span class="token operator">=</span> inv_A<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#A的逆矩阵与b做点积运算</span>x <span class="token operator">=</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment"># 5,6两行也可以用本行替代</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> symbols<span class="token punctuation">,</span> Eq<span class="token punctuation">,</span>solvex<span class="token punctuation">,</span>y，z <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">'x y z'</span><span class="token punctuation">)</span>eqs <span class="token operator">=</span><span class="token punctuation">[</span>Eq<span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> x<span class="token operator">-</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>z，<span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Eq<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span>y <span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span> z<span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Eq<span class="token punctuation">(</span><span class="token operator">-</span>x <span class="token operator">-</span>y <span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span> z<span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>eqs<span class="token punctuation">,</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-线性规划的标准形式"><a href="#1-3-线性规划的标准形式" class="headerlink" title="1.3 线性规划的标准形式"></a>1.3 线性规划的标准形式</h2><p>引入<strong>松弛变量</strong>：</p><p>$ \max z=c^{T} X \\ s.t.  \left\{\begin{array}{l}A \tilde{X}=b \\ \tilde{X} \geqslant 0\end{array}\right. $</p><p>[例]$ \min z=2 x_{1}+3 x_{2}-5 x_{3} \\<br>s.t.  \left\{\begin{array}{l}x_{1}+x_{2}+x_{3}=7 \\ 2 x_{1}-5 x_{2}+x_{3}&gt;=10 \\ x_{1}+3 x_{2}+x_{3}&lt;=12 \\ x_{1}, x_{2}, x_{3}&gt;=0\end{array}\right. $</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> linprog<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 取极小值，取负</span>Aeq <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>beq <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 取值范围是0到无穷大</span>res <span class="token operator">=</span> linprog<span class="token punctuation">(</span>c<span class="token punctuation">,</span> A<span class="token punctuation">,</span> b<span class="token punctuation">,</span> Aeq<span class="token punctuation">,</span> beq<span class="token punctuation">,</span> bounds<span class="token operator">=</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">    con: array([1.80713489e-09])    fun: -14.571428565645054message: &#39;Optimization terminated successfully.&#39;    nit: 5  slack: array([-2.24579466e-10,  3.85714286e+00]) status: 0success: True      x: array([6.42857143e+00, 5.71428571e-01, 2.35900788e-10])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-线性规划的求解策略"><a href="#1-4-线性规划的求解策略" class="headerlink" title="1.4 线性规划的求解策略"></a>1.4 线性规划的求解策略</h2><p>线性代数中，解方程组的时候可以用<strong>向量和基分解的思想</strong>解决的。</p><ul><li><p>单纯形法：固定变量，不断变换基向量求方程组的解带入，观察是否是最优解。</p></li><li><p>蒙特卡洛法：在可行域范围内生成大批量的随机数据点，观测这些数据点在什么位置取得近似最优。</p></li></ul><p>在线性规划中引入松弛变量：因为单纯形法要求约束条件都为等式（且所有变量非负），不可避免的存在不等式约束。</p><p>$\begin{array}{rrrr}<br>\text { maximize: } &amp; z=x_{1}+2 x_{2} &amp; \text { maximize: } &amp; z=x_{1}+2 x_{2} \\<br>\text { subject to: } &amp; -3 x_{1}+2 x_{2} \leq 3 &amp; \text { subject to: } &amp; x_{3}=3+3 x_{1}-2 x_{2} \\<br>&amp; x_{1}+x_{2} \leq 2 &amp; &amp; x_{4}=2-x_{1}-x_{2} \\<br>&amp; x_{1}-x_{2} \leq 1 &amp; &amp; x_{5}=1-x_{1}+x_{2} \\<br>&amp; x_{1}, x_{2} \geq 0 &amp; &amp; x_{1}, x_{2}, x_{3}, x_{4}, x_{5} \geq 0<br>\end{array}$</p><p>在绝对值问题中，引入$\left| X_{1} - X_{2} \right| \leq 2$，可转为：$X_{1} = X_{2} +  \epsilon$，其中$ -2 \leq \epsilon \leq 2$。</p><h2 id="1-5-二次规划的基本形式"><a href="#1-5-二次规划的基本形式" class="headerlink" title="1.5 二次规划的基本形式"></a>1.5 二次规划的基本形式</h2><p>多元函数的极值求解：</p><p>每个偏微分都能为0的点就可能是极值点，即：</p><p>$\left\{\begin{array}{l}<br>\frac{\partial f}{\partial x}=0 \\<br>\frac{\partial f}{\partial y}=0<br>\end{array}\right.$</p><p>在数学最优问题中，拉格朗日乘子法（Lagrange Multiplier，以数学家拉格朗日命名）是一种寻找变量受一个或多个条件限制的多元函数的极值的方法。</p><p>这种方法将一个有<code>n</code>个变量与<code>k</code>个约束条件的最优化问题转换为一个有<code>n + k</code>个变量的方程组的极值问题，其变量不受任何约束。</p><p>这种方法引入了一种新的标量未知数，即拉格朗日乘数：约束方程的梯度（gradient）的线性组合里每个向量的系数。</p><p>$maximizef  (x, y)\\ s.t.  \quad g(x, y)=0,\mathcal{L}(x, y, \lambda)=f(x, y)-\lambda \cdot g(x, y)$</p><p>设目标函数<code>f(x)</code>，不等式约束为<code>g(x)</code>，有的教程还会添加上等式约束条件<code>h(x)</code>。此时的约束优化问题描述如下：</p><p>$\begin{array}{c}<br>\min f(x) \\<br>\text { s.t. }\left\{\begin{array}{r}<br>h(x)=0 \\<br>g(x) \leqslant 0<br>\end{array}\right.<br>\end{array}$</p><p>$\begin{array}{l}<br>L(x, \lambda, \mu)=f(x)+\lambda h(x)+\mu g(x) \\<br>\qquad\left\{\begin{array}{l}<br>\left.\frac{\partial L}{\partial X}\right|_{X=X^{<em>}}=0 \\<br>\lambda \neq 0 \\<br>\mu \geqslant 0 \\<br>\mu g\left(X^{</em>}\right)=0 \\<br>h\left(X^{<em>}\right)=0 \\<br>g\left(X^{</em>}\right) \leqslant 0<br>\end{array}\right.<br>\end{array}$</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820220809482.png" alt="image-20220820220809482"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820221034527.png" alt="image-20220820221034527"></p><p>根据条件有：$F = F_{G_{1}}+F_{G_{2}}+F_{G_{3}}$，三个不等式关系和$P_{1}+P_{2}+P_{3} = 700$，求最小的$F$。</p><p>使用<strong>遗传算法</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sko<span class="token punctuation">.</span>GA <span class="token keyword">import</span> GA<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10.5</span><span class="token operator">+</span><span class="token number">0.3</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.32</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.32</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.0007</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0.0004</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0.00045</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span>cons <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">700</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token comment"># max_iter为迭代次数</span>ga <span class="token operator">=</span> GA<span class="token punctuation">(</span>func<span class="token operator">=</span>func<span class="token punctuation">,</span> n_dim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> size_pop<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>        constraint_eq<span class="token operator">=</span><span class="token punctuation">[</span>cons<span class="token punctuation">]</span><span class="token punctuation">,</span> lb<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ub<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span>best_x<span class="token punctuation">,</span> best_y <span class="token operator">=</span> ga<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best x:\n"</span><span class="token punctuation">,</span> best_x<span class="token punctuation">,</span> <span class="token string">"\nbest_y:\n"</span><span class="token punctuation">,</span> best_y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]<strong>流量的优化问题</strong>：</p><p>某公司有6个建筑工地要开工,每个工地的位置(用平面坐标系a,b表示,距离单位:千米)及水泥日用 量d(吨)由下表给出。规划设立两个料场位于A,B,日储量各为20吨。假设从料场到工地之间均有 直线道路相连，试确定料场的位置,并制定每天的供应计划,即从A,B两料场分别向各工地运送多少吨水泥,使总的吨千米数最小。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220820224611477.png" alt="image-20220820224611477"></p><p>$\begin{aligned}<br>\min f=\sum_{i=1}^{2} \sum_{j=1}^{6} w_{i j} \sqrt{\left(x_{i}-a_{j}\right)^{2}+\left(y_{i}-b_{j}\right)^{2}} \\<br>\text { s.t. }\left\{\begin{array}{l}<br>\sum_{i=1}^{2} x_{i j} \geqslant d_{j} \\<br>\sum_{j=1}^{6} x_{i j} \leqslant e_{i}<br>\end{array}\right.<br>\end{aligned}$</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理:科学计算库Numpy</title>
      <link href="/2022/08/15/python03-python-numpy/"/>
      <url>/2022/08/15/python03-python-numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Numpy介绍"><a href="#一、Numpy介绍" class="headerlink" title="一、Numpy介绍"></a>一、Numpy介绍</h1><ul><li>一个开源的<code>python</code>科学计算库</li><li>使用<code>Numpy</code>可以方便的使用数组、矩阵进行计算</li><li>包含线性代数、傅里叶变换、随机数生成等大量函数</li></ul><h1 id="二、ndarray结构基础知识"><a href="#二、ndarray结构基础知识" class="headerlink" title="二、ndarray结构基础知识"></a>二、ndarray结构基础知识</h1><p>对于<code>ndarray</code>结构来说，里面所有的元素必须是同一类型的；若不是，会自动的向下进行转换。</p><h2 id="2-1-ndarray的属性"><a href="#2-1-ndarray的属性" class="headerlink" title="2.1 ndarray的属性"></a>2.1 ndarray的属性</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> nptang_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>tang_list<span class="token punctuation">)</span>tang_array<span class="token comment">#array([1, 2, 3, 4, 5])</span><span class="token builtin">type</span><span class="token punctuation">(</span>tang_array<span class="token punctuation">)</span><span class="token comment">#numpy.ndarray</span>tang_array<span class="token punctuation">.</span>itemsize<span class="token comment">#4,表示占4个字节</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(5,)</span>tang_array<span class="token punctuation">.</span>size<span class="token comment">#5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-索引与切片"><a href="#2-2-索引与切片" class="headerlink" title="2.2 索引与切片"></a>2.2 索引与切片</h2><p>与<code>Python</code>数据结构的语法是一样的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#array([2, 3])</span>tang_array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#array([4, 5])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-3-矩阵形式"><a href="#2-3-矩阵形式" class="headerlink" title="2.3 矩阵形式"></a>2.3 矩阵形式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(3, 3)</span>tang_array<span class="token punctuation">.</span>size<span class="token comment">#9</span>tang_array<span class="token punctuation">.</span>ndim<span class="token comment">#2</span>tang_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#5</span>tang_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>tang_array<span class="token comment">#array([[ 1,  2,  3],</span>       <span class="token comment">#[ 4, 10,  6],</span>       <span class="token comment">#[ 7,  8,  9]])</span>tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#array([ 2, 10,  8])</span>tang_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#array([1, 2])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li><code>tang_array2 = tang_array</code>操作与<code>Java</code>对象名的引用性质类似，该语句将<code>tang_array2</code>直接指向<code>tang_array</code>的内存位置，当操纵<code>tang_array2</code>，<code>tang_array</code>将发生变动。</li><li>若希望两个变量互不干扰，应为：<code>tang_array2 = tang_array.copy()</code></li></ul></blockquote><h2 id="2-4-布尔类型作为索引"><a href="#2-4-布尔类型作为索引" class="headerlink" title="2.4 布尔类型作为索引"></a>2.4 布尔类型作为索引</h2><p><code>arange</code>函数将构造等差数列的数组：【1.6节将介绍】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>tang_array<span class="token comment">#array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>布尔类型作为索引，取值根据<code>true</code>和<code>false</code>来判断。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mask <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>mask<span class="token comment">#array([False, False, False,  True,  True,  True, False, False,  True, True])</span>tang_array<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token comment">#array([30, 40, 50, 80, 90])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>利用条件保留数据</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mask <span class="token operator">=</span> random_array <span class="token operator">></span> <span class="token number">0.5</span>mask<span class="token comment">#array([ True,  True,  True, False,  True, False, False,  True, False, True])</span>tang_array<span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token comment">#array([ 0, 10, 20, 40, 70, 90])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>返回索引值并得到数据</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tang_array <span class="token operator">></span> <span class="token number">30</span><span class="token comment">#array([False, False, False,  True,  True])</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>tang_array <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">#(array([3, 4], dtype=int64),)</span>tang_array<span class="token punctuation">[</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>tang_array <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#array([40, 50])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-数组类型"><a href="#2-5-数组类型" class="headerlink" title="2.5 数组类型"></a>2.5 数组类型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>tang_array<span class="token comment">#array([1., 2., 3., 4., 5.], dtype=float32)</span>tang_array<span class="token punctuation">.</span>nbytes<span class="token comment">#20,占用的字节数4*5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>可以指定任意类型，即<code>object</code>类型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">)</span>tang_array<span class="token comment">#array([1, 10, 3.5, 'str'], dtype=object)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但不利于计算。</p></blockquote><p><strong>转换类型</strong>：</p><p><code>asarray</code>方法和<code>astype</code>方法可以获得一个新的转换类型后的结构，但不会改变原始<code>ndarray</code>结构：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tang_array2 <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment">#array([1., 2., 3., 4., 5.], dtype=float32)</span>tang_array<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment">#array([1., 2., 3., 4., 5.], dtype=float32)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="三、array数组的数值计算"><a href="#三、array数组的数值计算" class="headerlink" title="三、array数组的数值计算"></a>三、array数组的数值计算</h1><h2 id="3-1-按维度累加与累乘"><a href="#3-1-按维度累加与累乘" class="headerlink" title="3.1 按维度累加与累乘"></a>3.1 按维度累加与累乘</h2><p><code>axis</code>参数指定要进行的操作是<strong>沿着什么轴(维度)</strong>计算结果。</p><p><strong>累加</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#array([5, 7, 9]),沿着第一个轴</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#array([ 6, 15]),沿着第二个轴</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#array([ 6, 15]),沿着第二个轴</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>累乘</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array<span class="token punctuation">.</span>prod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#720,所有数的乘积</span>tang_array<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#array([  6, 120])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-求最小-最大-均值-标准差-方差"><a href="#3-2-求最小-最大-均值-标准差-方差" class="headerlink" title="3.2 求最小/最大/均值/标准差/方差"></a>3.2 求最小/最大/均值/标准差/方差</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#array([1, 2, 3])</span>tang_array<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#0,最小值的索引值</span>tang_array<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#array([0, 0, 0], dtype=int64)</span>tang_array<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#5</span>tang_array<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#3.5,均值</span>tang_array<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#array([2.5, 3.5, 4.5])</span>tang_array<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#1.707825127659933,标准差</span>tang_array<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#2.9166666666666665</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-作限制"><a href="#3-3-作限制" class="headerlink" title="3.3 作限制"></a>3.3 作限制</h2><p>把数据限制到某个范围内。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#array([[2, 2, 3],[4, 4, 4]])</span>tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">3.56</span><span class="token punctuation">,</span><span class="token number">6.41</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#array([1., 4., 6.]),四舍五入</span>tang_array<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>decimals <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#array([1.2, 3.6, 6.4]),对第一个小数进行四舍五入,指定精度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="四、排序"><a href="#四、排序" class="headerlink" title="四、排序"></a>四、排序</h1><h2 id="4-1-基本排序"><a href="#4-1-基本排序" class="headerlink" title="4.1 基本排序"></a>4.1 基本排序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">7.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5.6</span><span class="token punctuation">,</span><span class="token number">7.8</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>tang_array<span class="token punctuation">)</span><span class="token comment">#array([[1.3, 1.5, 7.5],[1.2, 5.6, 7.8]])</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#array([[1.5, 1.3, 1.2],[5.6, 7.8, 7.5]])</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>tang_array<span class="token punctuation">)</span><span class="token comment">#array([[1, 0, 2],[2, 0, 1]], dtype=int64),返回排序位置原先的索引位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#按照平均差异构造十个数</span><span class="token comment">#array([ 0.        ,  1.11111111,  2.22222222,  3.33333333,  4.44444444,</span><span class="token comment">#        5.55555556,  6.66666667,  7.77777778,  8.88888889, 10.        ])</span>values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">6.5</span><span class="token punctuation">,</span><span class="token number">9.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#不知道要插入到什么样的位置</span>np<span class="token punctuation">.</span>searchsorted<span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token comment">#array([3, 6, 9], dtype=int64),必须是一个排序好的结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-分开指定进行排序"><a href="#4-2-分开指定进行排序" class="headerlink" title="4.2 分开指定进行排序"></a>4.2 分开指定进行排序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>index <span class="token operator">=</span> np<span class="token punctuation">.</span>lexsort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#array([3, 1, 2, 0], dtype=int64)</span><span class="token comment">#按第2列进行升序条件下按照第0列进行降序</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">#array([[2, 4, 0],[1, 7, 0],[2, 3, 1],[1, 0, 6]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、数组形状操作"><a href="#五、数组形状操作" class="headerlink" title="五、数组形状操作"></a>五、数组形状操作</h1><p>数组的形状操作需保证数组大小必须不能改变。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(10,)</span>tang_array<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token comment">#array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-1-更改维度"><a href="#5-1-更改维度" class="headerlink" title="5.1 更改维度"></a>5.1 更改维度</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(10,)</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>tang_array<span class="token comment">#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(1, 10)</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(10, 1)</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(10, 1, 1, 1)</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#压缩</span>tang_array<span class="token punctuation">.</span>shape<span class="token comment">#(10,)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-转置操作"><a href="#5-2-转置操作" class="headerlink" title="5.2 转置操作"></a>5.2 转置操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span>tang_array<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#array([[0, 5],[1, 6],[2, 7],[3, 8],[4, 9]]),转置操作</span>tang_array<span class="token punctuation">.</span>T<span class="token comment">#转置操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-3-数组的连接"><a href="#5-3-数组的连接" class="headerlink" title="5.3 数组的连接"></a>5.3 数组的连接</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">678</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3214</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1235</span><span class="token punctuation">,</span><span class="token number">3124</span><span class="token punctuation">,</span><span class="token number">432</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#array([[123,456,678],[3214,456,134],[1235, 3124,432],[43,13,134]])</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#两行六列,array([[123,456,678,1235,3124,432],[3214,456,134,43,13,134]])</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#相当于axis = 0</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#相当于axis = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-拉平操作"><a href="#5-4-拉平操作" class="headerlink" title="5.4 拉平操作"></a>5.4 拉平操作</h2><p>使用函数<code>a.flatten()</code>或<code>a.ravel()</code>，得到一长条。</p><h1 id="六、数组生成函数"><a href="#六、数组生成函数" class="headerlink" title="六、数组生成函数"></a>六、数组生成函数</h1><h2 id="6-1-arange函数"><a href="#6-1-arange函数" class="headerlink" title="6.1 arange函数"></a>6.1 arange函数</h2><ul><li><p><code>np.arange(10)</code>：生成<code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></p></li><li><p><code>np.arange(2,20,2)</code>：生成<code>array([2,4,6,8,10,12,14,16,18])</code></p></li><li><p>还可以指定<code>dtype</code>值</p></li></ul><h2 id="6-2-linspace函数"><a href="#6-2-linspace函数" class="headerlink" title="6.2 linspace函数"></a>6.2 linspace函数</h2><p><code>np.linspace(0,10,10)</code>：在<code>0</code>到<code>10</code>之间构造<code>10</code>个数，包含头尾。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0.</span>        <span class="token punctuation">,</span>  <span class="token number">1.11111111</span><span class="token punctuation">,</span>  <span class="token number">2.22222222</span><span class="token punctuation">,</span>  <span class="token number">3.33333333</span><span class="token punctuation">,</span>  <span class="token number">4.44444444</span><span class="token punctuation">,</span>        <span class="token number">5.55555556</span><span class="token punctuation">,</span>  <span class="token number">6.66666667</span><span class="token punctuation">,</span>  <span class="token number">7.77777778</span><span class="token punctuation">,</span>  <span class="token number">8.88888889</span><span class="token punctuation">,</span> <span class="token number">10.</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-3-logspace函数"><a href="#6-3-logspace函数" class="headerlink" title="6.3 logspace函数"></a>6.3 logspace函数</h2><p><code>np.logspace(a,b,n)</code>：生成从<code>10</code>的<code>a</code>次方到<code>10</code>的<code>b</code>次方之间<strong>按对数等分</strong>的<code>n</code>个元素的行向量。<code>n</code>如果省略，则默认值为<code>50</code>。</p><p>如，<code>np.logspace(1,5,5)</code>的结果为<code>array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])</code></p><h2 id="6-4-meshgrid函数"><a href="#6-4-meshgrid函数" class="headerlink" title="6.4 meshgrid函数"></a>6.4 meshgrid函数</h2><p><code>meshgrid</code>函数可以构造网格，在使用立体索引时会用到。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>x</code>为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>y</code>为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-5-构造行-列向量"><a href="#6-5-构造行-列向量" class="headerlink" title="6.5 构造行/列向量"></a>6.5 构造行/列向量</h2><p><code>np.r_[0:10:1]</code>用于<strong>构造行向量</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>np.c_[0:10:1]</code>用于<strong>构造列向量</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-6-常用生成函数"><a href="#6-6-常用生成函数" class="headerlink" title="6.6 常用生成函数"></a>6.6 常用生成函数</h2><h3 id="6-6-1-生成相同值的矩阵"><a href="#6-6-1-生成相同值的矩阵" class="headerlink" title="6.6.1 生成相同值的矩阵"></a>6.6.1 生成相同值的矩阵</h3><p><code>zeros</code>函数：【经常用于初始化】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#array([0., 0., 0.])</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#array([[0., 0., 0.],[0., 0., 0.],[0., 0., 0.]]),第二个参数为维度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ones</code>函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构造一个值为<code>x</code>的，在后面直接<code>*x</code>即可。如：<code>np.ones((3,3)) * 8</code>，将生成值全为<code>8</code>的矩阵。</p><p><code>zeros_like</code>函数：返回相同形状的全零矩阵【复制维度】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>tang_array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是<code>array([0,0,0,0])</code>。</p><blockquote><p>同理，还有<code>ones_like</code>函数。</p></blockquote><h3 id="6-6-2-生成单位矩阵"><a href="#6-6-2-生成单位矩阵" class="headerlink" title="6.6.2 生成单位矩阵"></a>6.6.2 生成单位矩阵</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、相关运算"><a href="#七、相关运算" class="headerlink" title="七、相关运算"></a>七、相关运算</h1><h2 id="7-1-乘法"><a href="#7-1-乘法" class="headerlink" title="7.1 乘法"></a>7.1 乘法</h2><p><strong>直接相乘</strong>：【对应位置进行相乘】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#array([10, 10])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>矩阵相乘</strong>：【需确保矩阵相乘规则】</p><blockquote><p>注：矩阵相乘的规则：</p><p>一个<code>m*n</code>的矩阵和一个<code>n*p</code>的矩阵相乘，将会得到一个<code>m*p</code>的矩阵。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/2020021715081157.jpg" alt="矩阵相乘示例"></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>*乘</strong>：【不推荐使用】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果为：【<code>x</code>将作转换】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-2-关系运算符"><a href="#7-2-关系运算符" class="headerlink" title="7.2 关系运算符"></a>7.2 关系运算符</h2><p><strong>==</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">==</span> y<span class="token comment">#array([True,True,False]),会进行对应位置比较</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">==</span> y<span class="token comment">#False,维度不一致,直接返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>与</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#array([ True,  True,  True])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>或</strong>：<code>np.logical_or(x,y)</code></p><p><strong>非</strong>：<code>np.logical_not(x,y)</code></p><h1 id="八、随机模块"><a href="#八、随机模块" class="headerlink" title="八、随机模块"></a>八、随机模块</h1><h2 id="8-1-随机函数"><a href="#8-1-随机函数" class="headerlink" title="8.1 随机函数"></a>8.1 随机函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回一个数</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random_sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回一个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#所有的值都是从0到1的</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.46639133</span><span class="token punctuation">,</span> <span class="token number">0.67245453</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.36033633</span><span class="token punctuation">,</span> <span class="token number">0.9472259</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.85873438</span><span class="token punctuation">,</span> <span class="token number">0.37810198</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>构造整数</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#返回的是随机的整数,左闭右开</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-案例：高斯分布"><a href="#8-2-案例：高斯分布" class="headerlink" title="8.2 案例：高斯分布"></a>8.2 案例：高斯分布</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token comment">#均值,方差</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mu<span class="token punctuation">,</span>sigma<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0.06294583</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.20183854</span><span class="token punctuation">,</span>  <span class="token number">0.13620236</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.07176938</span><span class="token punctuation">,</span>  <span class="token number">0.12249114</span><span class="token punctuation">,</span>       <span class="token operator">-</span><span class="token number">0.09853145</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.11591499</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.06742867</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.12911248</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.069923</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改变精度：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再执行上面的语句，结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.201</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.142</span><span class="token punctuation">,</span>  <span class="token number">0.124</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.064</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.173</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.069</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.052</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.145</span><span class="token punctuation">,</span>        <span class="token number">0.011</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.041</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-3-洗牌-打乱顺序"><a href="#8-3-洗牌-打乱顺序" class="headerlink" title="8.3 洗牌(打乱顺序)"></a>8.3 洗牌(打乱顺序)</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>tang_array<span class="token punctuation">)</span>tang_array<span class="token comment">#array([3, 8, 5, 9, 6, 4, 2, 1, 7, 0])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-4-随机种子"><a href="#8-4-随机种子" class="headerlink" title="8.4 随机种子"></a>8.4 随机种子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#可取任意值,指定随机种子</span>mu<span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mu<span class="token punctuation">,</span>sigma<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#结果将不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>随机种子的引入，好处在于当要调节一个参数对结果的影响时，可以保证其他量不变。</p><h1 id="九、文件读写"><a href="#九、文件读写" class="headerlink" title="九、文件读写"></a>九、文件读写</h1><h2 id="9-1-读文件"><a href="#9-1-读文件" class="headerlink" title="9.1 读文件"></a>9.1 读文件</h2><p>写入文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile tang<span class="token punctuation">.</span>txt<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正常情况读文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'tang.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fileds <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> fileds<span class="token punctuation">]</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_data<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span class="token comment">#array([[ 1.,  2.,  3.,  4.,  5.,  6.],[ 7.,  8.,  9.,  0.,  1., 10.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读文件可以使用</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'tang.txt'</span><span class="token punctuation">,</span>delimiter  <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token comment">#其中' '为默认分隔符</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若读入的数据是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile tang<span class="token punctuation">.</span>txtx<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>w<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以去掉第一行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'tang.txt'</span><span class="token punctuation">,</span>delimiter  <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">,</span>skiprows <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>data<span class="token comment">#array([[ 1.,  2.,  3.,  4.,  5.,  6.],[ 7.,  8.,  9.,  0.,  1., 10.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以指定使用的列：<code>usecols = (0,1,4)</code>    </p><h2 id="9-2-数组保存"><a href="#9-2-数组保存" class="headerlink" title="9.2 数组保存"></a>9.2 数组保存</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'tang4.txt'</span><span class="token punctuation">,</span>tang_array<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%d'</span><span class="token punctuation">)</span><span class="token comment">#fmt参数指定保存为整数格式</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'tang4.txt'</span><span class="token punctuation">,</span>tang_array<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%.2f'</span><span class="token punctuation">)</span><span class="token comment">#保留两个小数位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>指定逗号为分隔符</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'tang4.txt'</span><span class="token punctuation">,</span>tang_array<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%d'</span><span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>将<code>ndarray</code>结构保存为<code>npy</code>文件</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'tang_array.npy'</span><span class="token punctuation">,</span>tang_array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要读入时：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'tang_array.npy'</span><span class="token punctuation">)</span><span class="token comment">#array([[1, 2, 3],[4, 5, 6]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>保存为<code>npz</code>文件</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'tang.npz'</span><span class="token punctuation">,</span>a<span class="token operator">=</span>tang_array<span class="token punctuation">,</span>b<span class="token operator">=</span>tang_array2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220816112006884.png" alt="npz存放有多个数组"></p><p>需要读入时：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'tang.npz'</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="十、练习"><a href="#十、练习" class="headerlink" title="十、练习"></a>十、练习</h1><p>1.打印当前<code>Numpy</code>版本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment">#1.21.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.构造一个全零的矩阵，并打印其占用的内存大小。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d bytes'</span><span class="token operator">%</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>size <span class="token operator">*</span> z<span class="token punctuation">.</span>itemsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#200 bytes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.打印一个函数的帮助文档，比如<code>numpy.add</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>info<span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220816114210668.png" alt="image-20220816114210668"></p><p>4.创建一个<code>10-49</code>的数组，并将其倒序排列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>tang_array <span class="token operator">=</span> tang_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>tang_array</code>的结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span>       <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span>       <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.找到一个数组中不为0的索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#(array([ 0,  1,  2,  3,  4,  8, 10], dtype=int64),)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.随机构造一个<code>3*3</code>矩阵，并打印其中的最大值与最小值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>tang_array<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tang_array<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.构造一个<code>5*5</code>矩阵，令其值都为1，并在最外层加上一圈0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>tang_array<span class="token punctuation">,</span>pad_width <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>mode <span class="token operator">=</span> <span class="token string">'constant'</span><span class="token punctuation">,</span>constant_values <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>tang_array</code>的结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.构造一个<code>shape</code>为<code>(6,7,8)</code>的矩阵，并找到第100个元素的索引值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>unravel_index<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.对一个<code>5*5</code>的矩阵作归一化操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tang_array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>tang_min <span class="token operator">=</span> tang_array<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tang_max <span class="token operator">=</span> tang_array<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tang_array <span class="token operator">=</span> <span class="token punctuation">(</span>tang_array <span class="token operator">-</span> tang_min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>tang_max <span class="token operator">-</span> tang_min<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>tang_array</code>的结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.762</span><span class="token punctuation">,</span> <span class="token number">0.302</span><span class="token punctuation">,</span> <span class="token number">0.637</span><span class="token punctuation">,</span> <span class="token number">0.539</span><span class="token punctuation">,</span> <span class="token number">0.285</span><span class="token punctuation">,</span> <span class="token number">0.091</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.302</span><span class="token punctuation">,</span> <span class="token number">0.452</span><span class="token punctuation">,</span> <span class="token number">0.663</span><span class="token punctuation">,</span> <span class="token number">0.241</span><span class="token punctuation">,</span> <span class="token number">0.644</span><span class="token punctuation">,</span> <span class="token number">0.184</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.661</span><span class="token punctuation">,</span> <span class="token number">0.787</span><span class="token punctuation">,</span> <span class="token number">0.789</span><span class="token punctuation">,</span> <span class="token number">0.612</span><span class="token punctuation">,</span> <span class="token number">0.298</span><span class="token punctuation">,</span> <span class="token number">0.703</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.872</span><span class="token punctuation">,</span> <span class="token number">0.628</span><span class="token punctuation">,</span> <span class="token number">1.</span>   <span class="token punctuation">,</span> <span class="token number">0.994</span><span class="token punctuation">,</span> <span class="token number">0.15</span> <span class="token punctuation">,</span> <span class="token number">0.</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.143</span><span class="token punctuation">,</span> <span class="token number">0.939</span><span class="token punctuation">,</span> <span class="token number">0.97</span> <span class="token punctuation">,</span> <span class="token number">0.196</span><span class="token punctuation">,</span> <span class="token number">0.352</span><span class="token punctuation">,</span> <span class="token number">0.549</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.找到两个数组中相同的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>z2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>intersect1d<span class="token punctuation">(</span>z1<span class="token punctuation">,</span>z2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">5</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11.得到昨天、今天、明天的日期。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yesterday <span class="token operator">=</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'today'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span>today <span class="token operator">=</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'today'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span>tomorrow <span class="token operator">=</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">'today'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token comment">#numpy.datetime64('2022-08-17')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>12.得到一个月中所有的天。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token string">'2022-10'</span><span class="token punctuation">,</span><span class="token string">'2022-11'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'datetime64[D]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2022-10-01'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-02'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-03'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-04'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-05'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-06'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-07'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-08'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-09'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-10'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-11'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-12'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-13'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-14'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-15'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-16'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-17'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-18'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-19'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-20'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-21'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-22'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-23'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-24'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-25'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-26'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-27'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-28'</span><span class="token punctuation">,</span>       <span class="token string">'2022-10-29'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-30'</span><span class="token punctuation">,</span> <span class="token string">'2022-10-31'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[D]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.得到一个数的整数部分。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#array([1.349,9.791,7.07,8.6,3.872,2.508,2.994,8.569,4.73,6.633])</span>np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment">#array([1., 9., 7., 8., 3., 2., 2., 8., 4., 6.])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>14.构造一个数组，让它不能被改变。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>z<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>writeable <span class="token operator">=</span> <span class="token boolean">False</span>z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>Input In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>cell line<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token number">1</span> z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>      <span class="token number">2</span> z<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>writeable <span class="token operator">=</span> <span class="token boolean">False</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>ValueError<span class="token punctuation">:</span> assignment destination <span class="token keyword">is</span> read<span class="token operator">-</span>only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>15.打印大数量数的部分值、全部值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#设置打印规则</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定为<code>np.set_printoptions(threshold=np.inf)</code>。</p><p>16.找到在一个数组中，最接近一个数的索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>v <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token comment">#80.57286074367852</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>z<span class="token operator">-</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>17.32位<code>float</code>类型和32位<code>int</code>类型转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">#int32</span>z <span class="token operator">=</span> z<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">#float32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>18.打印数组元素位置坐标与数值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>value <span class="token keyword">in</span> np<span class="token punctuation">.</span>ndenumerate<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>19.按照数组的某一列进行排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>z<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">7</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">7</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>20.统计数组中每个数值出现的次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment">#array([0, 3, 2, ..., 0, 0, 1], dtype=int64)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>21.如何对一个四维数组的最后两维来求和。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>22.交换矩阵中的两行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>z<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#第一个参数是行,第二个参数是列,这里从略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>z</code>的打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>23.找到一个数组中最常出现的数字。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>bincount<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>24.快速查找<code>TOP K</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">z <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>z<span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argpartition<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#[9999 9998 9996 9997 9995]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>25.去掉一个数组中，所有元素都相同的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>set_printoptions<span class="token punctuation">(</span>threshold <span class="token operator">=</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">)</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> z<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token boolean">False</span> <span class="token boolean">False</span> <span class="token boolean">False</span>  <span class="token boolean">True</span> <span class="token boolean">False</span>  <span class="token boolean">True</span> <span class="token boolean">False</span> <span class="token boolean">False</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE知识</title>
      <link href="/2022/08/14/java0-javase-zhi-shi/"/>
      <url>/2022/08/14/java0-javase-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="ch1-Java基础"><a href="#ch1-Java基础" class="headerlink" title="ch1.Java基础"></a>ch1.Java基础</h1><h2 id="1-1-Java特点"><a href="#1-1-Java特点" class="headerlink" title="1.1 Java特点"></a>1.1 Java特点</h2><ul><li>跨平台</li><li>运行的基本原理：<strong>代码用java文件，可执行文件是.class</strong></li><li>语法和C基本相同，但没有指针</li><li>程序入口是main函数</li></ul><p>下面介绍Java基本语法，主要包括变量、数据类型、运算、流程、数组。</p><h2 id="1-2-变量和数据类型"><a href="#1-2-变量和数据类型" class="headerlink" title="1.2 变量和数据类型"></a>1.2 变量和数据类型</h2><p>整型：byte（1字节）、short（2字节）、int（4字节）、long（8字节，long表示的数字后<strong>加L</strong>）</p><p>默认情况下，系统看到一个常量，认为是int。如果在变量范围之内，可以赋值，否则报错（丢失精度）。</p><p>实型：float（浮点）、double（双精度，应用更广）。</p><p>默认情况下，系统看到一个常量，认为是double。直接赋值给float，都会报错（丢失精度），float要专门<strong>用F来标记</strong>。</p><p>字符型：char，用法和C基本相同，字符对应整数。</p><p>例：打印1-127对应的字符（ASCII码）。<code>int i; char ch=(char)i;</code></p><p>转义字符：与C相同。打印：<code>/^_^\</code></p><p>布尔型：<strong>Java不用0和非0表示真假，用true和false</strong>，对应的数据类型：boolean</p><p>字符串：C++中一般用字符数组表示字符串，Java中用String类型表示字符串，更加方便，字符串和其他类型可以用+连接，编程更长的字符串。</p><h2 id="1-3-基本运算"><a href="#1-3-基本运算" class="headerlink" title="1.3 基本运算"></a>1.3 基本运算</h2><p>和C语法相同</p><p>算术运算：+、-、*、&#x2F;、%</p><p>关系运算：&gt;、&lt;、&gt;、&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</p><p>逻辑运算：&amp;&amp;、||、！</p><p>赋值运算：+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、++、–</p><p>逻辑短路：(A  &amp;&amp;  B)，和C语言相同</p><h2 id="1-4-数组"><a href="#1-4-数组" class="headerlink" title="1.4 数组"></a>1.4 数组</h2><h3 id="1-4-1-定义方式"><a href="#1-4-1-定义方式" class="headerlink" title="1.4.1 定义方式"></a>1.4.1 定义方式</h3><p>C语言：<code>int a[5]; //5必须是常量</code></p><p>JAVA：<code>int a[] = new int[5];</code>  或 <code>int[] a = new int[5]; //标准写法,5可以是变量</code></p><p><code>int[] a; a=new int[4];</code>第一句定义a为数组类型，第二句为数组分配内存。</p><p>定义直接赋值：<code>int[] a = new int[]&#123;1,2,3,4&#125;</code></p><h3 id="1-4-2-性质"><a href="#1-4-2-性质" class="headerlink" title="1.4.2 性质"></a>1.4.2 性质</h3><p>C语言数组名只是个变量，存储了首地址的值，不是指针；（<code>*a,a=a+5</code>是错误的,<code>*(a+5)</code>可以）</p><p>JAVA中数组名虽然没有指针概念，但和指针性质相同。JAVA中的数组名性质和C中的指针p类似。</p><p>Java中数组使用里面的元素和C语言基本相同，如<code>a[0]=5;</code>  </p><h3 id="1-4-3-二维数组"><a href="#1-4-3-二维数组" class="headerlink" title="1.4.3 二维数组"></a>1.4.3 二维数组</h3><p>C:<code>int[3][4]</code></p><p>JAVA:<code>int[][] a= new int[3][4]</code></p><p><code>int[][] d= new int[3][];</code></p><p><code>d[0]=new int[5]; d[1]=new int[100]; d[2]=new int[23];</code></p><h3 id="1-4-4-for循环的数组元素遍历"><a href="#1-4-4-for循环的数组元素遍历" class="headerlink" title="1.4.4 for循环的数组元素遍历"></a>1.4.4 for循环的数组元素遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//在for循环中，可以利用“变量类型 变量名称:数组名称”的形式，直接把数组元素赋值给该变量</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number = "</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ch2-面向对象编程的基本概念"><a href="#ch2-面向对象编程的基本概念" class="headerlink" title="ch2.面向对象编程的基本概念"></a>ch2.面向对象编程的基本概念</h1><p>面向对象编程的英文为<strong>OOP</strong>（<strong>O</strong>bject <strong>O</strong>riented <strong>P</strong>rogramming）。</p><h2 id="2-1-类和对象"><a href="#2-1-类和对象" class="headerlink" title="2.1 类和对象"></a>2.1 类和对象</h2><p>类是对象的抽象，对象是类的实例。</p><h3 id="2-1-1-定义类和对象"><a href="#2-1-1-定义类和对象" class="headerlink" title="2.1.1 定义类和对象"></a>2.1.1 定义类和对象</h3><p>JAVA里面定义类和C++基本相同，语法有小区别。</p><p>C++：</p><p><code>Customer zs;  //C++实名对象</code></p><p><code>Customer *ls = new Customer(); //C++指针对象</code></p><p>JAVA:</p><p><code>Customer zs = new Customer();</code></p><p>类中的属性用变量表示，叫做<strong>成员变量</strong>，也叫做属性，域或字段（Field）。</p><p>类中的功能用函数表示，叫做<strong>成员函数</strong>，也叫做方法（Method）。</p><p>通过类定义一个对象，叫做<strong>实例化对象</strong>。</p><h3 id="2-1-2-成员函数的定义"><a href="#2-1-2-成员函数的定义" class="headerlink" title="2.1.2 成员函数的定义"></a>2.1.2 成员函数的定义</h3><p>语法和C基本相同，比C简单。</p><p>返回类型  函数名(参数列表) {</p><p>​函数体</p><p>}</p><p>对于一个程序来说，可能遇到的异常情况比较多，所以在if语句中先判断异常的情况，我们需要做很多事排除异常的情况，然后确定正常的情况。</p><p>【注意】</p><p>1.<strong>通过对象访问对象中的成员变量和成员函数（统称成员）</strong>：用.号，类似C++中的-&gt;。</p><p>2.<strong>对象名的引用（指针）性质</strong>：</p><p><code>Customer zs= new Customer();</code></p><p>zs类似于C++中的<strong>指针</strong>。</p><p>zs与ls均为对象名；zs&#x3D;ls，这里指的是<strong>ls的首地址给了zs</strong>，以后ls变化zs也变化。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220616151245710.png" alt="image-20220616151245710"></p><blockquote><p>更多内容可以参考博客：</p><p><a href="https://blog.csdn.net/GongchuangSu/article/details/51793544?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165536359916780366588914%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165536359916780366588914&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-51793544-null-null.142%5Ev17%5Epc_search_result_control_group,157%5Ev14%5Enew_3&amp;utm_term=java%E5%AF%B9%E8%B1%A1%E5%90%8D%E7%9A%84%E5%BC%95%E7%94%A8%E6%80%A7%E8%B4%A8&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/GongchuangSu/article/details/51793544?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165536359916780366588914%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165536359916780366588914&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-51793544-null-null.142^v17^pc_search_result_control_group,157^v14^new_3&amp;utm_term=java%E5%AF%B9%E8%B1%A1%E5%90%8D%E7%9A%84%E5%BC%95%E7%94%A8%E6%80%A7%E8%B4%A8&amp;spm=1018.2226.3001.4187</a></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> a<span class="token punctuation">,</span><span class="token class-name">Customer</span> b<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token keyword">double</span> t<span class="token punctuation">;</span> t<span class="token operator">=</span>a<span class="token punctuation">.</span>balance<span class="token punctuation">;</span> a<span class="token punctuation">.</span>balance<span class="token operator">=</span>b<span class="token punctuation">.</span>balance<span class="token punctuation">;</span> b<span class="token punctuation">.</span>balance<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pro1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Customer</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  zs<span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token class-name">Customer</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ls<span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>   <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>zs<span class="token punctuation">,</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为2000.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> a<span class="token punctuation">,</span><span class="token class-name">Customer</span> b<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token class-name">Customer</span> t<span class="token punctuation">;</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span> a<span class="token operator">=</span>b<span class="token punctuation">;</span> b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pro1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Customer</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  zs<span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token class-name">Customer</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ls<span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>   <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>zs<span class="token punctuation">,</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为1000.</p><h3 id="2-1-3-构造函数（Constructor）"><a href="#2-1-3-构造函数（Constructor）" class="headerlink" title="2.1.3 构造函数（Constructor）"></a>2.1.3 构造函数（Constructor）</h3><p>又名构造子，作用是对对象进行初始化。</p><p>总结：</p><p>（1）<strong>构造函数名称和类名相同，没有返回类型</strong>；</p><p>（2）构造函数在对象被实例化的时候，自动调用1次，<strong>以后不可手动调用</strong>；</p><p>（3）如果一个类中没有定义构造函数，系统自动给一个无参数的空的构造函数；若定义，则该无参数的空的构造函数失效；</p><p>（4）用this.成员名来确定该成员是类中成员变量而不是局部变量。</p><p>析构函数：对象消亡时调用，可以做一些资源释放的工作。</p><p>C++：~类名(){}在Java中，不需要专门定义析构函数，其有<strong>垃圾收集机制</strong>；也可以用finalize函数代替：<code>zs=null; System.gc();</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> account<span class="token punctuation">;</span>   <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">init</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用初始化函数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account<span class="token operator">=</span>account<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pro1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Customer</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此处省略1000行</span>        zs<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-函数重载（overload）"><a href="#2-2-函数重载（overload）" class="headerlink" title="2.2 函数重载（overload）"></a>2.2 函数重载（overload）</h2><h3 id="2-2-1-重载条件"><a href="#2-2-1-重载条件" class="headerlink" title="2.2.1 重载条件"></a>2.2.1 重载条件</h3><p>（1）参数个数不同；</p><p>（2）个数相同，类型不同；</p><p>（3）个数类型相同，顺序不同。</p><p>系统自动根据实参类型匹配相应的形参，调用相应函数。两个函数，名称、参数相同，<strong>返回类型不同，不能重载</strong>。</p><p>重载实现了静态的多态性。（静态：虽然只有一个函数名，但是要编写多个函数）</p><h3 id="2-2-2-练习"><a href="#2-2-2-练习" class="headerlink" title="2.2.2 练习"></a>2.2.2 练习</h3><p>编写复数类，实现两个复数相加。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ComplexNumber</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token class-name">ComplexNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token class-name">ComplexNumber</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ComplexNumber</span> c<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComplexNumber</span><span class="token punctuation">(</span>a<span class="token operator">+</span>c<span class="token punctuation">.</span>a<span class="token punctuation">,</span>b<span class="token operator">+</span>c<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ComplexNumber add(ComplexNumber c)</span>    <span class="token comment">//&#123;</span>    <span class="token comment">//   this.a+=c.a;</span>    <span class="token comment">//   this.b+=c.b;</span>    <span class="token comment">//   return this;</span>    <span class="token comment">//&#125;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//……</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pro1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ComplexNumber</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComplexNumber</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ComplexNumber</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComplexNumber</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ComplexNumber</span> c3 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-静态变量和静态函数"><a href="#2-3-静态变量和静态函数" class="headerlink" title="2.3 静态变量和静态函数"></a>2.3 静态变量和静态函数</h2><h3 id="2-3-1-静态变量"><a href="#2-3-1-静态变量" class="headerlink" title="2.3.1 静态变量"></a>2.3.1 静态变量</h3><p>类中的成员变量，特性是被该类的所有对象<strong>共用</strong>。</p><p>定义：变量前面加入static修饰符。</p><p>访问方式：对象名.变量名。由于它有共用性，一般用<strong>类名.变量名</strong>访问。（在C++中用类名::变量名表示）</p><p>​静态变量  普通变量</p><p>对象名.可以可以</p><p>类名.可以不可以</p><h3 id="2-3-2-静态函数"><a href="#2-3-2-静态函数" class="headerlink" title="2.3.2 静态函数"></a>2.3.2 静态函数</h3><p>在普通函数前增加static修饰符。</p><p>作用：一般情况下，完成公共的功能，或者访问静态变量。</p><ul><li><p>静态函数只能访问<strong>静态成员</strong>（静态变量&#x2F;调用其他静态函数），以及自己函数内的<strong>局部变量</strong>（包含形参），<strong>不能访问类里面的非静态成员变量</strong>。</p></li><li><p>静态函数的访问方式和静态变量相同（类名.函数名）</p><p>如前面复数相加，可以用<code>ComplexNumber c3 = ComplexNumber.add(c1,c2);</code>来实现。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">String</span> bankName<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeBankName</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  bankName <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//balance = 1000;//错</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【练习1】</strong>给某个类实例化多个对象，每个对象赋1个编号，从1开始递增。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>id<span class="token operator">=</span><span class="token class-name">N</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pro1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Customer</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【练习2】</strong>软件登录之后，用户可能会打开很多不同界面，这些界面如何记住登录用户的用户名，以便载入相应内容？</p><p>需求：如何在不同的对象（界面）之间传递信息。</p><p>方法：将需要传递的信息定义为静态变量，一旦赋值，别的对象可以访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LoginInfo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span><span class="token comment">//要共享的变量</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Online</span><span class="token punctuation">&#123;</span>    <span class="token comment">//直接访问LoginInfo.account(无需传递)</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chat</span><span class="token punctuation">&#123;</span>    <span class="token comment">//直接访问LoginInfo.account(无需传递)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​静态变量  普通变量</p><p>静态函数可以不可以</p><p>普通函数可以可以</p><h1 id="ch3-面向对象的基本特征"><a href="#ch3-面向对象的基本特征" class="headerlink" title="ch3.面向对象的基本特征"></a>ch3.面向对象的基本特征</h1><h2 id="3-1-封装（Encapsulation）"><a href="#3-1-封装（Encapsulation）" class="headerlink" title="3.1 封装（Encapsulation）"></a>3.1 封装（Encapsulation）</h2><p>日常生活中的封装：隐藏细节、保证安全、便于使用。</p><p>软件中的封装有以下三种：</p><h3 id="3-1-1-包级别的封装"><a href="#3-1-1-包级别的封装" class="headerlink" title="3.1.1 包级别的封装"></a>3.1.1 包级别的封装</h3><p>多个类的管理，可以将类放入包中进行管理，和Windows文件夹类似。</p><p><strong>【1】</strong>将类放入包中，可在类定义时，用**package 包名;**来确定。包名首字母一般小写；包名可以用.隔开，逻辑上分出包含关系。</p><p>如<strong>package a.b;</strong> 表示a包里面的b子包。不可以直接通过新建文件夹和拷贝.class文件来建包，只能通过编译。</p><p><strong>【2】</strong>同一个包中的类，可以直接使用。不在同一个包中的类，通过**import 类的路径;**来访问，并要确保被导入的类是public类。</p><p>注意：<code>import 包名.*;</code>可以表示导入该包中的所有类；<code>import 包名.*;</code>并不能导入其子包中的类。</p><h3 id="3-1-2-类级别的封装"><a href="#3-1-2-类级别的封装" class="headerlink" title="3.1.2 类级别的封装"></a>3.1.2 类级别的封装</h3><blockquote><p>public类和默认权限的类</p></blockquote><p>public类：在类的前面增加public修饰符public class Customer{}【注】<strong>public类所在的文件名一定要和类名相同</strong>。</p><p>性质：能够被包外其他类导入并访问。</p><p>默认权限的类：class XXX{}</p><p>性质：只能被同一个包中其他类访问。</p><h3 id="3-1-3-成员级别的封装"><a href="#3-1-3-成员级别的封装" class="headerlink" title="3.1.3 成员级别的封装"></a>3.1.3 成员级别的封装</h3><p>在成员变量或成员函数前加访问控制符，决定该成员的访问权限。</p><p>C++：private、protected、public</p><p>JAVA和C++类似：private&#x2F;默认&#x2F;protected&#x2F;public</p><p>写法：在成员定义时加入访问控制符。举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span><span class="token comment">//private权限</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//默认</span><span class="token keyword">protected</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token comment">//protected权限</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//public权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>private表示该成员只能在类的内部被访问；</p><p>默认表示该成员能被同一个包中的类访问；（private权限+<strong>同一个包</strong>中其他类访问）</p><p>protected：默认权限+包外子类访问；</p><p>public：包内、包外所有类访问。</p><hr><p>编程过程中，一般情况下，成员变量定义为私有（被继承情况除外），成员函数定义为公有。</p><p>读取或给成员变量赋值：</p><p>采用public的成员函数解决。一般用get函数来读取，用set函数来赋值（setter和getter函数）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>account<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>【练习】</strong>编写一个类，该类会被很多其他类调用，要确保该类对象在系统中使用的时候不超过1个实例。（<strong>单例模式</strong>）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TaskManager</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TaskManager</span> tm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TaskManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tm <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            tm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskMannager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tm<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">TaskManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务管理器实例化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务管理器显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Desktop</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">TaskManager</span><span class="token punctuation">.</span>getInstance<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Desktop</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desktop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-继承（Inheritance）"><a href="#3-2-继承（Inheritance）" class="headerlink" title="3.2 继承（Inheritance）"></a>3.2 继承（Inheritance）</h2><h3 id="3-2-1-继承概述"><a href="#3-2-1-继承概述" class="headerlink" title="3.2.1 继承概述"></a>3.2.1 继承概述</h3><p>C++：class 子类:[访问控制符] 父类{}</p><p>Java：class 子类 extends 父类{}</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span>h<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FontDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> fontName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ParaDialog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lineWidth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>（1）父类又叫做基类、超类，子类又叫派生类、扩展类，两者是组合关系；</p><p>（2）子类继承之后，父类中所有的<strong>非私有成员</strong>可以当成自己的使用；</p><p>（3）Java中不支持多重继承（同时继承好几个父类）（C++支持）；</p><p>（4）子类中可以定义和父类相同的成员，<strong>调用时以子类定义的成员为准</strong>，这叫做<strong>覆盖或重写（override）</strong>（注意和overload（重载）区分）。重写不得使<strong>成员函数</strong>的访问权限更加严格，否则报错。<strong>重写可以对某些子类进行个性化。</strong>（重写的作用）</p><blockquote><p>注：</p><p>重写时，子类定义成员和父类名称、返回类型、参数皆相同。</p></blockquote><p><strong>【练习】</strong>在网上下载了一个软件包，包含4个功能；其中，功能1直接使用，功能2在后面添加其他功能，功能3替换成自己的功能，功能4不能在本项目中使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Module</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyModule</span> <span class="token keyword">extends</span> <span class="token class-name">Module</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类中的fun2();</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其他功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自己功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">MyModule</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mm<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-继承的本质"><a href="#3-2-2-继承的本质" class="headerlink" title="3.2.2 继承的本质"></a>3.2.2 继承的本质</h3><h4 id="3-2-2-1-父类构造函数的初始化"><a href="#3-2-2-1-父类构造函数的初始化" class="headerlink" title="3.2.2.1 父类构造函数的初始化"></a>3.2.2.1 父类构造函数的初始化</h4><p>从现象上：</p><ul><li><p>子类实例化之前，系统为这个子类对象单独实例化一个相应的父类对象；</p></li><li><p>每个子类构造函数调用之前，父类构造函数都会自动调用；</p></li><li><p>如果父类构造函数有参数，必须通过在子类构造函数的<strong>第一句</strong>用**super(参数列表);**给父类的构造函数赋予参数。</p></li></ul><p>super和this相对应：</p><ul><li>super.XX;表示调用父类的成员，this.XX表示<strong>调用本类中成员</strong></li><li>super()表示<strong>调用父类构造函数</strong>；this(参数)表示调用自己的构造函数（用于<strong>构造函数互相调用</strong>的情况，比如如下代码）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-2-本质理解"><a href="#3-2-2-2-本质理解" class="headerlink" title="3.2.2.2 本质理解"></a>3.2.2.2 本质理解</h4><p>从本质上：子类和父类就是一种<strong>组合关系</strong>，只是底层用继承的编译器使得其使用起来更加方便。</p><p>继承的作用是<strong>代码重用</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FontDialog</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Dialog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FontDialog构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-组合关系从强到弱"><a href="#3-2-3-组合关系从强到弱" class="headerlink" title="3.2.3 组合关系从强到弱"></a>3.2.3 组合关系从强到弱</h3><p>（1）最强：继承<strong>【血缘关系】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FontDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>父类中的非私有成员都可以在子类全范围类重用。</p><p>（2）次之：成员级别组合：A类定义为B类的成员（A和B的声明周期相同）<strong>【刘关张三结义】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token class-name">A</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）次次之：函数参数级别的组合：A作为B中某个函数的参数，只在函数范围内有用<strong>【大学同学】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/**/</span><span class="token punctuation">&#125;</span><span class="token comment">//其他代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）最弱：函数中使用<strong>【萍水相逢】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/**/</span><span class="token comment">//使用A</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-多态（Polymorphism）"><a href="#3-3-多态（Polymorphism）" class="headerlink" title="3.3 多态（Polymorphism）"></a>3.3 多态（Polymorphism）</h2><p>一个东西，在不同场景下呈现出不同形态。</p><h3 id="3-3-1-静态多态性：重载"><a href="#3-3-1-静态多态性：重载" class="headerlink" title="3.3.1 静态多态性：重载"></a>3.3.1 静态多态性：重载</h3><p>重载的英文名是Overload，即一个函数名称，在不同实参传入情况下呈现出不同形态。</p><p>静态：一个函数名称，但还是要编写多个函数体。</p><h3 id="3-3-2-动态多态性"><a href="#3-3-2-动态多态性" class="headerlink" title="3.3.2 动态多态性"></a>3.3.2 动态多态性</h3><p>理论基础：<strong>父类引用可以指向子类对象</strong>。</p><p><strong>性质：父类引用调用重写成员时，调用的是子类中的成员</strong>。</p><p>推论：</p><p>对于以下两个类：</p><p>class Dialog{}</p><p>class FontDialog extends Dialog{}</p><p>有常见两种形式用于动态多态的操作：</p><ul><li>&#x3D;&#x3D;函数定义<strong>父类形参</strong>，以子类对象作为实参传入&#x3D;&#x3D;</li></ul><p>定义：void fun(<strong>Dialog d</strong>){}</p><p>调用：fun(new FontDialog());</p><ul><li>&#x3D;&#x3D;函数定义<strong>返回父类形参</strong>，以子类对象实际返回&#x3D;&#x3D;</li></ul><p>定义：</p><p><strong>Dialog</strong> fun()</p><p>{</p><p>​return new FontDialog();</p><p>}</p><p>调用：Dialog d &#x3D; fun();</p><p>多态性的作用体现在：</p><ul><li><p>一个父类引用，在不同子类对象被指向的情况下，完成相应子类的功能。该思想是软件支持“不修改源代码的情况下<strong>二次开发</strong>”以及“不修改源代码的情况下，<strong>模块可拼装</strong>“的基础。</p></li><li><p>将两个业务类的关系变远，叫做软件工程中的”<strong>低耦合</strong>“。</p></li></ul><p><strong>【例】</strong>编写一个类似于Word的软件，窗口上点击菜单，出现一个字体对话框。</p><p>​代码如下。对于<strong>外来类封装</strong>，可以在继承的子类中实例化外来类的对象，通过函数调用实现对外来类函数功能的使用，如MyNewDialog类中的函数语句段显示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FontDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FontDialog显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickMenu</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">clickMenu</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyNewDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyNewDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token class-name">MyFontDialog</span> mfd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mfd<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyFontDialog</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自己编写的漂亮的Dialog显示了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-抽象类与接口"><a href="#3-4-抽象类与接口" class="headerlink" title="3.4 抽象类与接口"></a>3.4 抽象类与接口</h2><h3 id="3-4-1-抽象函数与抽象类"><a href="#3-4-1-抽象函数与抽象类" class="headerlink" title="3.4.1 抽象函数与抽象类"></a>3.4.1 抽象函数与抽象类</h3><ul><li><p>在函数前面增加<strong>abstract</strong>关键字，称为抽象函数。该函数原则上要被重写，否则报错。</p></li><li><p>含有抽象函数的类叫做抽象类，<strong>用abstract来修饰</strong>。即<code>abstract class Dialog&#123;&#125;</code>。</p></li><li><p>抽象函数必须被子类重写，<strong>除非该子类也是个抽象类</strong>。</p></li><li><p>抽象函数没有函数体（类似C++中的纯虚函数）。</p></li><li><p>抽象类不能被实例化。</p></li></ul><p>【注意】</p><ul><li><p>抽象类中可以<strong>有普通函数</strong>，则抽象类可以拥有一些自己的功能。抽象类可以<strong>写构造函数</strong>；</p></li><li><p>抽象类不能被实例化，但它的构造函数可以在子类中初始化某些变量，普通函数可以被子类重用；</p></li><li><p>抽象类、抽象函数是一种标准化手段。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FontDialog</span> <span class="token keyword">extends</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FontDialog显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-2-接口"><a href="#3-4-2-接口" class="headerlink" title="3.4.2 接口"></a>3.4.2 接口</h3><ul><li><p>比抽象类更加“抽象”的“类“，叫做<strong>接口（interface）</strong>。</p></li><li><p>接口和抽象类类似，只不过它里面<strong>所有的函数只能是抽象函数</strong>（除非子类为抽象类，否则必须被重写）。其中的abstract可以省略。</p></li><li><p><strong>接口中任何变量&#x3D;&#x3D;只能是常量&#x3D;&#x3D;<strong>，</strong>不能赋值</strong>；也即：接口中所有变量都是public的、静态的、final的变量（常量）。</p></li><li><p>接口中<strong>所有的成员（变量&#x2F;函数）都是public的</strong>，其中关键字public可以省略（默认public）。<strong>但子类重写函数时不能省略</strong>。</p></li><li><p>一个类最多只能继承一个抽象类，但是<strong>可以实现（implements）多个接口</strong>（子类也叫做实现类），用逗号隔开。也可以在继承一个父类的同时，实现一个或多个接口，此时extends关键字必须位于implements关键字之前。即class 子类 extends 父类 implements 接口1,接口2,…{}</p></li><li><p>接口起到连接作用，有时也叫“界面”。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//常量</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">FontDialog</span> <span class="token keyword">implements</span> <span class="token class-name">Dialog</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Dialog.a = 5; 错误</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FontDialog显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickMenu</span><span class="token punctuation">(</span><span class="token class-name">Dialog</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">clickMenu</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FontDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-其他内容"><a href="#3-5-其他内容" class="headerlink" title="3.5 其他内容"></a>3.5 其他内容</h2><h3 id="3-5-1-final关键字"><a href="#3-5-1-final关键字" class="headerlink" title="3.5.1 final关键字"></a>3.5.1 final关键字</h3><p>在类、成员变量、成员函数前增加final关键字。</p><ul><li>类前面增加final，该类不能有子类。</li><li>成员函数前增加final，该函数不能被重写。</li><li>成员变量前增加final，该变量是常量，<strong>必须事先赋值</strong>，<strong>不能再次赋值</strong>。（类似C语言的const）</li></ul><h3 id="3-5-2-Object类"><a href="#3-5-2-Object类" class="headerlink" title="3.5.2 Object类"></a>3.5.2 Object类</h3><p>​在Java中定义一个类时，如果没有用extends明确标明直接父类，那么该类默认继承Object类，因此，<strong>Object类是所有类的最高父类</strong>，或者说，Java中任何一个类都是Object的子类。</p><p>​该类有两个作用：</p><ul><li><p>Object类中，有一个toString方法，可以给子类一个以<strong>字符串展示</strong>的机会。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> account<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> account<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>cname<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Customer</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为一个字符串。</p></li><li><p>Object类中，有一个equals方法，可以给子类对象一个比较它们<strong>是否相等</strong>的机会。</p><p>两个对象名，a&#x3D;&#x3D;b除非a与b指向同一个对象，才返回true；如果要定义两个对象内容相等，就需要重写”<strong>equals();</strong>“。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> cus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cus<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> balance <span class="token operator">==</span> cus<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//字符串相等使用equals方法</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Customer</span> cus1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Customer</span> cus2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cus1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cus2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>【练习】</strong>详细讲解多态性的应用。</p><p>编写一个按钮，具有点击功能；编写一个窗口，上面有个按钮。点击按钮，可以让窗口变红或变蓝。以上写模拟代码即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Button</span><span class="token punctuation">&#123;</span><span class="token class-name">ButtonListener</span> bl<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">ButtonListener</span> bl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//实现绑定</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bl <span class="token operator">=</span> bl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bl<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ButtonListener</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">Button</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">ButtonListener</span><span class="token punctuation">&#123;</span><span class="token class-name">Button</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Button</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      b1<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b2<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token class-name">Button</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span>b1<span class="token punctuation">)</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>             <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口变红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toBlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口变蓝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  w<span class="token punctuation">.</span>b2<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ch4-Java语言核心包"><a href="#ch4-Java语言核心包" class="headerlink" title="ch4.Java语言核心包"></a>ch4.Java语言核心包</h1><h2 id="4-1-java-lang包"><a href="#4-1-java-lang包" class="headerlink" title="4.1 java.lang包"></a>4.1 java.lang包</h2><p>java.lang包，是Java中<strong>最基础的核心包</strong>，里面包含的是最基础的类。如数学运算、字符串处理等。这个包在默认情况下，系统将其导入，不需要用import导入到程序中就可以直接使用里面的类。</p><h3 id="4-1-1-java-lang-Math类"><a href="#4-1-1-java-lang-Math类" class="headerlink" title="4.1.1 java.lang.Math类"></a>4.1.1 java.lang.Math类</h3><p><strong>负责数学运算</strong>，下面展开介绍<strong>随机数</strong>相关问题：</p><ul><li>数组放置在1-100的数字，要求随机打乱：可以通过1-100按顺序，随机找两个打乱，打乱多次</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MathTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> L1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> L2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>L1<span class="token punctuation">]</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>L1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>L2<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>L2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>公平的赌博游戏，久赌必输</p><p>100元筹码，随机数，0-0.5之间，赢10元，0.5-1之间，输10元。赢满500走人，其中输光退场。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MathTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;</span><span class="token number">0.5</span><span class="token punctuation">)</span>                   <span class="token class-name">M</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">else</span>                <span class="token class-name">M</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前财产："</span>  <span class="token operator">+</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输光走人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赢满走人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-java-lang-String类"><a href="#4-1-2-java-lang-String类" class="headerlink" title="4.1.2 java.lang.String类"></a>4.1.2 java.lang.String类</h3><p><strong>负责字符串处理</strong>。</p><p>1.初始化字符串，有两种方式：</p><ul><li><p><strong>直接赋值</strong><code>String s = &quot;China&quot;;</code></p><p>注意：直接赋值，系统为了节省内存，用的是“<strong>池机制</strong>”，即：<code>String s1 = &quot;China&quot;; String s2 = &quot;China&quot;;</code> 打印<code>s1==s2</code>，输出为<code>true</code>，但若两个字符串赋值方式不同，用”&#x3D;&#x3D;“判断两个字符串是否相等，结果将存在问题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​因此，要判断<strong>两个字符串是否相等</strong>，应使用<code>s1.equals(s2)</code>。</p><ul><li><strong>创建字符串对象</strong><code>String s = new String(&quot;China&quot;); </code></li></ul><p>2.charAt函数：<code>s.charAt(1)</code>，返回<code>h</code></p><p>3.contains函数(boolean类型)，若包含则返回<code>true</code>，否则为<code>false</code>。</p><p>4.indexof函数，返回第一次出现的<code>index</code>（位置）</p><p>5.replace函数，返回替换后的结果（返回的是新的字符串，但<strong>原先字符串的内容未变化</strong>）</p><h3 id="4-1-3-java-lang-StringBuffer类"><a href="#4-1-3-java-lang-StringBuffer类" class="headerlink" title="4.1.3 java.lang.StringBuffer类"></a>4.1.3 java.lang.StringBuffer类</h3><p><strong>负责字符串处理</strong>。StringBuffer类是<strong>自变型字符串</strong>，<strong>操作之后，自己变化</strong>。如：执行语句：</p><p><code>StringBuffer sm = new StringBuffer(&quot;China-Hunan&quot;); sm.append(&quot;-CSU&quot;); </code> ，sm变化。</p><p>而String是<strong>非自变型字符串</strong>，在字符串频繁操作场合，大大消耗内存。如：sm如果是String，执行语句<code>sm.replace(&quot;CSU&quot;,&quot;中南大学&quot;);</code>，sm没变。</p><h2 id="4-2-基本数据类型的包装类"><a href="#4-2-基本数据类型的包装类" class="headerlink" title="4.2 基本数据类型的包装类"></a>4.2 基本数据类型的包装类</h2><p>数据类型     包装类</p><p>intInt</p><p>floatFloat</p><p>doubleDouble</p><p>重要作用：<strong>将字符串转成相应的数值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//因为Integer.parseInt是静态函数，直接对类名.函数名进行操作即可，无需实例化对象。</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"3.1415926"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若将数值转成字符串，统一用<strong>String.valueOf(各类数值);</strong></p><h2 id="4-3-java-util包"><a href="#4-3-java-util包" class="headerlink" title="4.3 java.util包"></a>4.3 java.util包</h2><p>java.util是<strong>工具包</strong>，其中最重要的是<strong>Java集合框架</strong>（变长数组），共三类：List类、Set类、Map类。</p><h3 id="4-3-1-List类"><a href="#4-3-1-List类" class="headerlink" title="4.3.1 List类"></a>4.3.1 List类</h3><p><strong>一维变长数组</strong>，元素有位置信息，可重复。子类有：</p><p>ArrayList：底层用数组存储</p><p>LinkedList：底层用链表存储</p><p>Vector：底层用数组存储，实现了多线程的安全</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UtilTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"巴黎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token comment">//遍历</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//或使用for(int i = 0; i&lt;list.size(); i++)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>用法完全相同（增删改查）</p></li><li><p>一边插入一边排序：插入排序法</p></li><li><p>找位置一般用二分法找位置</p></li></ul><h3 id="4-3-2-Set类"><a href="#4-3-2-Set类" class="headerlink" title="4.3.2 Set类"></a>4.3.2 Set类</h3><p>一维变长数组，元素<strong>无位置信息</strong>，&#x3D;&#x3D;<strong>不可重复</strong>&#x3D;&#x3D;。常用的有：HashSet（<strong>元素乱序</strong>）、LinkedHashSet（<strong>元素保序</strong>）。</p><h3 id="4-3-3-Map类"><a href="#4-3-3-Map类" class="headerlink" title="4.3.3 Map类"></a>4.3.3 Map类</h3><p><strong>二维变长数组</strong>，是key和value的对应。常用的有：HashMap、LinkedHashMap</p><p>keyvalue</p><p>姓名张三</p><p>性别男</p><p>籍贯湖南长沙</p><p><strong>key不可重复，value可重复</strong>。若两个不同的对象指定同一个key值，后面的将会把前面的覆盖。</p><p>作业：输入一个长字符串，显示里面每个字符出现的次数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UtilTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"qqqwwweeeerr111我爱爱爱爱爱你"</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义Map集合</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//初始化count的值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 遍历一次str字符串</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断字符串i下标和j下标的字符是否相等，若相等就让count自增</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把下标为i的字符和他的出现次数存进去</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出Map集合</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LinkedHashMap可以确保是按照添加进去的顺序进行存储。</p><h1 id="ch5-Java异常处理"><a href="#ch5-Java异常处理" class="headerlink" title="ch5.Java异常处理"></a>ch5.Java异常处理</h1><h2 id="5-1-异常的定义"><a href="#5-1-异常的定义" class="headerlink" title="5.1 异常的定义"></a>5.1 异常的定义</h2><p>异常【<strong>Exception</strong>（例外）】：程序在运行过程中出现的不正常现象。</p><ul><li>不正常：（1）编译阶段，程序报错-修改代码；（2）运行阶段，程序报错-处理异常。</li><li>异常若不进行处理，危害在：（1）程序异常停止；（2）得不到友好的提示。</li></ul><h2 id="5-2-异常处理的重要关键词"><a href="#5-2-异常处理的重要关键词" class="headerlink" title="5.2 异常处理的重要关键词"></a>5.2 异常处理的重要关键词</h2><h3 id="5-2-1-关键词try、catch"><a href="#5-2-1-关键词try、catch" class="headerlink" title="5.2.1 关键词try、catch"></a>5.2.1 关键词try、catch</h3><p>异常处理三大关键词   <strong>try - catch - finally</strong></p><p>​         个数1  1…n       <strong>0&#x2F;1</strong></p><p>​重要性   <code>*** **     * </code></p><ul><li><p>try：将可能出现异常的代码放在try中；</p></li><li><p>catch：将异常出现后，将需要处理的代码放在catch中。即<code>try&#123;&#125;catch(Exception e)&#123;&#125;</code>。</p></li></ul><p>【细节问题】</p><ul><li><p>try中的代码是<strong>业务代码</strong>，如果没有问题，不执行catch；如果有异常，略过try中剩余的代码，转而执行catch，执行完毕后，程序继续向下执行，不会终止。</p></li><li><p>一个try后面至少跟一个catch，<strong>可以跟多个catch</strong>，用来处理不同的异常。</p></li><li><p>catch(Exception e)即将异常问题<strong>一网打尽</strong>，该语句若跟别的异常catch并列，应放到最后。</p></li></ul><h3 id="5-2-2-Java常见异常分类"><a href="#5-2-2-Java常见异常分类" class="headerlink" title="5.2.2 Java常见异常分类"></a>5.2.2 Java常见异常分类</h3><ul><li><p>NumberFormatException：数值格式异常</p></li><li><p>ArithmeticException：数学计算异常（如除数为0）</p></li><li><p>ArrayIndexOutOfBoundsException：数组越界异常</p></li><li><p><strong>NullPointerException</strong>：对象未分配内存异常（如String str &#x3D; null）</p></li></ul><h3 id="5-2-3-拓展应用"><a href="#5-2-3-拓展应用" class="headerlink" title="5.2.3 拓展应用"></a>5.2.3 拓展应用</h3><p>异常处理有时候可以解决一些有趣的问题。如：输入一个整数，打印这个数的平方；如果输入格式不对，反复出现输入框，直到输入格式正确，打印平方。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span>JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"输入整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">*</span> <span class="token class-name">N</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果是:"</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-4-关键词finally"><a href="#5-2-4-关键词finally" class="headerlink" title="5.2.4 关键词finally"></a>5.2.4 关键词finally</h3><p>和try、catch一起使用的还有一个关键词：finally。</p><ul><li><p>finally代码块原理：finally加在catch后面，表示<strong>不管是否出现异常</strong>，都需要执行的代码。try-catch之后，<strong>可以有finally，也可以没有finally</strong>。如打开文件、处理文件、关闭文件（finally）。finally块确保了程序的安全性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// double a = 10/0;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以上代码出现了异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>finally块不是可有可无的，只要有try，<strong>不管try里面发生了循环跳出、函数返回等，配套的finally一定会执行，从底层确保了需要执行的代码一定会执行（安全性）</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CCCCCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-3-异常抛出关键词throw、throws"><a href="#5-3-异常抛出关键词throw、throws" class="headerlink" title="5.3 异常抛出关键词throw、throws"></a>5.3 异常抛出关键词throw、throws</h2><ul><li><p>异常处理另外两个关键词：<strong>throw、throws</strong>：<strong>抛出</strong>。</p></li><li><p>异常的原理：try{…}catch(Exception e){…}<br>原理：try里面的代码，如果出现异常，系统底层将其包装成一个对象，抛出。<strong>被catch块捕获</strong>，<strong>赋值给参数e</strong>，并执行catch块。</p></li></ul><p>【例】编写一个函数“setAge”，输入一个人的年龄整数，如果在0-100之间，返回年龄本身数值；否则返回“年龄范围错误”。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> age<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Exception</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"年龄范围错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ExceptionTest</span> et <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> age <span class="token operator">=</span> et<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>throw表示在函数中抛出一个实际的异常对象，throws表示在<strong>函数定义</strong>上标记该函数可能抛出异常。</p></li><li><p>标记了throws的函数，在调用时，（1）原则上必须用<strong>try</strong>包围，并编写<strong>catch代码</strong>处理可能出现的异常（还有非原则情况，即原来的函数抛出的异常类型是RuntimeException的子类），这叫做<strong>就地捕获</strong>；（2）或者<strong>将异常再次向前抛出</strong>。</p></li><li><p>throws和throw一般用于自定义异常信息并要求从函数中返回的情况。为了不影响函数的正常返回，将自定义异常的信息用异常包装，throw抛出，函数用throws标记。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token comment">//异常的向前抛出</span><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> age<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Exception</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"年龄范围错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>  <span class="token comment">//异常的向前抛出</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ExceptionTest</span> et <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>et<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//异常的就地捕获</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异常抛出与异常处理相比，异常处理使用场合更多。</li></ul><h1 id="ch6-Java多线程开发"><a href="#ch6-Java多线程开发" class="headerlink" title="ch6.Java多线程开发"></a>ch6.Java多线程开发</h1><h2 id="6-1-进程与线程的概念"><a href="#6-1-进程与线程的概念" class="headerlink" title="6.1 进程与线程的概念"></a>6.1 进程与线程的概念</h2><p>进程（Process）：操作系统中能够“同时”运行的多个<strong>应用程序</strong>（QQ、浏览器、Word、WPS）。</p><p>线程（Thread）：一个应用程序中，能够“同时”运行的多个任务，比如在线播放（一边下载，一边播放），很多软件都支持线程功能，如QQ可以一边接收信息、一边用户可以发送信息，抖音可以一边下载、一边播放。</p><p>两者实际上在底层是“<strong>分时</strong>”（时间片轮转），由操作系统决定。</p><p>针对Java语言，我们讲解线程。</p><h2 id="6-2-实现线程的两种方法"><a href="#6-2-实现线程的两种方法" class="headerlink" title="6.2 实现线程的两种方法"></a>6.2 实现线程的两种方法</h2><h3 id="6-2-1-方法一"><a href="#6-2-1-方法一" class="headerlink" title="6.2.1 方法一"></a>6.2.1 方法一</h3><ul><li>让需要实现线程的类，继承<strong>java.lang.Thread</strong>类；</li><li>将需要实现线程的代码，放在从Thread类中<strong>重写</strong>的run函数里面；</li><li>开启线程，用线程对象的start方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token comment">//①第一步：继承Thread</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//②第二步：重写run函数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//休息1秒</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"播放进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Player</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//③第三步：用start方法开启各个线程的run函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当要在执行某个线程一段时间后执行另一个进程时，可用以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>     <span class="token comment">//①第一步：继承Thread</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//②第二步：重写run函数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//一个线程调用另一个线程</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"播放进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//③第三步：用start方法开启各个线程的run函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-2-方法二"><a href="#6-2-2-方法二" class="headerlink" title="6.2.2 方法二"></a>6.2.2 方法二</h3><ul><li>让需要实现线程的类，继承<strong>java.lang.Runnable</strong>接口；</li><li>将需要实现线程的代码，放在从Runnable接口中<strong>重写</strong>的run函数里面；</li><li><strong>实例化线程</strong>，将类的对象传入线程的构造函数，再调用线程的start方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>  <span class="token comment">//①第一步：实现Runnable</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//②第二步：重写run函数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"播放进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Player</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//③第三步：实例化线程，将类的对象传入线程的构造函数，再调用线程的start方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用了多线程，多个任务完成得比以前快，不是因为多线程让CPU运行更快，是让CPU的利用率提高。</p><h2 id="6-3-线程控制"><a href="#6-3-线程控制" class="headerlink" title="6.3 线程控制"></a>6.3 线程控制</h2><ul><li><strong>线程开启</strong>(start)</li><li><strong>线程暂停</strong>(suspend)</li><li><strong>线程继续</strong>(resume)</li><li><strong>线程结束</strong>(run函数运行完毕)</li></ul><p>【例】下载文件，下载到30%，暂停下载5秒，5秒后继续下载，编写代码实现该功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】suspend、resume是不建议使用的函数，<strong>有死锁倾向</strong>。</p><p>这两个函数，特别是suspend，在暂停时不会释放线程中的资源，导致资源被该线程长期持有，别人不能使用，故可能造成循环等待。所以不建议使用。可采用以下方法：<strong>线程暂停，就让该线程结束（run函数运行完毕）；线程继续，新开启一个线程（start）。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>     <span class="token keyword">boolean</span> RUN <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token operator">&amp;&amp;</span>RUN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span>RUN <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//新开启一个线程继续</span>d<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-线程同步"><a href="#6-4-线程同步" class="headerlink" title="6.4 线程同步"></a>6.4 线程同步</h2><ul><li>主要出现在“<strong>多个线程访问同一内存资源的场合</strong>”，如：下载文件时，如果同时开多个线程下载文件，可以提高下载速度</li><li>解决同步问题：用<strong>synchronized</strong>将<strong>原子代码</strong>包含起来，保证其要么全部运行，要么全部不运行，别的线程在此之间，无法抢占CPU<br>这种方式。实际上，是将线程功能进行了退化，“几乎又变成串行”。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此处不能用方法1(继承thread类),定义d1、d2对象,因为synchronized的参数this打在的是对象中(synchronized运行结束this上的标记自动消亡),这种方法会使this标记打在了两个对象,而Runnable方法可使this打在一个对象,达到目的。</span><span class="token keyword">class</span> <span class="token class-name">Downloader</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义静态变量，可以使类中所有对象共用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载进度:"</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Downloader</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Downloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际过程中，解决同步问题的方法是：<strong>人为进行资源划分</strong>（如一个线程下载前50%，另一个线程下载后50%）。</li></ul><h1 id="ch7-JavaIO操作"><a href="#ch7-JavaIO操作" class="headerlink" title="ch7.JavaIO操作"></a>ch7.JavaIO操作</h1><p>IO：输入输出。</p><p>输入设备：键盘、鼠标、扫描仪</p><p>输出设备：打印机、显示器</p><p>同时属于输入输出设备：硬盘</p><p>输入设备和输出设备是站在<strong>内存</strong>的角度划分的。</p><p>将文件从硬盘上读入，QQ收到对方信息；将文件保存到硬盘，QQ输出信息给对方。</p><p>这里重点讲解<strong>文件输入输出</strong>，对应的包是java.io。</p><h2 id="7-1-封装文件"><a href="#7-1-封装文件" class="headerlink" title="7.1 封装文件"></a>7.1 封装文件</h2><p>java.io.File：<strong>文件封装</strong>，得到文件信息，删除文件，重命名文件</p><p>[例1]用File类封装E:&#x2F;test.txt.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]列出D盘下面所有的文件，并显示.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例3]删除E:&#x2F;testDir下面的所有文件.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/testDir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例4]编写一个病毒，用户运行，自动清空输入文件夹路径中所有的文件和文件夹。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">VirusTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VirusTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">FileDelete</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">FileDelete</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span>JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"请输入您要删除的文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileDelete</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-读文件"><a href="#7-2-读文件" class="headerlink" title="7.2 读文件"></a>7.2 读文件</h2><p>场景：test.txt里面有一些内容，读入到内存后，显示在屏幕上。</p><h3 id="7-2-1-java-io-FileInputStream"><a href="#7-2-1-java-io-FileInputStream" class="headerlink" title="7.2.1 java.io.FileInputStream"></a>7.2.1 java.io.FileInputStream</h3><p>FileInputStream类一个个字节读取，对中文支持不佳。文件输入输出流，打开之后，记得及时关闭</p><p>【注】<strong>字节流和字符流</strong></p><p>字节流以字节的形式读取文件，对于有一些“双字节字符”，支持不好。为了解决该问题，Java中推出专门支持字符流的文件输入输出类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>批量读取</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-2-java-io-FileReader"><a href="#7-2-2-java-io-FileReader" class="headerlink" title="7.2.2 java.io.FileReader"></a>7.2.2 java.io.FileReader</h3><p>字符读取，可一个个字符读，也可一块块读，支持字符。</p><h3 id="7-2-3-java-io-BufferedReader"><a href="#7-2-3-java-io-BufferedReader" class="headerlink" title="7.2.3 java.io.BufferedReader"></a>7.2.3 java.io.BufferedReader</h3><p>重点针对字符特别是多字节字符讲解的不是FileReader，最常见使用的是“<strong>按行读</strong>”的另一个类：java.io.BufferedReader。如果对字符串进行读取，最佳办法是用：BufferedReader。它支持按行读字符串，<strong>和FileReader配套</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节流读取（FileInputStream）和字符流读取（FileReader&#x2F;BufferedReader）进行比较，FileInputStream（适合图像、视频、语音、文本都支持），而字符流读取一般只适合字符和字符串。</p><p>【总结】</p><ul><li>java.io.FileInputStream：字节读取，可一个个字节读，也可一块块读，使用最广</li><li>java.io.FileReader：字符读取，可一个个字符读，也可一块块读，支持字符</li><li>java.io.BufferedReader：支持按行读字符串，和FileReader配套</li></ul><h2 id="7-3-写文件"><a href="#7-3-写文件" class="headerlink" title="7.3 写文件"></a>7.3 写文件</h2><p>场景：定义一个变量，保存到test.txt中。</p><ul><li><strong>java.io.FileOutputStream</strong>：字节流输出</li></ul><p>注意：向文件保存数据时，有两种模式：1）在文件末尾添加；    2）覆盖原有内容，用<strong>append</strong>参数确定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//append参数为false,覆盖原有内容</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"CSU中南大学"</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getBytes函数转为字节数组,然后写入文件</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>java.io.FileWriter</strong>：字符流输出</li><li><strong>java.io.PrintStream</strong>：支持丰富的格式对字符串进行输出，字符串万能输出，<strong>和FileOutputStream配套</strong></li></ul><p>[例1]将一个99乘法表保存到test.txt中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> i<span class="token operator">*</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]将一个图像加密，加密方法：每个字节的值+3。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IOTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"img1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"img2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，RandomAccessFile类可以提供文件的随机访问，既支持文件读，又支持文件写。</p><h1 id="ch8-Java界面开发与事件处理"><a href="#ch8-Java界面开发与事件处理" class="headerlink" title="ch8.Java界面开发与事件处理"></a>ch8.Java界面开发与事件处理</h1><p>本章讲述Java开发桌面应用程序，包括用Swing开发GUI程序、Java事件处理与Java绘图。</p><p>Swing：Java中的一个包，负责开发GUI程序</p><p>GUI：图形用户界面，一般指可视化桌面系统中的应用程序。</p><p>Windows：将应用程序从字符界面拓展到图形界面。</p><p><strong>常见图形用户界面的基本结构</strong>：</p><ul><li><p>界面（容器窗口）</p></li><li><p>控件（界面上的组件，如按钮、文本框等）</p></li><li><p>渲染（颜色、字体等）</p></li><li><p>事件响应（完成功能）</p></li></ul><p><strong>界面</strong>、<strong>控件</strong>、渲染中的<strong>图标</strong>使用的包：<strong>javax.swing</strong>包【注：javax的x：eXtension（扩展）】</p><p>渲染（颜色：Color、字体：Font）使用的包：<strong>java.awt</strong>包。</p><h2 id="8-1-界面"><a href="#8-1-界面" class="headerlink" title="8.1 界面"></a>8.1 界面</h2><p>又称容器、窗口，提供整个界面的空间。</p><ul><li>框架界面: javax.swing.JFrame</li><li>窗口界面: javax.swing.JWindow</li><li>对话框界面: javax.swing.JDialog</li></ul><p>一般掌握第（1）种即可。</p><p><strong>显示：setVisible函数</strong></p><p>[例]在桌面出现一个界面，标题是：HelloWorld</p><p><strong>用框架界面</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GUI1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token class-name">JFrame</span> jfm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jfm<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jfm<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jfm<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退出框架界面</span>jfm<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过构造函数进行初始化</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token function">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类的构造函数</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-控件"><a href="#8-2-控件" class="headerlink" title="8.2 控件"></a>8.2 控件</h2><p>界面上的组件，如按钮、文本框、复选框等。</p><p>注意：Java中，容器还有：<strong>面板</strong>  javax.swing.JPanel</p><p>一般我们在界面上添加一个面板，<strong>面板上增加控件</strong>。</p><ul><li>按钮：javax.swing.JButton</li><li>静态文本：javax.swing.JLabel</li><li>文本框：javax.swing.JTextField</li><li>密码框：javax.swing.JPasswordField</li><li>多行文本框：javax.swing.JTextArea</li><li>下拉菜单：javax.swing.JComboBox</li><li>复选框：javax.swing.JCheckBox</li></ul><p>举一反三：</p><ul><li>知道一个控件，用哪个类？</li><li>查文档看构造函数和其他重要函数</li><li><strong>将控件实例化后加到容器中</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"——————欢迎来到中南大学社团学生注册系统——————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"学生注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlbAcc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"请您输入账号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtfAcc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlbAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"请您选择您的家乡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JComboBox</span> jcbAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JCheckBox</span> jcbMember <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JCheckBox</span><span class="token punctuation">(</span><span class="token string">"是否立即成为会员"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlbInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"请您输入个人详细描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jtaInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span>  jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlbAcc<span class="token punctuation">)</span><span class="token punctuation">;</span>  jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtfAcc<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlbAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>  jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jcbAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>  jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlbInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>jcbAdd<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"湖南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcbAdd<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"湖北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcbAdd<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"河南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcbAdd<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"河北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jcbMember<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-渲染"><a href="#8-3-渲染" class="headerlink" title="8.3 渲染"></a>8.3 渲染</h2><ul><li><p>包含<strong>颜色、字体</strong>（java.awt）、<strong>图标</strong>（javax.swing）三部分</p></li><li><p>任何界面和控件都可以设置背景颜色和前景颜色</p><p>setBackground(颜色)  setForeground(颜色) （文档可查）</p></li></ul><p>​凡是有字的控件，都有setFont函数（文档可查）</p><ul><li><p><strong>颜色</strong>：java.awt.Color</p></li><li><p><strong>字体</strong>：java.awt.Font</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"学生注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span>  jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Font</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>图标</strong>：很多控件都可以设置图标，如按钮、静态文本等。但不是所有，比如文本框就不能。具体看文档。用的函数：<strong>setIcon函数</strong></p><p>注意：<strong>Icon和ImageIcon在swing中</strong>。</p><p>主要方法有：</p><p>控件.setBackground和setForeground（颜色）</p><p>控件.setFont（字体）</p><p>控件.setIcon（图标）</p><p>【例】将按钮设置为图标形式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span>  jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">ImageIcon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"这是一个按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8-4-界面布局管理"><a href="#8-4-界面布局管理" class="headerlink" title="8.4 界面布局管理"></a>8.4 界面布局管理</h2><p>布局：将控件有序的放在界面上，使用java.awt包。</p><h3 id="8-4-1-FlowLayout"><a href="#8-4-1-FlowLayout" class="headerlink" title="8.4.1 FlowLayout"></a>8.4.1 FlowLayout</h3><p>JPanel默认的布局方式是：<strong>流式布局</strong>（FlowLayout），优先放在1行，放不下，到后面1行。该布局方式由java.awt.FlowLayout来管理；<br>任何容器管理类都有<strong>setLayout函数</strong>设置布局。</p><p>[例]将一个按钮，一个文本框放在界面上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">FlowLayout</span> fl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>LEFT<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>fl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-2-GridLayout"><a href="#8-4-2-GridLayout" class="headerlink" title="8.4.2 GridLayout"></a>8.4.2 GridLayout</h3><p>网格布局，将界面设置为多行多列的格子，放置控件。该布局方式由<strong>java.awt.GridLayout</strong>来管理。</p><p>[例1]放置24个按钮在界面上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">GridLayout</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jpl<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">24</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]制作一个8*8国际象棋棋盘。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">GridLayout</span> gl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jpl<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>gl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">JPanel</span> pl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>pl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> pl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-3-BorderLayout"><a href="#8-4-3-BorderLayout" class="headerlink" title="8.4.3 BorderLayout"></a>8.4.3 BorderLayout</h3><p><strong>边界布局</strong>：将界面分为东西南北中，添加控件。该布局方式由java.awt.BorderLayout来管理。</p><p>JFrame的默认布局方式是BorderLayout。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220419112326206.png" alt="image-20220419112326206"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">BorderLayout</span> bl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jpl<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>bl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>jpl<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[注]教科书中有关于计算器的编制程序。</p><h3 id="8-4-4-完全自由布局"><a href="#8-4-4-完全自由布局" class="headerlink" title="8.4.4 完全自由布局"></a>8.4.4 完全自由布局</h3><p>在完全自由布局中，控件的位置，大小，用坐标决定，而不是由界面大小决定。实际上是：<strong>设置容器布局为null</strong>，然后通过<strong>setSize</strong>设置大小，<strong>setLocation</strong>设置位置。</p><p>部分情况不适用该布局方式的原因：<strong>坐标体系在不同的操作系统不能保证相同</strong>。</p><p>[例1]设置一个按钮，从界面上方以抛物线的形式掉下来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jbt<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  jbt<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>th<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">X</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token class-name">Y</span><span class="token operator">=</span><span class="token class-name">X</span><span class="token operator">*</span><span class="token class-name">X</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>  <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]小球自由落体掉下，弹起来，再次自由落体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Layout1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> DIR <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Icon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  jbt<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>icon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>icon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>th<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>DIR<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token class-name">Y</span><span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>jbt<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> DIR<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>DIR<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token class-name">Y</span><span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> DIR<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>jbt<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Layout1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-5-事件监听机制"><a href="#8-5-事件监听机制" class="headerlink" title="8.5 事件监听机制"></a>8.5 事件监听机制</h2><p>Java事件处理在<strong>java.awt.event</strong>包中。</p><p>事件：程序对某些操作的响应。</p><p>点击按钮，打印“Hello”的<strong>三个步骤</strong>是：（其余都类似）</p><ul><li>事件响应类必须能够<strong>听到相应的命令</strong>（加一个耳朵）<br>点击按钮如果要响应，必须让响应类实现java.awt.event.ActionListener接口</li><li>将事件响应的代码，放在接口中<strong>重写的函数</strong>内</li><li><strong>绑定</strong>，确保按钮发出命令，响应对象能够执行</li></ul><p>①实现接口（监听器）、②编写函数、③绑定，叫做<strong>事件监听机制</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span> <span class="token comment">//①实现接口</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//②事件响应代码</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Printer</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//③绑定，确保按钮发出命令，p能够执行</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更加简洁的方法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java中定义，不同的事件，由不同的<strong>XXXListener</strong>来监听。</p><p>事件响应函数中，<strong>ActionEvent参数</strong>表示<strong>命令发出时，封装的命令发出方的信息</strong>。</p><p>[例]实现两个按钮，一个按钮点击，界面变红，另一个点击，界面变蓝。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"变红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"变蓝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt1<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt2<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt1<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> jbt2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>jbt1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//getSource()函数可以得知事件的源头</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-6-常见监听事件处理"><a href="#8-6-常见监听事件处理" class="headerlink" title="8.6 常见监听事件处理"></a>8.6 常见监听事件处理</h2><p>下列Listener，分别监听以下事件：</p><ul><li><p>&#x3D;&#x3D;<strong>ActionListener</strong>&#x3D;&#x3D;：监听按钮点击，文本框内回车，菜单单击、其他支持单击响应的控件，以及一些拥有addActionListener函数的控件                </p></li><li><p>&#x3D;&#x3D;<strong>ItemListener</strong>&#x3D;&#x3D;：监听选项变化时要响应的事件，如下拉菜单等 </p><p>下拉菜单中有红绿蓝三个选项，选择时，界面自动变色</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ItemListener</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JComboBox</span> jcb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JPanel</span> jpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">itemStateChanged</span><span class="token punctuation">(</span><span class="token class-name">ItemEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>jcb<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"红"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>jcb<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"绿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>jpl<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jcb<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jpl<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jcb<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  jcb<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcb<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"绿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jcb<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"蓝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>&#x3D;&#x3D;<strong>MouseListener</strong>&#x3D;&#x3D;：监听鼠标操作（单击，双击，进入，离开等）</li></ul><p>[例1]鼠标进入按钮，按钮变红，退出，按钮变白。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">MouseListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jbt<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>jbt<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>jbt<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]界面上有一个图片，鼠标进入，图片随机躲开。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">MouseListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Icon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>icon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>icon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">X</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>jlb<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>jlb<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>&#x3D;&#x3D;<strong>MouseMotionListener</strong>&#x3D;&#x3D;：监听鼠标移动和拖动操作</li></ul><p>[例]鼠标在界面上移动，标题栏显示鼠标的当前坐标。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">MouseMotionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> str <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作业：界面上有一个图片，鼠标可以将图片从一个地方拖动到另一个地方。</p><p>作业：界面上有10个图片，鼠标可以将某个图片从一个地方拖动到另一个地方。</p><ul><li>&#x3D;&#x3D;<strong>KeyListener</strong>&#x3D;&#x3D;：监听键盘输入时要响应的事件（如俄罗斯方块）</li></ul><p>[例]使用键盘上的上下左右键，能控制界面上一个图片的上下左右移动。</p><p>[注意]<strong>键盘事件一般被更大的容器先截获</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Icon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>icon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>icon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键盘事件应通过界面截获</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> keyCode <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>keyCode<span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Y</span><span class="token operator">-=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode<span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_DOWN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Y</span><span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode<span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_LEFT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">X</span><span class="token operator">-=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode<span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>VK_RIGHT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">X</span><span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[综合例题]界面中一个图片掉下，鼠标进入，暂停，离开，继续掉。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventTest</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span><span class="token class-name">MouseListener</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> RUN <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Icon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>icon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>icon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>RUN <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>RUN <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>RUN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Y</span><span class="token operator">+=</span><span class="token number">20</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">EventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>AdjustmentListener：监听一些具有调整功能的控件（如滚动条）</p></li><li><p>FocusListener：监听当控件获得或者失去焦点时要响应的事件</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220420230534660.png" alt="image-20220420230534660" style="zoom:67%;" /></li></ul><p>​如焦点到一行时上面的提示信息消失，移除后提示信息继续存在。</p><h2 id="8-7-Java绘图"><a href="#8-7-Java绘图" class="headerlink" title="8.7 Java绘图"></a>8.7 Java绘图</h2><h3 id="8-7-1-绘制基本图形"><a href="#8-7-1-绘制基本图形" class="headerlink" title="8.7.1 绘制基本图形"></a>8.7.1 绘制基本图形</h3><p>用控件组成的界面，一般叫做高级界面；纯粹用绘画方式组成的界面，一般叫做低级界面。</p><p>低级界面开发的原理：<strong>以面板为画布，画布上画内容，将画布放在JFrame上，画布单独编写一个类</strong>。</p><p>预备知识：</p><ul><li>画布上画内容，将该工作重写在从父类继承过来的paint函数中</li><li><strong>paint函数会自动调用</strong>；如果手工调用，只能用<strong>repaint</strong>函数</li><li>具体画图，采用paint函数中的Graphics参数（<strong>相当于画笔</strong>）</li></ul><blockquote><p>注意：Graphics有一个子类Graphics2D，画笔可以<strong>直接转换</strong>成该类型，Graphics2D内拥有更加丰富的画笔功能</p></blockquote><p>基础演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置粗细</span>g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例1]界面上，不断随机位置出现随机颜色的线段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]界面上，鼠标拖动，可以连续画线。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">MouseMotionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">X</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Y</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数(int x,int y,int width,int height)函数用当前颜色填充由指定矩形界定的椭圆</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-7-2-绘制图像"><a href="#8-7-2-绘制图像" class="headerlink" title="8.7.2 绘制图像"></a>8.7.2 绘制图像</h3><p>绘制图像，使用的是画笔的<strong>drawImage</strong>函数。</p><ul><li><strong>原图绘制</strong>：drawImage(Image img,int x,int y, ImageObserver observer) </li><li><strong>原图缩放绘制</strong>：drawImage(Image img,int x,int y,<strong>int width,int height</strong>, ImageObserver observer)</li></ul><p>基础演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]一个图像，在界面上渐渐放大。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">X</span><span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token class-name">Y</span><span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>截取图像部分绘制</strong>：drawImage(Image img,<br>                                                   int dx1,int dy1,int dx2,int dy2,   &#x2F;&#x2F;d指<strong>destination</strong><br>                                                                     int sx1,int sy1,int sx2,int sy2, &#x2F;&#x2F;s指<strong>source</strong><br>                                                                     ImageObserver observer)</li></ul><p>[例]将原图的左边一半，右边一半，上面一半，下面一半分别绘制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>              img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-7-3-图像旋转"><a href="#8-7-3-图像旋转" class="headerlink" title="8.7.3 图像旋转"></a>8.7.3 图像旋转</h3><p>利用<strong>rotate</strong>函数。  rotate(double theta,double x,double y)</p><ul><li>theta - 以弧度表示的旋转角度（顺时针）</li><li>x - 旋转原点的x坐标 </li><li>y - 旋转原点的y坐标</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token operator">+</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token operator">+</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]图像边移动边旋转。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token class-name">Image</span> img <span class="token operator">=</span> <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token class-name">X</span><span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实现之前经过的图像不在界面上显示</span>g2d<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span><span class="token class-name">X</span><span class="token operator">+</span>img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span><span class="token class-name">X</span><span class="token operator">+</span>img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Paint1</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">MyCanvas</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Paint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ch9-Java网络编程"><a href="#ch9-Java网络编程" class="headerlink" title="ch9.Java网络编程"></a>ch9.Java网络编程</h1><h2 id="9-1-网络基础知识"><a href="#9-1-网络基础知识" class="headerlink" title="9.1 网络基础知识"></a>9.1 网络基础知识</h2><p>网络中有两个重要的协议，分别是：</p><ul><li><p>TCP：传输控制协议  面向连接      打电话</p></li><li><p>UDP：数据包协议面向数据包发短信</p></li></ul><p>使用较多的是TCP。</p><p>网络应用程序有微信、QQ、抖音、浏览器等，Java网络编程讲解的是这些网络应用程序最底层的内容。</p><p>有两种服务器和客户端的通信模式：</p><ul><li><p><strong>C&#x2F;S模式</strong>：客户端&#x2F;服务器 客户安装应用程序，和服务器通信  微信、QQ</p></li><li><p><strong>B&#x2F;S模式</strong>：浏览器&#x2F;服务器 客户端安装<strong>浏览器</strong>，和服务器通信      <a href="http://www.csu.edu.cn在浏览器中运行/">www.csu.edu.cn在浏览器中运行</a></p></li></ul><p>信息通过<strong>客户端</strong>和服务器通信，客户端之间的通信，靠<strong>服务器</strong>转发；故网络应用程序，一定要分为客户端和服务器程序。</p><p>网络上的计算机靠<strong>IP地址</strong>来定位，<strong>出现在客户端</strong>。</p><p>用端口号（port）确定不同的网络应用程序类型，<strong>由服务器决定</strong>：</p><p>端口号用数字表示，一般0-65535之间，有些非常常见的应用程序，已经预设了端口号：HTTP（浏览器：80），FTP（21）等等。一般应用程序，建议使用<strong>4位数端口号</strong>，以免冲突</p><h2 id="9-2-单个客户端连接服务器"><a href="#9-2-单个客户端连接服务器" class="headerlink" title="9.2 单个客户端连接服务器"></a>9.2 单个客户端连接服务器</h2><p>场景：客户端给服务器发送一句：你好，服务器回应，欢迎。</p><p>客户端连接服务器的步骤如下：&#x3D;&#x3D;[使用<strong>java.net包</strong>]&#x3D;&#x3D;</p><ul><li>1：服务器先运行，确定端口号</li><li>2：客户端通过服务器IP地址+端口号，连上</li><li>3：通信</li></ul><p>运用到的类如下：</p><ul><li>ServerSocket：<strong>启动服务器；接受客户端连接</strong></li><li>Socket：            客户端连上服务器，双方通信</li></ul><p>Server1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎你连上服务器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好,我是客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例1]客户端和服务器互相聊天：</p><p>客户端和服务器都有文本框，输入内容，回车（ActionListener），信息发给对方显示；反过来也支持。</p><p>Server2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span><span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"服务器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器说:"</span> <span class="token operator">+</span> jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span><span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端说:"</span> <span class="token operator">+</span> jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2·<strong>B&#x2F;S典型例子</strong>]客户端给服务器发信息，如果发N字母，服务器发给客户端一个随机数字；如果发M字母，服务器给客户端发送一个欢迎文本。</p><p>Server3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"服务器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字:"</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文本:欢迎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span><span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"客户端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3-多个客户端连接服务器"><a href="#9-3-多个客户端连接服务器" class="headerlink" title="9.3 多个客户端连接服务器"></a>9.3 多个客户端连接服务器</h2><p>应用场合：<strong>多个客户端连上服务器</strong>，客户端之间的通信依靠服务器转发。</p><h3 id="9-3-1-服务器端群聊案例"><a href="#9-3-1-服务器端群聊案例" class="headerlink" title="9.3.1 服务器端群聊案例"></a>9.3.1 服务器端群聊案例</h3><p>[例1]多个客户端连上服务器：服务器端有一个界面，界面上有一个多行文本框，多个客户端连接，连上就在服务器显示“有人连上” 。</p><p>Server1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"有人连上！！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.148"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]<strong>服务器端群聊</strong>：每个客户端都可以输入信息，回车发送，发送之后的信息，在服务器端显示。</p><p>类中类，多线程，每个客户端连接对应一个线程。</p><p>Server2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"请您输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.148"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nickName <span class="token operator">+</span> <span class="token string">"说:"</span> <span class="token operator">+</span> jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-2-客户端群聊案例"><a href="#9-3-2-客户端群聊案例" class="headerlink" title="9.3.2 客户端群聊案例"></a>9.3.2 客户端群聊案例</h3><p>[例3]<strong>客户端群聊</strong>：每个客户端都可以输入信息，回车发送，发送之后的信息，在每个客户端显示[<strong>服务器转发</strong>]。</p><p>Server3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一维变长数组,存放ChatThread类型变量</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ChatThread</span> ct <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span><span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"请您输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.148"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nickName <span class="token operator">+</span> <span class="token string">"说:"</span> <span class="token operator">+</span> jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例4]<strong>客户端群聊</strong>：每个客户端增加一个按钮，点击按钮，该客户端下线。其他客户端显示该客户端下线的消息。</p><p>Server4.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"NICK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   nickName <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"XIAXIAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传递</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ChatThread</span> ct <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>nickName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"下线啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ChatThread</span> ct <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client4.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span><span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"下线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextField</span> jtf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JTextArea</span> jta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jta<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jtf<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jtf<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"请您输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.148"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NICK:"</span><span class="token operator">+</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jta<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>jtf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nickName <span class="token operator">+</span> <span class="token string">"说:"</span> <span class="token operator">+</span> jtf<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XIAXIAN:"</span> <span class="token operator">+</span> nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另例：客户端群聊：每个客户端增加一个按钮，点击按钮，该客户端下线。其他客户端显示该客户端下线的消息——服务器要对信息进行分类处理。</p></blockquote><h3 id="9-3-3-客户端私聊案例"><a href="#9-3-3-客户端私聊案例" class="headerlink" title="9.3.3 客户端私聊案例"></a>9.3.3 客户端私聊案例</h3><p>客户端还要显示在线客户名单，每个客户端可以选择某人，输入信息，回车发送，发送之后的信息，在指定客户端显示。</p><ul><li><p>每个用户登录，用户昵称发给服务器，服务器转发给客户端显示用户列表</p></li><li><p>客户端选择人员之后，私聊对象的昵称发给服务器端，服务器端不再将聊天信息转发给所有客户端，而发给特定的客户端（加一个判断）</p></li></ul><p>Server1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span><span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">List</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"远程关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> selectedUser <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"LOGOUT:"</span><span class="token operator">+</span>selectedUser<span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> cts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nickName <span class="token operator">=</span> msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LOGIN:"</span><span class="token operator">+</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGOUT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"您被踢出！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-4-用户管理和控制"><a href="#9-4-用户管理和控制" class="headerlink" title="9.4 用户管理和控制"></a>9.4 用户管理和控制</h2><p>服务器可以监控各个客户端。</p><p>两个客户端输入昵称，连接到服务器，服务器显示昵称列表。选择某人，将其远程关闭</p><ul><li>定义客户端连接的信息格式为：LOGIN:昵称</li><li>定义让某个客户端下线信息格式为：LOGOUT:昵称</li></ul><p>Server1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span><span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">List</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"远程关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> selectedUser <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"LOGOUT:"</span><span class="token operator">+</span>selectedUser<span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> cts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nickName <span class="token operator">=</span> msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client1.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LOGIN:"</span><span class="token operator">+</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGOUT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"您被踢出！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例1]两个客户端，每个客户端有一个图像掉下来，服务器端可以控制相应客户端暂停或继续。</p><p>定义客户端连接的信息格式为：LOGIN:昵称</p><ul><li>定义暂停为：ZT:昵称</li><li>定义继续为：JX:昵称</li></ul><p>Server2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span><span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">List</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"暂停"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JButton</span> jbt2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"继续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jbt2<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>jbt<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jbt2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> selectedUser <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>jbt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> msg <span class="token operator">=</span> <span class="token string">"ZT:"</span><span class="token operator">+</span>selectedUser<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> msg <span class="token operator">=</span> <span class="token string">"JX:"</span><span class="token operator">+</span>selectedUser<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> cts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selectedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nickName <span class="token operator">=</span> msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client2.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageThread</span> it <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Icon</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>icon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>icon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LOGIN:"</span><span class="token operator">+</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ZT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>RUN <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"JX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ImageThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">boolean</span>  RUN <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>RUN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Y</span><span class="token operator">++</span><span class="token punctuation">;</span>       jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]两个客户端，服务器产生一个随机数，随机数从每个客户端掉下来，某一个先掉到底部，告知服务器，服务器重新产生随机数，两者同时从最上面掉下来。</p><p>定义客户端连接的信息格式为：LOGIN:昵称</p><ul><li>定义发送随机数为：SJS:数字</li><li>定义掉到底部为：DB:昵称</li></ul><p>Server3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Server</span>  <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">List</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ChatThread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChatThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ChatThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"LOGIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nickName <span class="token operator">=</span> msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>cts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> randStr <span class="token operator">=</span> <span class="token string">"SJS:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nickNames <span class="token operator">=</span> cts<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> nk <span class="token operator">:</span> nickNames<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">ChatThread</span> ct <span class="token operator">=</span> cts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nk<span class="token punctuation">)</span><span class="token punctuation">;</span>ct<span class="token punctuation">.</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>randStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client3.java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> nickName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">JLabel</span> jlb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">X</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageThread</span> it <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jlb<span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"欢迎参加本游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  jlb<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nickName <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">"输入昵称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"172.17.10.147"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LOGIN:"</span><span class="token operator">+</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"SJS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>jlb<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Y</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ImageThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">boolean</span>  RUN <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>RUN<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Y</span><span class="token operator">++</span><span class="token punctuation">;</span>       jlb<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Y</span><span class="token operator">>=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DB:"</span> <span class="token operator">+</span> nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>   <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附：JavaSE思维导图"><a href="#附：JavaSE思维导图" class="headerlink" title="附：JavaSE思维导图"></a>附：JavaSE思维导图</h1><p>期末考试题型：选择题、填空题、判断题、改错题、问答题、程序题。</p><table><thead><tr><th align="center">模块</th><th align="center">内容</th><th align="center">要点</th></tr></thead><tbody><tr><td align="center"><strong>Java语言基本语法</strong></td><td align="center">Java特点</td><td align="center">1、跨平台；2、运行的基本原理（代码用java文件，可执行文件是.class）；3、语法和C基本相同，没有指针；程序入口是main函数</td></tr><tr><td align="center"></td><td align="center">Java语法</td><td align="center">1、变量、数据类型：float和long定义比较特殊；各种数据类型的精度顺序，高精度不能直接赋值给低精度；不能用0和非0表示真假；变量的定义必须掌握；字符数据类型有转义字符，用 ?表示  2、运算：算术运算：+ - * &#x2F; % +&#x3D;   -&#x3D; *&#x3D; &#x2F;&#x3D; ++ – ; 关系运算：&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;；逻辑运算：&amp;&amp;</td></tr><tr><td align="center"><strong>面向对象基本概念</strong></td><td align="center">类和对象</td><td align="center">类的定义（要会编程）；由类来实例化对象原理；对象名的引用性质(理解对象名重新指向另一个对象的情况)</td></tr><tr><td align="center"></td><td align="center">成员变量和成员函数</td><td align="center">成员变量和成员函数的定义；通过对象访问成员变量成员函数（.号）；成员函数参数传递时的值传递和引用传递的区别（需要能够分析实例）</td></tr><tr><td align="center"></td><td align="center">特殊的成员变量和成员函数</td><td align="center">1、构造函数：定义方式、调用特点、垃圾收集机制  2、函数重载：三个条件满足其一即可  3、静态变量：定义方式、性质特点、如何调用(类名.或者对象名.来调用)  4、静态函数：定义方式（和静态变量类似）、性质特点（静态函数只能访问静态成员和函数中的局部变量）、如何调用(类名.或者对象名.来调用)  常见概念的英文形式必须要掌握  需要能够进行基本的编程</td></tr><tr><td align="center"><strong>面向对象基本特征</strong></td><td align="center">封装</td><td align="center">1、包：定义包（注意包的嵌套关系）；导入包中的类  2、类：public类（定义方式、特点）；普通类（定义方式、特点）  3、成员：四个访问控制符：public、protected、默认、private  理解它们的具体权限  需要能够进行基本的编程</td></tr><tr><td align="center"></td><td align="center">继承</td><td align="center">1、如何实现继承(extends)？Java继承的特点(只能使用继承的非private成员、Java不支持多重继承)  2、覆盖：如何编程才算覆盖（子类定义成员和父类名称、返回类类型、参数皆相同）？覆盖有什么特点（子类对象调用时，直接调用子类成员）和要求（不允许减小子类成员的权限）？  3、父类构造函数的初始化（子类实例化时，会自动调用父类的构造函数，如果父类构造函数带参数，必须用super(参数列表)初始化父类对象，代码写在子类构造函数的第1句）  4、this和super的用法和意义</td></tr><tr><td align="center"></td><td align="center">多态性</td><td align="center">1、多态性的定义：父类引用指向子类对象  Dialog d &#x3D; new FontDialog();  2、性质：该引用调用重写成员时，调用的是子类成员</td></tr><tr><td align="center"></td><td align="center">抽象类、接口等其他内容</td><td align="center">1、抽象类如何定义？含有抽象函数的类，类前用abstract修饰  2、抽象类有何性质？不能被实例化；可以有普通函数；里面抽象函数必须被重写（除非子类也是抽象类）  3、接口如何定义？和抽象类有何区别？interface，用implements来实现。可以实现多个接口；接口中所有的函数都是抽象函数，并且是public；所有变量都是public的静态的final的变量（常量）  4、Object类：Java中所有类的最高父类  5、final关键字：final变量、final函数、final类特点</td></tr><tr><td align="center"><strong>Java语言基本功能</strong></td><td align="center">异常</td><td align="center">1、try、catch、finally：匹配规则try(1)-catch(1..)-finally(0,1);程序运行的逻辑；了解Java中常见异常类和异常原因的对应（代码预测）：NullPointerException、NumberFormatException、IOException等等  2、throw、throws：掌握其使用的位置</td></tr><tr><td align="center"></td><td align="center">多线程</td><td align="center">1、定义线程（能写代码）：继承Thread、实现Runnable  Thread.sleep(XX);知道其用法  2、调用线程：启动线程：继承Thread、实现Runnable两类有不同的启动方法  3、控制线程：暂停和继续</td></tr><tr><td align="center"></td><td align="center">基本API</td><td align="center">1、java.lang：Math重点掌握随机数；String重点掌握字符串长度、字符串按位置访问函数；StringBuffer掌握和String的区别；基本数据类型的包装类掌握字符串和数值的互相转换  以上需要会编程  2、java.util：变长数组：List系列（子类）、Set系列（子类）、Map系列（子类）；掌握其区别；需要能够用它们解决实际问题（写伪代码）</td></tr><tr><td align="center"></td><td align="center">IO</td><td align="center">1、java.io包  2、File、FileInputStream、FileOutputStream、BufferedReader、PrintStream、RandomAccessFile各自的功能（不编程）</td></tr><tr><td align="center"><strong>Java语言界面开发</strong></td><td align="center">界面和控件</td><td align="center">javax.swing: 界面和控件，常见的必须知道意义  java.awt:颜色和字体</td></tr><tr><td align="center"></td><td align="center">布局</td><td align="center">java.awt:  FlowLayout&#x2F;BorderLayout&#x2F;GridLayout区别</td></tr><tr><td align="center"><strong>Java事件开发</strong></td><td align="center">事件开发</td><td align="center">java.awt.event包，按钮点击等简单事件用什么来监听，发出什么类型事件？</td></tr><tr><td align="center"><strong>Java绘图</strong></td><td align="center"></td><td align="center">Graphics、paint函数作用；repaint函数作用</td></tr><tr><td align="center"><strong>Java网络编程</strong></td><td align="center">基本概念</td><td align="center">IP地址、端口各自区别；服务器、客户端的区别</td></tr><tr><td align="center"></td><td align="center">具体实现</td><td align="center">java.net  ServerSocket\Socket各自作用；ServerSocket的accept函数的意义。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习记录</title>
      <link href="/2022/08/14/python02-zheng-ze-biao-da-shi-xue-xi-ji-lu/"/>
      <url>/2022/08/14/python02-zheng-ze-biao-da-shi-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、正则表达式作用"><a href="#一、正则表达式作用" class="headerlink" title="一、正则表达式作用"></a>一、正则表达式作用</h1><p>提取文本信息。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220814224704315.png" alt="image-20220814224704315"></p><p><strong>正则表达式验证网站</strong>：<a href="https://regex101.com/">https://regex101.com/</a></p><p><strong>Python学习网站</strong>：<a href="https://www.byhy.net/tut/py/extra/regex/">https://www.byhy.net/tut/py/extra/regex/</a></p><h1 id="二、正则表达式基础语法"><a href="#二、正则表达式基础语法" class="headerlink" title="二、正则表达式基础语法"></a>二、正则表达式基础语法</h1><h2 id="2-1-点-匹配所有字符"><a href="#2-1-点-匹配所有字符" class="headerlink" title="2.1 点-匹配所有字符"></a>2.1 点-匹配所有字符</h2><p><code>.</code> 表示要匹配除了 <code>换行符</code> 之外的任何 <code>单个</code> 字符。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000649238.png" alt="image-20220815000649238"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果是绿色的橙子是橙色的香蕉是黄色的乌鸦是黑色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.色'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-星号-重复匹配任意次"><a href="#2-2-星号-重复匹配任意次" class="headerlink" title="2.2 星号-重复匹配任意次"></a>2.2 星号-重复匹配任意次</h2><p><code>*</code> 表示匹配<strong>前面的子表达式</strong>任意次，包括0次。</p><p>比如，你要从下面的文本中，选择每行逗号后面的字符串内容，包括逗号本身。注意，这里的逗号是中文的逗号。</p><pre class="line-numbers language-none"><code class="language-none">苹果，是绿色的橙子，是橙色的香蕉，是黄色的乌鸦，是黑色的猴子，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以这样写正则表达式 <code>，.*</code> 。</p><p>在这里，紧跟在<code>.</code>后面，表示任意字符可以出现任意次， 所以整个表达式的意思就是在逗号后面的所有字符，包括逗号</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000704758.png" alt="image-20220815000704758"></p><h2 id="2-3-加号-重复匹配多次"><a href="#2-3-加号-重复匹配多次" class="headerlink" title="2.3 加号-重复匹配多次"></a>2.3 加号-重复匹配多次</h2><p><code>+</code> 表示匹配前面的子表达式一次或多次，不包括0次。</p><p>比如，下面的文本中，最后一行逗号后面 没有内容，就不要选择了。</p><pre class="line-numbers language-none"><code class="language-none">苹果，是绿色的橙子，是橙色的香蕉，是黄色的乌鸦，是黑色的猴子，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以这样写正则表达式 <code>，.+</code> 。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000719290.png" alt="image-20220815000719290"></p><h2 id="2-4-问号-匹配0-1次"><a href="#2-4-问号-匹配0-1次" class="headerlink" title="2.4 问号-匹配0-1次"></a>2.4 问号-匹配0-1次</h2><p><code>?</code> 表示匹配前面的子表达式0次或1次。</p><p>比如，还是上面的例子，你要从文本中，选择每行逗号后面的1个字符，也包括逗号本身。</p><pre class="line-numbers language-none"><code class="language-none">苹果，绿色的橙子，橙色的香蕉，黄色的乌鸦，黑色的猴子，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以这样写正则表达式 <code>，.?</code> 。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000734825.png" alt="image-20220815000734825"></p><h2 id="2-5-花括号-匹配指定次数"><a href="#2-5-花括号-匹配指定次数" class="headerlink" title="2.5 花括号-匹配指定次数"></a>2.5 花括号-匹配指定次数</h2><p>花括号表示前面的字符匹配<code>指定的次数</code> 。</p><p>比如 ，下面的文本</p><pre class="line-numbers language-none"><code class="language-none">红彤彤，绿油油，黑乎乎，绿油油油油<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达式 <code>油&#123;3&#125;</code> 就表示匹配 连续的 油 字 3次</p><p>表达式 <code>油&#123;3,4&#125;</code> 就表示匹配 连续的 油 字 至少3次，至多 4 次</p><p>就只能匹配 后面的，如下所示：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000752884.png" alt="image-20220815000752884"></p><h2 id="2-6-贪婪模式和非贪婪模式"><a href="#2-6-贪婪模式和非贪婪模式" class="headerlink" title="2.6 贪婪模式和非贪婪模式"></a>2.6 贪婪模式和非贪婪模式</h2><p>我们要把下面的字符串中的所有html标签都提取出来，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">source <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;head>&lt;title>Title&lt;/title>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到这样的一个列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'&lt;html>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;head>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;title>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/title>'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很容易想到使用正则表达式 <code>&lt;.*&gt;</code></p><p>写出如下代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">source <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;head>&lt;title>Title&lt;/title>'</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是运行结果，却是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'&lt;html>&lt;head>&lt;title>Title&lt;/title>'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么回事？ 原来 在正则表达式中， ‘*’, ‘+’, ‘?’ 都是贪婪地，使用他们时，会尽可能多的匹配内容，</p><p>所以， <code>&lt;.*&gt;</code> 中的 星号（表示任意次数的重复），一直匹配到了 字符串最后的 <code>&lt;/title&gt;</code> 里面的e。</p><p>解决这个问题，就<strong>需要使用非贪婪模式，也就是在星号后面加上 <code>?</code></strong> ，变成这样 <code>&lt;.*?&gt;</code></p><p>代码改为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">source <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;head>&lt;title>Title&lt;/title>'</span><span class="token keyword">import</span> re<span class="token comment"># 注意多出的问号</span>p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;.*?>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再运行一遍，就可以了。</p><h2 id="2-7-对元字符的转义"><a href="#2-7-对元字符的转义" class="headerlink" title="2.7 对元字符的转义"></a>2.7 对元字符的转义</h2><p>反斜杠 <code>\</code> 在正则表达式中有多种用途。</p><h3 id="2-7-1-要搜索的内容包含元字符"><a href="#2-7-1-要搜索的内容包含元字符" class="headerlink" title="2.7.1 要搜索的内容包含元字符"></a>2.7.1 要搜索的内容包含元字符</h3><p>比如，我们要在下面的文本中搜索 所有点前面的字符串，也包含点本身</p><pre class="line-numbers language-none"><code class="language-none">苹果.是绿色的橙子.是橙色的香蕉.是黄色的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果，我们这样写正则表达式 <code>.*.</code> ，显然是有问题的。</p><p>因为 点 是一个 元字符， 直接出现在正则表达式中，表示匹配任意的单个字符， 不能表示 . 这个字符本身的意思了。</p><p>怎么办呢？</p><p>如果我们要搜索的内容本身就包含元字符，就可以使用 反斜杠进行转义。</p><p>这里我们就应用使用这样的表达式： <code>.*\.</code></p><p>示例，Python程序如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果.是绿色的橙子.是橙色的香蕉.是黄色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.*\.'</span><span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">苹果.橙子.香蕉.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-7-2-匹配某种字符类型"><a href="#2-7-2-匹配某种字符类型" class="headerlink" title="2.7.2 匹配某种字符类型"></a>2.7.2 匹配某种字符类型</h3><p>反斜杠后面接一些字符，表示匹配 <code>某种类型</code> 的一个字符。</p><p>比如：</p><p><code>\d</code> 匹配**<code>0-9</code>之间任意一个数字字符**，等价于表达式 <code>[0-9]</code></p><p><code>\D</code> 匹配任意一个不是<code>0-9</code>之间的数字字符，等价于表达式 <code>[^0-9]</code></p><p><code>\s</code> 匹配任意一个空白字符，包括 空格、<code>tab</code>、换行符等，等价于表达式 <code>[\t\n\r\f\v]</code></p><p><code>\S</code> 匹配任意一个非空白字符，等价于表达式 <code>[^ \t\n\r\f\v]</code></p><p><code>\w</code> 匹配任意一个<strong>文字字符</strong>，包括<strong>大小写字母、数字、下划线</strong>，等价于表达式 <code>[a-zA-Z0-9_]</code>【经常用于用户注册】</p><p>缺省情况也包括<code>Unicode</code>文字字符，如果指定<code>ASCII</code>码标记：<code>p = re.compile(r&#39;\w&#123;2,4&#125;&#39;,re.A)</code>，则只包括<code>ASCII</code>字母</p><p><code>\W</code> 匹配任意一个非文字字符，等价于表达式 <code>[^a-zA-Z0-9_]</code></p><p>反斜杠也可以用在方括号里面，比如<code>[\s,.]</code>表示匹配 ： 任何空白字符， 或者逗号，或者点</p><h2 id="2-8-方括号-匹配几个字符之一"><a href="#2-8-方括号-匹配几个字符之一" class="headerlink" title="2.8 方括号-匹配几个字符之一"></a>2.8 方括号-匹配几个字符之一</h2><p>方括号表示要匹配 指定的几个字符之一 。</p><p>比如：</p><p><code>[abc]</code> 可以匹配 <code>a</code>, <code>b</code>或者<code>c</code>里面的任意一个字符。等价于 <code>[a-c]</code> 。</p><p><code>[a-c]</code> 中间的 - 表示一个范围从<code>a</code>到<code>c</code>。</p><p>如果你想匹配所有的小写字母，可以使用 <code>[a-z]</code>。</p><p><strong>一些元字符在方括号内失去了魔法，变得和普通字符一样了。</strong></p><p>比如：</p><p><code>[akm.]</code> 匹配 <code>a k m .</code> 里面任意一个字符</p><p>这里 <strong><code>.</code> 在括号里面不再表示匹配任意字符了</strong>，而就是表示匹配 <code>.</code> 这个 字符</p><hr><p>如果在方括号中使用 <code>^</code> ， 表示 <code>非</code> 方括号里面的字符集合。</p><p>比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token string">'a1b2c3d4e5'</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[^\d]'</span> <span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>[^\d]</code> 表示，选择非数字的字符</p><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">abcde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-9-起始、结尾位置和单行、多行模式"><a href="#2-9-起始、结尾位置和单行、多行模式" class="headerlink" title="2.9 起始、结尾位置和单行、多行模式"></a>2.9 起始、结尾位置和单行、多行模式</h2><p><code>^</code> 表示<strong>匹配文本的 <code>开头</code> 位置</strong>，<code>$</code> 表示<strong>匹配文本的 <code>结尾</code> 位置</strong>。</p><p>正则表达式可以设定 <code>单行模式</code> 和 <code>多行模式</code></p><p>如果是 <code>单行模式</code> ，表示匹配 <code>整个文本</code> 的开头位置。</p><p>如果是 <code>多行模式</code> ，表示匹配 <code>文本每行</code> 的开头位置。</p><p>比如，下面的文本中，每行最前面的数字表示水果的编号，最后的数字表示价格</p><pre class="line-numbers language-none"><code class="language-none">001-苹果价格-60，002-橙子价格-70,003-香蕉价格-80,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们要提取所有的水果编号，用这样的正则表达式 <code>^\d+</code></p><p>上面的正则表达式，使用在<code>Python</code>程序里面，如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''001-苹果价格-60002-橙子价格-70003-香蕉价格-80'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\d+'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：**<code>compile</code>的第二个参数<code>re.M</code>，指明了使用多行模式**。</p></blockquote><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">001002003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果，去掉<code>compile</code>的第二个参数<code>re.M</code>， 运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就只有第一行了。</p><p>因为单行模式下，<code>^</code> 只会匹配整个文本的开头位置，<code>$</code> 表示匹配文本的 <code>结尾</code> 位置。</p><p>如果是 <code>单行模式</code> ，表示匹配 <code>整个文本</code> 的结尾位置。</p><p>如果是 <code>多行模式</code> ，表示匹配 <code>文本每行</code> 的结尾位置。</p><p>比如，下面的文本中，每行最前面的数字表示水果的编号，最后的数字表示价格</p><pre class="line-numbers language-none"><code class="language-none">001-苹果价格-60，002-橙子价格-70,003-香蕉价格-80,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们要提取所有的水果编号，用这样的正则表达式 <code>\d+$</code></p><p>对应代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''001-苹果价格-60002-橙子价格-70003-香蕉价格-80'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+$'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，compile 的第二个参数<code>re.MULTILINE</code>，指明了使用多行模式，</p><p>运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">607080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果，去掉<code>compile</code>的第二个参数<code>re.MULTILINE</code>， 运行结果如下</p><pre class="line-numbers language-none"><code class="language-none">80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就只有最后一行了。</p><p>因为单行模式下，<code>$</code>只会匹配整个文本的结束位置。</p><h2 id="2-10-竖线-匹配其中之一"><a href="#2-10-竖线-匹配其中之一" class="headerlink" title="2.10 竖线-匹配其中之一"></a>2.10 竖线-匹配其中之一</h2><p>竖线表示匹配其中之一 。</p><p>比如 ，</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000806296.png" alt="image-20220815000806296"></p><p>特别要注意的是， 竖线在正则表达式的优先级是最低的， 这就意味着，竖线隔开的部分是一个整体</p><p>比如 <code>绿色|橙</code> 表示 要匹配是 <code>绿色</code> 或者 <code>橙</code> ，</p><p>而不是 <code>绿色</code> 或者 <code>绿橙</code>。</p><h2 id="2-11-括号-分组"><a href="#2-11-括号-分组" class="headerlink" title="2.11 括号-分组"></a>2.11 括号-分组</h2><p>括号称之为<strong>正则表达式的组选择</strong>。</p><p><code>组</code> 就是把<strong>正则表达式匹配的内容里面 <code>其中的某些部分</code> 标记为某个组</strong>。</p><p>我们可以在正则表达式中标记<code>多个</code>组。</p><p>为什么要有组的概念呢？因为我们往往需要提取已经匹配的 内容里面的 某些部分的信心。</p><p>前面，我们有个例子，从下面的文本中，选择每行逗号<strong>前面</strong>的字符串，也 <code>包括逗号本身</code> 。</p><pre class="line-numbers language-none"><code class="language-none">苹果，苹果是绿色的橙子，橙子是橙色的香蕉，香蕉是黄色的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就可以这样写正则表达式 <code>^.*，</code> 。</p><p>但是，如果我们要求 <strong>不要包括逗号</strong> 呢？</p><p>当然不能直接 这样写 <code>^.*</code></p><p>因为最后的逗号是<strong>特征</strong>所在， 如果去掉它，就没法找 逗号前面的了。</p><p>但是把逗号放在正则表达式中，又会包含逗号。</p><p>解决问题的方法就是使用 组选择符 ： 括号。</p><p>我们这样写 <code>^(.*)，</code> ，结果如下</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220815000820723.png" alt="image-20220815000820723"></p><p>可以发现，我们把要从整个表达式中提取的部分放在括号中，这样 水果 的名字 就被单独的放在组<code>group</code>中了。</p><p>对应的Python代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''苹果，苹果是绿色的橙子，橙子是橙色的香蕉，香蕉是黄色的'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^(.*)，'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span>  p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分组还可以多次使用。</p><p>比如，我们要从下面的文本中，提取出每个人的 名字 和对应的 手机号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">张三，手机号码<span class="token number">15945678901</span>李四，手机号码<span class="token number">13945677701</span>王二，手机号码<span class="token number">13845666901</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用这样的正则表达式 <code>^(.+)，.+(\d&#123;11&#125;)</code></p><p>可以写出如下的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''张三，手机号码15945678901李四，手机号码13945677701王二，手机号码13845666901'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^(.+)，.+(\d&#123;11&#125;)'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> p<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的是多个元组，元组包含有多个元素。</p><p>当有多个分组的时候，我们可以使用 <code>(?P&lt;分组名&gt;...)</code> 这样的格式，给每个分组命名。</p><p>这样做的好处是，更方便后续的代码提取每个分组里面的内容</p><p>比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">content <span class="token operator">=</span> <span class="token triple-quoted-string string">'''张三，手机号码15945678901李四，手机号码13945677701王二，手机号码13845666901'''</span><span class="token keyword">import</span> rep <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^(?P&lt;name>.+)，.+(?P&lt;phone>\d&#123;11&#125;)'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、正则表达式高级应用"><a href="#三、正则表达式高级应用" class="headerlink" title="三、正则表达式高级应用"></a>三、正则表达式高级应用</h1><h2 id="3-1-切割字符串"><a href="#3-1-切割字符串" class="headerlink" title="3.1 切割字符串"></a>3.1 切割字符串</h2><p>字符串 对象的 <code>split</code> 方法只适用于 简单的字符串分割。 有时，你需要更加灵活的字符串切割。</p><p>比如，我们需要从下面字符串中提取武将的名字。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">names <span class="token operator">=</span> <span class="token string">'关羽; 张飞, 赵云,马超, 黄忠  李逵'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们发现这些名字之间， 有的是分号隔开，有的是逗号隔开，有的是空格隔开， 而且分割符号周围还有不定数量的空格</p><p>这时，可以使用正则表达式里面的<code>split</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> renames <span class="token operator">=</span> <span class="token string">'关羽; 张飞, 赵云,   马超, 黄忠  李逵'</span>namelist <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r'[;,\s]\s*'</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>namelist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则表达式 <code>[;,\s]\s*</code> 指定了，分割符为 分号、逗号、空格 里面的任意一种均可，并且 该符号周围可以有不定数量的空格。</p><h2 id="3-2-指定替换函数"><a href="#3-2-指定替换函数" class="headerlink" title="3.2 指定替换函数"></a>3.2 指定替换函数</h2><p>我们要求，替换后的内容 的是原来的数字+6， 比如 <code>/av66771949/</code> 替换为 <code>/av66771955/</code> 。</p><p>这种更加复杂的替换，我们可以把 sub的第2个参数 <code>指定为一个函数</code> ，该函数的返回值，就是用来替换的字符串。</p><p>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> renames <span class="token operator">=</span> <span class="token triple-quoted-string string">'''下面是这学期要学习的课程：&lt;a href='https://www.bilibili.com/video/av66771949/?p=1' target='_blank'>点击这里，边看视频讲解，边学习以下内容&lt;/a>这节讲的是牛顿第2运动定律&lt;a href='https://www.bilibili.com/video/av46349552/?p=125' target='_blank'>点击这里，边看视频讲解，边学习以下内容&lt;/a>这节讲的是毕达哥拉斯公式&lt;a href='https://www.bilibili.com/video/av90571967/?p=33' target='_blank'>点击这里，边看视频讲解，边学习以下内容&lt;/a>这节讲的是切割磁力线'''</span><span class="token comment"># 替换函数，参数是Match对象</span><span class="token keyword">def</span> <span class="token function">subFunc</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Match对象的group(0) 返回的是整个匹配上的字符串， </span>    src <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># Match对象的group(1) 返回的是第一个group分组的内容</span>    number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span>    dest <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'/av</span><span class="token interpolation"><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span></span><span class="token string">/'</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>src<span class="token punctuation">&#125;</span></span><span class="token string"> 替换为 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dest<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token comment"># 返回值就是最终替换的字符串</span>    <span class="token keyword">return</span> destnewStr <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'/av(\d+)/'</span><span class="token punctuation">,</span> subFunc <span class="token punctuation">,</span> names<span class="token punctuation">)</span>   <span class="token comment">#第二个参数代表函数名</span><span class="token keyword">print</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取组内字符串，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 获取整个匹配字符串</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 获取第1个组内字符串</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 获取第2个组内字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Python 3.6</code>以后的版本 ，写法也可以更加简洁，直接像列表一样使用下标，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这个例子中：</p><p>正则表达式<code>re.sub</code>函数执行时， <code>每发现一个</code> 匹配的子串， 就会：</p><ul><li><p>实例化一个<code>match</code>对象</p><p>这个<code>match</code>对象包含了这次匹配的信息， 比如：整个字符串是什么，匹配部分字符串是什么，里面的各个group分组 字符串是什么</p></li><li><p>调用执行<code>sub</code>函数的第2个参数对象，也就是调用回调函数<code>subFunc</code></p><p>并且把刚才产生的<code>match</code>对象作为参数传递给<code>subFunc</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理(一) 数据库系统与SQL</title>
      <link href="/2022/08/14/li-lun-03-shu-ju-ku-yuan-li-yi/"/>
      <url>/2022/08/14/li-lun-03-shu-ju-ku-yuan-li-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="ch1-数据库系统概述"><a href="#ch1-数据库系统概述" class="headerlink" title="ch1.数据库系统概述"></a>ch1.数据库系统概述</h1><h2 id="1-1-数据模型"><a href="#1-1-数据模型" class="headerlink" title="1.1 数据模型"></a>1.1 数据模型</h2><h3 id="1-1-1-分类"><a href="#1-1-1-分类" class="headerlink" title="1.1.1 分类"></a>1.1.1 分类</h3><ul><li>网状模型（图）</li><li>层次模型（树形结构）</li><li><strong>关系模型</strong>（二维表）</li></ul><h3 id="1-1-2-组成要素"><a href="#1-1-2-组成要素" class="headerlink" title="1.1.2 组成要素"></a>1.1.2 组成要素</h3><ul><li><strong>数据结构</strong>：研究对象类型的集合。对象：与数据类型、内容、性质有关的对象（<strong>物质</strong>）、与数据之间<strong>联系</strong>（物质之间的联系）有关的对象。</li><li><strong>数据操作</strong>：类型有检索、更新（插入、删除、修改）等。</li><li><strong>数据的约束条件（完整约束性）</strong>：一组完整性规则的集合，需满足<strong>实体完整性</strong>和<strong>参照完整性</strong>。</li></ul><h3 id="1-1-3-概念模型"><a href="#1-1-3-概念模型" class="headerlink" title="1.1.3 概念模型"></a>1.1.3 概念模型</h3><p>用于信息世界的建模，是现实世界到机器世界的一个中间层次，是数据库设计的有力工具，是数据库设计人员和用户之间进行交流的语言。</p><p>信息世界中的基本概念有：</p><p><strong>实体</strong>(Entity)：客观存在并可相互区别的事物称为实体。[矩形框]</p><p><strong>属性</strong>(Attribute)：实体所具有的某一特性称为属性，一个实体可以由若干个属性来刻画。如学生可由学号、姓名，性别、系别、入学时间等属性来描述。[椭圆形]</p><p><strong>码</strong>(Key)：<strong>能唯一标识实体的属性集</strong>称为码。（一个或多个属性，如学生可以通过学号唯一区分）</p><p><strong>域</strong>(Domain)：属性的<strong>取值范围</strong>称为该属性的域。（如成绩0-100分）</p><p><strong>实体型</strong>(Entity Type):用实体名及其属性集来抽象和刻画，同类实体称为实体型。如：学生（学号，姓名，性别，出生年….)</p><p><strong>实体集</strong>(Entity Set):同型实体的集合称为实体集。</p><p><strong>联系</strong>(Relationship):现实世界中事物内部以及事物之间的联系在信息世界中反映为<strong>实体内部的联系和实体之间的联系</strong>。[菱形，填入联系的名字]</p><p>如下图所示，有<strong>一对一、一对多、多对多</strong>的三种关系。实体名（如仓库）用矩形框表示，属性（如联系为库存，其属性为仓库存取零件的数量）用椭圆形表示，联系用菱形框表示，<strong>ER图</strong>（实体-联系图(Entity-Relationship Diagram)）用<strong>无向边</strong>连接。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220224165754825.png" alt="image-20220224165754825" style="zoom:67%;" /><p>一个实体转化成一个关系数据库中的一张表，一张表就是一个关系模式，新建表来表示联系。<strong>相联系的两个实体的码及自己的属性均作为联系的表的属性。</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220224172151782.png" alt="image-20220224172151782"></p><p>在这里，指的是仓库号、零件号、库存量。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> kucun<span class="token punctuation">(</span>lingjianID <span class="token keyword">int</span><span class="token punctuation">,</span>    cangkuID <span class="token keyword">int</span><span class="token punctuation">,</span>    kucun <span class="token keyword">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据：<code>insert into kucun values (1,1,8)</code></p><p>其他步骤如下：</p><p>创建表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> cangku<span class="token punctuation">(</span>cangkuID <span class="token keyword">int</span><span class="token punctuation">,</span>Cname <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span>yy <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据：<code>insert into cangku values (1,&#39;dddd&#39;,&#39;kkk&#39;);</code></p><p>修改数据：</p><p><code>update kucun set kucun=kucun-8 where cangkuID=3 and lingjianID=1</code></p><p>还可以通过设置主码<code>primary key</code>使实体不相同。</p><h2 id="1-2-关系模型"><a href="#1-2-关系模型" class="headerlink" title="1.2 关系模型"></a>1.2 关系模型</h2><p>下面介绍关系模型的相关术语。</p><ul><li><p><strong>关系模式</strong>：对关系的描述，一般形式为关系名(属性1,属性2,…,属性n)。如学生(学号,姓名,年龄,性别,系别,年级)。相当于概念模型中的实体型关系(Relation)：一个关系对应一张二维表。</p></li><li><p>&#x3D;&#x3D;<strong>元组</strong>&#x3D;&#x3D;(Tuple)：表中的一行即为一个元组。</p></li><li><p><strong>属性</strong>(Attribute)：表中的一列即为一个属性，每一属性都有一个属性名。</p></li><li><p>&#x3D;&#x3D;<strong>主码</strong>&#x3D;&#x3D;(Key)：表中的某个属性组，它可以唯一确定一个元组。</p></li><li><p><strong>域</strong>(Domain)：属性的取值范围。</p></li><li><p><strong>分量</strong>：元组中的一个属性值。</p></li></ul><p>​关系模型中存在<strong>数据操纵</strong>，包括查询、插入、删除、更新，这些操作是集合操作，操作对象和操作结果都是关系，即若干元组的集合；同时关系模型中存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”，大大提高了数据的独立性和用户生产率。</p><blockquote><p>完整性约束有实体完整性、参照完整性和用户定义的完整性三大类。前两个是关系模型必须满足的完整性约束条件，被称作是关系的两个不变性。</p></blockquote><p>关系模型的特点：</p><p> （1）优点：建立在严格的数学概念的基础上；概念单一，实体和联系都用关系表示，数据操作结果为关系；存取路径对用户透明。</p><p> （2）缺点：存取路径对用户透明导致查询效率往往不如非关系数据模型。为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度。</p><h2 id="1-3-数据库系统结构"><a href="#1-3-数据库系统结构" class="headerlink" title="1.3 数据库系统结构"></a>1.3 数据库系统结构</h2><h3 id="1-3-1-概念"><a href="#1-3-1-概念" class="headerlink" title="1.3.1 概念"></a>1.3.1 概念</h3><p>型(Type)：对某一类数据的结构和属性的说明。（如结构体，创建完不动）</p><p>值(Value)：是型的一个具体赋值。（经常变化）</p><p>模式(schema)：是数据库系统中全体数据的逻辑结构和特征的描述，是型。</p><p>【例】学生记录</p><p>记录型：(学号,姓名,性别,系别,年龄,籍贯)</p><p>该记录型的一个记录值：(210201,李明,男,计算机,22,江苏)</p><h3 id="1-3-2-数据库系统的三级模式结构"><a href="#1-3-2-数据库系统的三级模式结构" class="headerlink" title="1.3.2 数据库系统的三级模式结构"></a>1.3.2 数据库系统的三级模式结构</h3><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220303164626823.png" alt="image-20220303164626823" style="zoom: 67%;" /><p><strong>模式(Schema)<strong>：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，</strong>是所有用户的公共数据视图</strong>，综合了所有用户的需求，一个数据库只有一个模式。模式是数据库系统模式结构的中间层，与数据的物理存储细节和硬件环境无关，与具体的应用程序、开发工具及高级程序设计语言无关。</p><p><strong>外模式(External Schema)<strong>：也称子模式或用户模式，是数据库用户使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。外模式通常是模式的子集，一个数据库可以有多个外模式。同一外模式可以为某一用户的多个应用系统所使用，但一个应用程序只能使用一个外模式。外模式是保证数据库安全性的一个有力措施，</strong>每个用户只能看见和访问所对应的外模式中的数据。</strong></p><p>（1）外模式／模式映象：定义了外模式与模式之间的对应关系，每一个外模式都对应一个外模式／模式映象，该映象定义通常包含在各自外模式的描述中。</p><p>（2）外模式／模式映象保证了数据的<strong>逻辑独立性</strong>：当模式改变时，数据库管理员修改有关外模式／模式映象，使外模式保持不变；应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</p><p><strong>内模式(Internal Schema)<strong>：也称存储模式，是数据</strong>物理结构</strong>和存储方式的描述，是数据在数据库内部的表示方式，一个数据库只有一个内模式。</p><p>模式／内模式映象保证了数据的<strong>物理独立性</strong>：当数据库的存储结构改变了(例如选用了另一种存储结构)，数据库管理员修改模式／内模式映象，使模式保持不变，应用程序不受影响，保证了数据与程序的物理独立性，简称数据的物理独立性。</p><h1 id="ch2-关系数据库"><a href="#ch2-关系数据库" class="headerlink" title="ch2.关系数据库"></a>ch2.关系数据库</h1><p>关系数据语言能够嵌入高级语言中使用，是一种高度非过程化的语言，存取路径的选择由DBMS的优化机制来完成。</p><h2 id="2-1-关系数据结构"><a href="#2-1-关系数据结构" class="headerlink" title="2.1 关系数据结构"></a>2.1 关系数据结构</h2><h3 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1 概念"></a>2.1.1 概念</h3><p><strong>域</strong>(Domain)：是一组具有相同数据类型的值的集合。如整数、实数、介于某个取值范围的整数、指定长度字符串集合等。</p><p>（大写字母表示<strong>型</strong>，小写字母表示<strong>值</strong>）</p><p><strong>笛卡尔积</strong>(Cartesian Product)：给定一组域$D_{1},D_{2},\ldots,D_{n}$，这些域可以相同，$D_{1},D_{2},\ldots,D_{n}$的笛卡尔积为：$D_{1} \times D_{2} \times \ldots \times D_{n} &#x3D; \left{ \left( d_{1},d_{2},\ldots,d_{n} \right) \middle| d_{i} \in D_{i},i &#x3D; 1,2,\ldots,n \right}$</p><p><strong>元组</strong>(Tuple)：笛卡尔积中每一个元素$\left( d_{1},d_{2},\ldots,d_{n} \right)$。</p><p><strong>分量</strong>(Component)：笛卡尔积元素$\left( d_{1},d_{2},\ldots,d_{n} \right)$中的每个值$d_{i}$。</p><p><strong>基数</strong>(Cardinal number)：一个域允许的<strong>不同取值个数</strong>称为这个域的基数。若$D_{i}$(i＝1,2,…,n)为有限集，其基数为$m_{i}(i＝1,2,…,n)$，则$D_{1}×D_{2}×…×D_{n}$的基数M为：$M &#x3D; {\prod\limits_{i &#x3D; 1}^{n}m_{i}}$.</p><p><strong>关系</strong>：$D_{1} \times D_{2} \times \ldots \times D_{n}$的<strong>子集</strong>称为域$D_{1} , D_{2} , \ldots , D_{n}$上的关系，表示为$R(D_{1} , D_{2} , \ldots , D_{n})$，其中R为关系名，n是关系的<strong>目</strong>或<strong>度</strong>(Degree)。当n&#x3D;1时为单元关系，n&#x3D;2时为二元关系。关系中的每个元素是关系中的元组，通常用t表示。关系描述有意义的元组的集合。</p><p><strong>属性</strong>(Attribute)：关系是笛卡尔积的有限子集，所以关系也是一个二维表。关系中不同列可以对应相同的域，为了区分，必须对每列起一个名字，称为属性，n目关系必有n个属性。</p><p><strong>候选码</strong>(Candidate key)：若关系中某一属性组的值能唯一地标识一个元组，则称该属性组为候选码。若候选码包含了关系模式的所有属性，则称该候选码为<strong>全码</strong>(All-key)。</p><p><strong>主码</strong>(Primary key)：若一个关系有多个候选码，则选定其中的一个就称为主码，主码的诸属性称为主属性，不包含在任何候选码中的属性称为非主属性。在任一候选码中的属性都是主属性。</p><h3 id="2-1-2-关系的基本性质"><a href="#2-1-2-关系的基本性质" class="headerlink" title="2.1.2 关系的基本性质"></a>2.1.2 关系的基本性质</h3><p>列是同质的：每一列中的分量是同一类型的数据，来自同一域；</p><p>不同列可来自同一个域：不同列(属性)要给予不同的属性名；</p><p>列的顺序无所谓：列的次序可以任意交换；</p><p>任意两个元组不能完全相同：这是由笛卡尔积的性质决定的；</p><p>行的顺序无所谓：行的次序可以任意交换；</p><p>分量必须取原子值：每一个分量都必须是不可分的数据项。</p><h3 id="2-1-3-关系模式-Relation-Schema"><a href="#2-1-3-关系模式-Relation-Schema" class="headerlink" title="2.1.3 关系模式(Relation Schema)"></a>2.1.3 关系模式(Relation Schema)</h3><p>对关系的描述。关系模式是型（稳定不变），而关系是值（变化）。</p><p>关系模式的形式化表示：$R(U,D,dom,F)$</p><blockquote><p>其中：R为关系名，U为组成该关系的属性名集合，D为属性组U中属性所来自的域，dom为属性向域的映象集合，F为属性间的数据依赖关系集合。</p></blockquote><h2 id="2-2-关系的完整性"><a href="#2-2-关系的完整性" class="headerlink" title="2.2 关系的完整性"></a>2.2 关系的完整性</h2><p>关系模型中包括<strong>实体完整性、参照完整性</strong>（必须支持，被称作是<strong>关系的两个不变性</strong>）和用户定义的完整性三类完整性约束。</p><h3 id="2-2-1-实体完整性"><a href="#2-2-1-实体完整性" class="headerlink" title="2.2.1 实体完整性"></a>2.2.1 实体完整性</h3><p>&#x3D;&#x3D;<strong>主属性不能为空</strong>&#x3D;&#x3D;（在任何候选码中的属性都是主属性）。</p><h3 id="2-2-2-参照完整性"><a href="#2-2-2-参照完整性" class="headerlink" title="2.2.2 参照完整性"></a>2.2.2 参照完整性</h3><h4 id="2-2-2-1-外码-Foreign-Key"><a href="#2-2-2-1-外码-Foreign-Key" class="headerlink" title="2.2.2.1 外码(Foreign Key)"></a>2.2.2.1 外码(Foreign Key)</h4><p>设<strong>F是关系R的一个或一组属性</strong>（属性集），但不是关系R的码。如果F与关系S的主码Ks相对应，则称F是关系R的<strong>外码</strong>，关系R称为<strong>参照关系</strong>(Referencing Relation)，关系S称为<strong>被参照关系</strong>(Referenced Relation)或目标关系(Target Relation)。</p><blockquote><p>注：</p><ul><li>关系R和S不一定是不同的关系；</li><li>目标关系S的主码Ks和参照关系的外码F必须定义在同一个(或一组)域上；</li><li>外码并不一定要与相应的主码同名。</li></ul></blockquote><p>[例1]学生实体、专业实体以及专业与学生间的一对多联系。</p><p>   学生(<em><strong>学号</strong></em>,姓名,性别,专业号,年龄) </p><p>  专业(<em><strong>专业号</strong></em>,专业名)</p><p>[例2]学生、课程、学生与课程之间的多对多联系。</p><p>  学生(<em><strong>学号</strong></em>,姓名,性别,专业号,年龄)   </p><p>  课程(<em><strong>课程号</strong></em>,课程名,学分) </p><p>  选修(<em><strong>学号,课程号</strong></em>,成绩)</p><p>【解释】学号不是选修的码，学号与学生的主码有对应的关系，故学号是选修的外码。课程号同理。</p><p>[例3]学生实体及其内部的领导联系(一对多) 。 </p><p>  学生(<em><strong>学号</strong></em>,姓名,性别,专业号,年龄,<em><strong>班长</strong></em>)</p><h4 id="2-2-2-2-参照完整性规则"><a href="#2-2-2-2-参照完整性规则" class="headerlink" title="2.2.2.2 参照完整性规则"></a>2.2.2.2 参照完整性规则</h4><p>若属性(或属性组)F是基本关系R的外码，它与基本关系S的主码Ks相对应，则对于R中每个元组在F上的值必须：或者&#x3D;&#x3D;<strong>取空值</strong>&#x3D;&#x3D;(F的每个属性值均为空值)，或者等于S中&#x3D;&#x3D;<strong>某个元组的主码值</strong>&#x3D;&#x3D;。</p><p>比如专业号要么取空（还未安排，但因为它是主属性，实际上不能为空），要么是专业这个关系中专业号的某一个。</p><h3 id="2-2-3-用户定义的完整性"><a href="#2-2-3-用户定义的完整性" class="headerlink" title="2.2.3 用户定义的完整性"></a>2.2.3 用户定义的完整性</h3><p>如设定成绩不能大于100，即可通过<code>grade int check(grade&lt;=100)</code>来进行限制。</p><h2 id="2-3-关系代数"><a href="#2-3-关系代数" class="headerlink" title="2.3 关系代数"></a>2.3 关系代数</h2><p>常用的关系代数运算符有集合运算符、专门的关系运算符、算术比较符、逻辑运算符。</p><h3 id="2-3-1-集合运算"><a href="#2-3-1-集合运算" class="headerlink" title="2.3.1 集合运算"></a>2.3.1 集合运算</h3><p>（1）<strong>并</strong>(Union)：设R和S具有相同的目n(两个关系都有n个属性)，且相应的属性取自同一个域，则R∪S 仍为n目关系，由属于R或属于S的元组组成。$R∪S &#x3D; { t|t ∈ R∨t ∈S }$</p><p>（2）<strong>差</strong>(Difference)：设R和S具有相同目n，且相应的属性取自同一个域，则R - S仍为n目关系，由属于R而不属于S的所有元组组成。$R - S &#x3D; { t|t∈R∧t ∉S }$</p><p>（3）<strong>交</strong>(Intersection)：设R和S具有相同目n，且相应属性取自同一个域，则R∩S仍为n目关系，由既属于R又属于S的元组组成。$R∩S &#x3D; { t|t∈R∧t ∈S }\quad or \quad R∩S &#x3D; R –(R-S)$</p><p>（4）<strong>广义笛卡尔积</strong>(Extended Cartesian Product) ：设R为n目关系、k1个元组，S为m目关系、k2个元组，则R×S为n+m列的元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组，共有k1×k2个元组$R×S &#x3D;\left{ \hat{t_{r}t_{s}} \middle| t_{r} \in R \land t_{s} \in S \right}$.</p><p>广义笛卡尔积<strong>前半部分来自R，后半部分来自S</strong>。</p><p>【例】</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220308172559514.png" alt="image-20220308172559514" style="zoom: 50%;" /><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220330200058456.png" alt="image-20220330200058456" style="zoom: 67%;" /><h3 id="2-3-2-专门的关系运算符"><a href="#2-3-2-专门的关系运算符" class="headerlink" title="2.3.2 专门的关系运算符"></a>2.3.2 专门的关系运算符</h3><p>（1）$R,t \in R,t\left\lbrack A_{i} \right\rbrack$ ：设关系模式$R\left( A_{1},A_{2},\ldots,A_{n} \right)$的一个关系为R。t∈R表示t是R的一个元组，$\left. {t\left\lbrack A \right.}<em>{i} \right\rbrack$则表示元组t中相应于属性$A</em>{i}$的一个分量。 </p><p>（2）$A,t\left\lbrack A \right\rbrack,\overset{¯}{A}$ ：若$A &#x3D; \left{ A_{i1},A_{i2},\ldots,A_{ik} \right}$，$A_{i1},A_{i2},\ldots,A_{ik}$是$A_{1},A_{2},\ldots,A_{n}$中的一部分，则A称为属性列或域列。$t\left\lbrack A \right\rbrack &#x3D; \left( t\left\lbrack A_{i1} \right\rbrack,t\left\lbrack A_{i2} \right\rbrack,\ldots,t\left\lbrack A_{ik} \right\rbrack \right)$表示<strong>元组t在属性列A上诸分量的集合</strong>，$\overset{¯}{A}$则表示$\left{A_{1},A_{2},\ldots,A_{n}\right}$中去掉$\left{ A_{i1},A_{i2},\ldots,A_{ik} \right}$后剩余的属性组。</p><p>（3）<strong>元组的连接</strong>（$\hat{t_{r}t_{s}}$）：R为n目关系，S为m目关系。$t_{r} \in R$，$t_{s} \in S$，$\hat{t_{r}t_{s}}$称为元组的连接。它是一个n + m列的元组，前n个分量为R中的一个n元组，后m个分量为S中的一个m元组。</p><p>（4）<strong>象集</strong>(Images Set) $Z_{x}$：给定一个关系$R(X,Z)$，X和Z为属性组。当$t[X]&#x3D;x$时，x在R中的象集为：$Z_{x} &#x3D; \left{ t\left\lbrack Z \right\rbrack \middle| t \in R,t\left\lbrack X \right\rbrack &#x3D; x \right}$ ，它表示R中属性组X上值为x的诸元组在Z上分量的集合。即：<strong>在X上选择满足我设定的值，但取的是Z上各个元组的值</strong>。</p><p>（5）<strong>选择</strong>(Selection)：是从<strong>行的角度</strong>进行的运算，在关系R中选择满足给定条件的诸元组，记为$\sigma_{F}\left( R \right) &#x3D; \left{ t \middle| t \in R\bigwedge F\left( t \right) &#x3D;^{‘}真^{‘} \right}$，其中F是选择运算符，是一个逻辑表达式。</p><p>（6）<strong>投影</strong>(Projection)：从R中选择出若干<strong>属性列</strong>组成新的关系，记为$\pi_{A}\left( R \right) &#x3D; \left{ t\left\lbrack A \right\rbrack \middle| t \in R \right}$，其中A是R中的<strong>属性列</strong>。投影操作主要是从<strong>列的角度</strong>进行运算，但投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组(避免重复行)。如：查询学生的姓名和所在系别，可用语句：$\pi_{Sname,Sdept}\left( {Student} \right)$来完成。</p><p>（7）<strong>关于连接</strong>：</p><p>【1】<strong>连接</strong>(Join)：又称<strong>θ连接</strong>，是从两个关系的笛卡尔积中选取属性间满足一定条件的元组，记为  <img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/clip_image002.png" alt="img">，其中A和B分别为R和S上度数相等且可比的属性组，θ为<strong>比较运算符</strong>。</p><p>连接运算从R和S的广义笛卡尔积R×S中选取R关系在A属性组上的值与S关系在B属性组上值<strong>满足比较关系的元组</strong>。</p><p>【2】<strong>等值连接</strong>(Equijoin)：θ为&#x3D;的连接运算称为等值连接 ，它是从关系R与S的广义笛卡尔积中选取A、B属性值相等的元组：<img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/clip_image002-16469188480731.png" alt="img">。等值连接有<code>m+n</code>目关系。</p><p>【3】<strong>自然连接</strong>(Natural join)：是一种特殊的等值连接，要求两个关系中进行比较的分量必须是<strong>相同的属性组</strong>，在结果中把重复的属性列去掉。设R和S具有相同的属性组B，则：<img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/clip_image002-16469189378942.png" alt="img">。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220310161628334.png" alt="image-20220310161628334" style="zoom:80%;" /><p>有关<code>Sql</code>语句：</p><p>广义笛卡尔积：<code>select * from student,sc</code></p><p>等值连接：<code>select * from student,sc where student.sno = sc.sno</code></p><p>自然连接：<code>select sname,sc.no,ssex from student,sc where student.sno = sc.sno</code></p><p>（8）<strong>除</strong>(Division)：给定关系R(X,<strong>Y</strong>) 和S(<strong>Y</strong>,Z)，其中X,Y,Z为属性组。R中的Y与S中的Y可以有不同的属性名，但必须出自相同的域集。R与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：(关系R)元组<strong>在X上分量值x的象集</strong>$Y_{x}$包含S在Y上投影的集合。用数学表示为：$R \div S &#x3D; \left{ t_{r}\left\lbrack X \right\rbrack \middle| t_{r} \in R \land \pi_{Y}\left( S \right) \subseteq Y_{x} \right}$，其中$Y_{x}$表示x在R中的象集，$x&#x3D;t_{r}\left\lbrack X \right\rbrack$.</p><p>在实际操作中的步骤如下：</p><p>首先找出两个关系的相同属性列，<strong>记为Y</strong>，然后看所有X上每个分量值对应的象集是否包含S在相同属性列Y上投影。若有，则属于除后的结果。</p><p>如在<code>sc</code>表（包含<code>sno</code>和<code>cno</code>），<code>course</code>（包含<code>cno</code>和其他课程信息如课程名），执行$sc \div course$，相同的属性列为<code>cno</code>，那么则是将所有<code>sno</code>对应的象集（即选课编号<code>cno</code>）与<code>course</code>在<code>cno</code>上投影集合进行判断归属关系，那么该运算表示的含义则为所有课都选的同学的学号。又如$sc \div student$，相同的属性列为<code>sno</code>，则结果为被所有同学都选的课。又如下面的例子：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220310220429555.png" alt="image-20220310220429555" style="zoom:80%;" /><h1 id="ch3-关系数据库标准语言SQL"><a href="#ch3-关系数据库标准语言SQL" class="headerlink" title="ch3.关系数据库标准语言SQL"></a>ch3.关系数据库标准语言SQL</h1><h2 id="3-1-Sql语言的动词"><a href="#3-1-Sql语言的动词" class="headerlink" title="3.1 Sql语言的动词"></a>3.1 Sql语言的动词</h2><table><thead><tr><th align="center">Sql功能</th><th align="center">动词</th></tr></thead><tbody><tr><td align="center">数据定义</td><td align="center">create，drop，alter（更改表的结构）</td></tr><tr><td align="center">数据查询</td><td align="center">select</td></tr><tr><td align="center">数据操纵</td><td align="center">insert，update，delete</td></tr><tr><td align="center">数据控制</td><td align="center">grant, revoke</td></tr></tbody></table><h2 id="3-2-创建、删除基本表"><a href="#3-2-创建、删除基本表" class="headerlink" title="3.2 创建、删除基本表"></a>3.2 创建、删除基本表</h2><h3 id="3-2-1-创建基本表"><a href="#3-2-1-创建基本表" class="headerlink" title="3.2.1 创建基本表"></a>3.2.1 创建基本表</h3><ul><li><p>**use  xx(数据库)**：打开数据库。该语句以后的操作在该数据库进行。</p></li><li><p><strong>定义（创建）基本表</strong>：</p></li></ul><p> CREATE TABLE &lt;表名&gt;</p><p>   (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]</p><p>   [,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ] …</p><p>   [,&lt;表级完整性约束条件&gt; ] )；</p><p>​其中：表名为所要定义的基本表的名字，列名为组成该表的各个属性(列)，列级完整性约束条件为涉及相应属性列的完整性约束条件，表级完整性约束条件为涉及一个或多个属性列的完整性约束条件。</p><h3 id="3-2-2-约束"><a href="#3-2-2-约束" class="headerlink" title="3.2.2 约束"></a>3.2.2 约束</h3><p>常用的完整性约束有：</p><p><strong>主码约束PRIMARY KEY、唯一性约束UNIQUE、非空值约束NOT NULL、参照完整性约束FOREIGN、KEY、REFERENCES</strong>。</p><p>加入约束：<strong>CONSTRAINT</strong> salary_cap <strong>CHECK</strong> (salary &lt; 100000)   –加入约束名字</p><p>用PRIMARY KEY约束定义为列约束；若主键有两列或更多列，必须使用其作为表约束。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name<span class="token punctuation">(</span>pk_column data_type <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name<span class="token punctuation">(</span>pk_column_1 data_type<span class="token punctuation">,</span>    pk_column_2 data_type<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>pk_column_1<span class="token punctuation">,</span>pk_column_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看约束：（<code>sysobjects</code>是系统自建的表）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> OBJECT_NAME<span class="token punctuation">(</span>oarent_obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'表名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept_new <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> ck_dept_new_ID <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>ID <span class="token operator">LIKE</span> <span class="token string">'NO%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除约束：（<strong>修改表结构使用alter语句</strong>）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token string">'表名'</span> <span class="token keyword">drop</span> <span class="token keyword">constraint</span> <span class="token string">'约束名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3-修改与删除基本表"><a href="#3-2-3-修改与删除基本表" class="headerlink" title="3.2.3 修改与删除基本表"></a>3.2.3 修改与删除基本表</h3><ul><li><strong>修改基本表（结构）</strong>：</li></ul><p>ALTER TABLE &lt;表名&gt;</p><p>[ <strong>ADD</strong> &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ]</p><p>[ DROP &lt;完整性约束名&gt; ] [ <strong>DROP</strong> <strong>column</strong> &lt;列名&gt; ]</p><p>[ MODIFY &lt;列名&gt; &lt;数据类型&gt; ]；</p><p>​    其中：表名为要修改的基本表，ADD子句为增加新列和新的完整性约束条件，DROP子句为删除指定的完整性约束条件，MODIFY子句</p><p>为用于修改列名和数据类型。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> comdate <span class="token keyword">datetime</span> <span class="token comment">--增加一个属性</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> <span class="token keyword">column</span> comdate <span class="token comment">--删除一个属性</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> 姓名 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">update</span> student <span class="token keyword">set</span> 姓名<span class="token operator">=</span>sname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>sp_help 可以快速查看表结构、视图信息。</p></blockquote><ul><li><strong>删除基本表</strong>：DROP TABLE &lt;表名&gt;;</li></ul><h3 id="3-2-4-索引"><a href="#3-2-4-索引" class="headerlink" title="3.2.4 索引"></a>3.2.4 索引</h3><ul><li><strong>建立索引</strong>：</li></ul><p><code>create [UNIQUE] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]...);  </code></p><p>用&lt;表名&gt;指定要建索引的基本表。索引可以建立在该表的一列或多列上，各列名之间用逗号分隔；</p><p>用&lt;次序&gt;指定索引值的排列次序，<strong>升序ASC，降序DESC</strong>（缺省为升序ASC）；</p><p><strong>UNIQUE</strong>表明此索引的每一个索引值只对应唯一的数据记录。</p><p>**[例]**为学生-课程数据库中<code>Student,Course,SC</code>三个表建立索引。其中<code>Student</code>表按学号升序建唯一索引，<code>Course</code>表按课程号升序建唯一索引，<code>SC</code>表按学号升序和课程号降序建唯一索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> Stusno <span class="token keyword">ON</span> Student<span class="token punctuation">(</span>Sno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> Coucno <span class="token keyword">ON</span> Course<span class="token punctuation">(</span>Cno<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> SCno <span class="token keyword">ON</span> SC<span class="token punctuation">(</span>Sno <span class="token keyword">ASC</span><span class="token punctuation">,</span>Cno <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>索引的优缺点如下：</p><p>优点：可以提高查询速度（系统内部有B+树or二分法查找）；</p><p>缺点：每次执行insert,update,delete都会将index表重新排序，会降低操作效率。</p></blockquote><ul><li><strong>删除索引</strong>：drop index  &lt;索引名&gt;;</li></ul><h2 id="3-3-基本表的查询操作"><a href="#3-3-基本表的查询操作" class="headerlink" title="3.3 基本表的查询操作"></a>3.3 基本表的查询操作</h2><h3 id="3-3-1-查询概述"><a href="#3-3-1-查询概述" class="headerlink" title="3.3.1 查询概述"></a>3.3.1 查询概述</h3><p>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt; [，&lt;目标列表达式&gt;] …–目标列表达式可以是列名（属性）、函数、算术表达式、字符串</p><p>FROM &lt;表名或视图名&gt;[， &lt;表名或视图名&gt; ] …</p><p>[ WHERE &lt;条件表达式&gt; ]</p><p>[ GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ]–分组</p><p><strong>[ ORDER BY &lt;列名2&gt; [ ASC|DESC ] ]</strong>;   –含第一排序位、第二排序位……</p><p>其中：SELECT子句指定要显示的属性列；FROM子句指定查询对象(基本表或视图)；WHERE子句指定查询条件；GROUP BY子句对查询结果按指定列的值分组，该属性列值相等的元组为一个组，通常会在每组中作用集函数；HAVING短语筛选出只有满足指定条件的组；ORDER BY子句对查询结果表按指定列值的升序或降序排序；DISTINCT表示<strong>只显示完全不相同的行</strong>（相同的只出现一次）。如：<code>select distinct sno from sc</code>代表显示所有（不同的）学号。</p><h3 id="3-3-2-函数与使用集合函数"><a href="#3-3-2-函数与使用集合函数" class="headerlink" title="3.3.2 函数与使用集合函数"></a>3.3.2 函数与使用集合函数</h3><p>（一）<strong>调用函数</strong>的语句：select xx()</p><p>例：<code>select getdate(),day(getdate())</code></p><p>（二）<strong>集合函数</strong>：</p><p>集合函数对一组值执行计算并返回单一的值，&#x3D;&#x3D;<strong>集合函数作用于每一组</strong>&#x3D;&#x3D;。</p><blockquote><p>注意：where后面不能跟集合函数，比如显示score表中的最高分的学生学号和课程号，需使用语句：</p><p><code>select sno,cno from sc where grade = (select max(grade) from sc)</code>。</p></blockquote><p>集合函数有以下五种：<strong>avg()平均值，sum()求和，count()数量，max()最大值，min()最小值</strong></p><ul><li><p><strong>计数</strong>：COUNT([DISTINCT|ALL] *) &#x2F;  COUNT([DISTINCT|ALL] &lt;列名&gt;)（<strong>NULL不算入</strong>）</p><p>如查询学生总人数，即为<code>select count(*) from SStudent; </code></p></li><li><p><strong>计算总和</strong>：SUM([DISTINCT|ALL] &lt;列名&gt;)</p></li><li><p><strong>计算平均值</strong>：AVG([DISTINCT|ALL] &lt;列名&gt;)</p></li><li><p><strong>求最大值</strong>：MAX([DISTINCT|ALL] &lt;列名&gt;)</p></li><li><p><strong>求最小值</strong>：MIN([DISTINCT|ALL] &lt;列名&gt;)</p></li></ul><p></p><h3 id="3-3-3-对查询结果分组与排序"><a href="#3-3-3-对查询结果分组与排序" class="headerlink" title="3.3.3 对查询结果分组与排序"></a>3.3.3 对查询结果分组与排序</h3><p><strong>对查询结果分组</strong>：</p><ul><li>使用<strong>group by</strong></li><li>&#x3D;&#x3D;<strong>值相等的为一组</strong>&#x3D;&#x3D;，若有两个（多个），则为<strong>排列组合值相等</strong>的为一组：<code>select cno,class from sc group by cno, class</code></li><li>&#x3D;&#x3D;<strong>select后面只能出现分组的属性或集合函数</strong>&#x3D;&#x3D;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">group</span> <span class="token keyword">by</span> cno <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">3</span>  <span class="token comment">--显示有三个人以上选的课,count(*)表示分组后该组有多少元组</span><span class="token keyword">select</span> sno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">group</span> <span class="token keyword">by</span> sno <span class="token keyword">having</span> <span class="token function">min</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">70</span> <span class="token operator">and</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">85</span><span class="token comment">--查找每个人所有课的平均分，在这些人中选出每门课大于70且平均分大于85的人</span><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">group</span> <span class="token keyword">by</span> cno<span class="token comment">--每门课的平均分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>having和where的区别</strong>：</p><p>having对<strong>每组</strong>（分组后）限定，where对<strong>每个元组</strong>限定（筛选），where筛选完了才会分组。</p></blockquote><p><strong>对查询结果排序</strong>：</p><p>使用<strong>order by</strong>字句，可以按一个或多个（<strong>第一排序位</strong>优先）属性列排序， 升序<code>ASC</code>，降序<code>DESC</code>，<strong>缺省值为升序</strong>。当排序列含空值时，<code>ASC</code>排序列为空值的元组最后显示，<code>DESC</code>排序列为空值的元组最先显示。例如<code>order by sage ASC,sname DESC</code>。</p><h3 id="3-3-4-使用别名"><a href="#3-3-4-使用别名" class="headerlink" title="3.3.4 使用别名"></a>3.3.4 使用别名</h3><p><code>SQL</code>语句可以为 <strong>表名称</strong> 或 <strong>列名称</strong> 指定别名。</p><ul><li>别名的三种形式：<ul><li>字段名 <strong>as</strong> 别名</li><li>字段名 （<strong>空格</strong>） 别名</li><li>别名 <strong>&#x3D;</strong> 字段名</li></ul></li><li>若使用别名，则语句中每处（如select后）应改为别名后的名称</li></ul><p>[例]显示score中选修多门课程的同学中分数为非最高分成绩的记录。</p><p><code>select a.sno,a.degree,a.cno from sc a,sc b where a.sno=b.sno and a.degree&lt;b.degree</code>（“&lt;”号保证了该同学选修了多门课程）</p><h3 id="3-3-5-字符串匹配"><a href="#3-3-5-字符串匹配" class="headerlink" title="3.3.5 字符串匹配"></a>3.3.5 字符串匹配</h3><ul><li><p>通配符**%**：代表任意长度(可以为0)的字符串。  如a%b表示以a开头、以b结尾的任意长度的字符串</p></li><li><p>通配符**_** ：代表任意单个字符。如a_b表示以a开头、以b结尾的长度为3的任意字符串</p></li><li><p>通配符**[]<strong>：代表满足其中</strong>任何一个<strong>的被筛选，[]中加</strong>^**表示不为[]中任何一个的被筛选</p></li><li><p><strong>利用escape关键字</strong>，使用<strong>换码字符</strong>将通配符转义为普通字符</p></li></ul><blockquote><p>注：转义默认的符号是<code>&#39;\&#39;</code>，可以使用escape关键字定义别的字符为转义符。</p></blockquote><p>[例1] 查询DB_Design课程的课程号和学分。</p><p>​    <code>SELECT Cno,Ccredit FROM SCourse WHERE Cname LIKE &#39;DB\_Design&#39;  ESCAPE &#39;\&#39;;</code></p><p>[例2] 询以DB_开头、且倒数第3个字符为i的课程的详细情况。</p><p>​    <code>SELECT * FROM SCourse WHERE Cname LIKE &#39;DB\_%i__&#39; ESCAPE &#39;\&#39;;</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sage<span class="token operator">></span><span class="token number">20</span> <span class="token operator">and</span> sname <span class="token operator">like</span> <span class="token string">'刘%'</span> <span class="token comment">--'%'代表一个或多个字符，查找姓刘的人,'刘_'代表刘+一个字符,不姓刘即NOT LIKE</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sname <span class="token operator">like</span> <span class="token string">'[李王张刘]%'</span>   <span class="token comment">--查找姓氏为这四个姓的人</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sname <span class="token operator">like</span> <span class="token string">'[^李王张刘]%'</span>   <span class="token comment">--查找姓氏不为这四个姓的人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-6-连接查询"><a href="#3-3-6-连接查询" class="headerlink" title="3.3.6 连接查询"></a>3.3.6 连接查询</h3><p>同时涉及多个表的查询。根据<strong>连接条件</strong>进行<strong>拼接</strong>。</p><h4 id="3-3-6-1-内连接"><a href="#3-3-6-1-内连接" class="headerlink" title="3.3.6.1 内连接"></a>3.3.6.1 内连接</h4><p>[例1]查询每个学生及其选修课程的情况。</p><p><code>SELECT SStudent.*,SC.* FROM SStudent,SC WHERE SStudent.Sno = SC.Sno;</code></p><p>[例2]查询每一门课的间接先修课(即先修课的先修课)。</p><p><code>select first.cno,second.cpno from course first,scource second where first.cpno = second.cno</code></p><p>内连接还可以使用<strong>join…on…</strong>方法，如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sname<span class="token punctuation">,</span>cname<span class="token punctuation">,</span>grade <span class="token keyword">from</span> student<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>course <span class="token keyword">where</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno <span class="token operator">and</span> sc<span class="token punctuation">.</span>cno <span class="token operator">=</span> course<span class="token punctuation">.</span>cno<span class="token comment">--可写为</span><span class="token keyword">select</span> sname<span class="token punctuation">,</span>cname<span class="token punctuation">,</span>grade <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno <span class="token operator">=</span> course<span class="token punctuation">.</span>cno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-3-6-2-外连接"><a href="#3-3-6-2-外连接" class="headerlink" title="3.3.6.2 外连接"></a>3.3.6.2 外连接</h4><p>​外连接分为<strong>左外连接</strong>(<code>LEFT OUTER JOIN</code>或<code>LEFT JOIN</code>)、<strong>右外连接</strong>(<code>RIGHT OUTER JOIN</code>或<code>RIGHT JOIN</code>) 和<strong>全外连接</strong>(<code>FULL OUTER JOIN</code>或<code>FULL JOIN</code>)三种。与内连接不同的是，外连接不只列出与连接条件相匹配的行，而是列出左表(左外连接时)、右表(右外连接时)或两个表(全外连接时)中所有符合搜索条件的数据行。</p><p>（Oracle）**(+)<strong>，即给其加了一个</strong>万能的空行**，拼不上则使用，拼不上的情况下Student表中的记录只拼一次（在这里即为未选课）</p><p><code>SELECT  Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade FROM Student,SC WHERE Student.Sno = SC.Sno(+);</code></p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220324213029402.png" alt="image-20220324213029402" style="zoom:67%;" /><p>(Sql Server)<code>SELECT SStudent.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade FROM SStudent LEFT OUTER JOIN SC on SStudent.Sno = SC.Sno; </code></p><blockquote><p><strong>涉及空值的查询</strong>：在where子句的&lt;比较条件&gt;中使用谓词<strong>IS NULL</strong> 或 <strong>IS NOT NULL</strong></p><p><strong>多重条件查询</strong>：使用逻辑运算符and和or联结多个查询条件。</p></blockquote><h3 id="3-3-7-嵌套查询"><a href="#3-3-7-嵌套查询" class="headerlink" title="3.3.7 嵌套查询"></a>3.3.7 嵌套查询</h3><p><strong>外层查询&#x2F;父查询+内层查询&#x2F;子查询</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> cno <span class="token keyword">from</span> course <span class="token keyword">where</span> cname<span class="token operator">=</span><span class="token string">'数据库原理'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-7-1-带有in谓词的子查询"><a href="#3-3-7-1-带有in谓词的子查询" class="headerlink" title="3.3.7.1 带有in谓词的子查询"></a>3.3.7.1 带有in谓词的子查询</h4><p>[例] 查询与刘晨在同一个系学习的学生。</p><p>（1）确定刘晨所在系名；</p><p>（2）查找所有在IS系学习的学生。 </p><p><code>SELECT Sno,Sname,Sdept FROM SStudent WHERE Sdept IN (SELECT Sdept  FROM SStudent WHERE Sname=&#39;刘晨&#39;);</code></p><h4 id="3-3-7-2-带有any或all谓词的子查询"><a href="#3-3-7-2-带有any或all谓词的子查询" class="headerlink" title="3.3.7.2 带有any或all谓词的子查询"></a>3.3.7.2 带有any或all谓词的子查询</h4><p><strong>any表示任意，all表示所有</strong></p><table><thead><tr><th align="center"></th><th align="center">&#x3D;</th><th align="center">&lt;&gt;或!&#x3D;</th><th align="center">&lt;</th><th align="center">&lt;&#x3D;</th><th align="center">&gt;</th><th align="center">&gt;&#x3D;</th></tr></thead><tbody><tr><td align="center">any</td><td align="center">in</td><td align="center">–</td><td align="center">&lt;max</td><td align="center">&lt;&#x3D;max</td><td align="center">&gt;min</td><td align="center">&gt;&#x3D;min</td></tr><tr><td align="center">all</td><td align="center">–</td><td align="center">not in</td><td align="center">&lt;min</td><td align="center">&lt;&#x3D;min</td><td align="center">&gt;max</td><td align="center">&gt;&#x3D;max</td></tr></tbody></table><p>[例]查询其他系中比信息系任意一个(其中某一个)学生年龄小的学生姓名和年龄。</p><p>法1：用All谓词</p><p><code>select Sname,Sage from SStudent where sage &lt; any(select Sage from SStudent where Sdept = &#39;IS&#39;) and Sdept &lt;&gt; &#39;IS&#39;</code></p><p>法2：用集合函数</p><p><code>select Sname,Sage from student where Sage &lt;  (select min(Sage) from student where Sdept =&#39;IS&#39;) and Sdept&lt;&gt;&#39;IS&#39;</code></p><h4 id="3-3-7-3-带有exists谓词的子查询"><a href="#3-3-7-3-带有exists谓词的子查询" class="headerlink" title="3.3.7.3 带有exists谓词的子查询"></a>3.3.7.3 带有exists谓词的子查询</h4><p><strong>每一条、每一条地去拼接。</strong></p><p>相当于存在量词$\exists$。带有EXISTS谓词的子查询不返回任何数据，只产生逻辑true或false，若内层查询结果非空则返回真值，否则返回假值。由EXISTS引出的子查询的目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义。</p><p>[例1]查询所有选修了1号课程的学生姓名。</p><p>首先在<code>Student</code>中依次取每个元组的<code>Sno</code>值，用此值去检查<code>SC</code>关系，若<code>SC</code>中存在这样的元组，其<code>Sno</code>值等于此<code>Student.Sno</code>值，并且其<code>Cno= &#39;1&#39;</code>，则取此<code>Student.Sname</code>送入结果关系。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--用嵌套查询 </span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token comment">/*相关子查询*/</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SC <span class="token keyword">WHERE</span> Sno<span class="token operator">=</span>Student<span class="token punctuation">.</span>Sno <span class="token operator">AND</span> Cno<span class="token operator">=</span> ‘<span class="token number">1</span>’<span class="token punctuation">)</span>；<span class="token comment">--用连接查询</span><span class="token keyword">SELECT</span> Sname <span class="token keyword">FROM</span> Student<span class="token punctuation">,</span> SC <span class="token keyword">WHERE</span> Student<span class="token punctuation">.</span>Sno<span class="token operator">=</span>SC<span class="token punctuation">.</span>Sno <span class="token operator">AND</span> SC<span class="token punctuation">.</span>Cno<span class="token operator">=</span> ‘<span class="token number">1</span>’；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]查询选修了全部课程的学生姓名。</p><p><strong>法1</strong>：首先找出Student中的一条信息，到中间层语句，找出一个课程信息，若是该学生有某一门课程没有选，则内层向中间层返回false，not exists为true，直接向外层返回true，最终not exists为false，不符合条件；若符合条件，则查找下一个课程，若其中所有课程查完，中间层语句都为false，则向外层返回true，not exists结果为true，符合条件，输出。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sname <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> sno <span class="token operator">=</span> student<span class="token punctuation">.</span>sno <span class="token operator">and</span> cno <span class="token operator">=</span> course<span class="token punctuation">.</span>cno<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>法2</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sname <span class="token keyword">from</span> student <span class="token keyword">where</span> sno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> sc <span class="token keyword">group</span> <span class="token keyword">by</span> sno <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-8-集合查询（并查询）"><a href="#3-3-8-集合查询（并查询）" class="headerlink" title="3.3.8 集合查询（并查询）"></a>3.3.8 集合查询（并查询）</h3><p>标准<code>SQL</code>对于集合查询直接支持并操作。参加<strong>并（union）操作</strong>的各结果表的列数必须相同，对应项的数据类型也必须相同。</p><p>一般格式为：<br>    &lt;查询块&gt;<br>      union<br>    &lt;查询块&gt;</p><p>[例]列出所有老师和同学的 姓名、性别和生日。</p><p><code>select tname,sex,birthday from teacher union select sname,sex,birthday from student;</code></p><h3 id="3-3-9-查询细节知识点"><a href="#3-3-9-查询细节知识点" class="headerlink" title="3.3.9 查询细节知识点"></a>3.3.9 查询细节知识点</h3><h4 id="3-3-9-1-使用top限制结果集"><a href="#3-3-9-1-使用top限制结果集" class="headerlink" title="3.3.9.1 使用top限制结果集"></a>3.3.9.1 使用top限制结果集</h4><ul><li>格式：TOP n [percent] with ties ，n 为非负的整数</li><li>TOP n:表示取查询结果的前n行</li><li>TOP n percent:表示取查询结果的前n%行</li><li><strong>with ties</strong>：查询并列前n行</li><li>若有distinct，要写在其后面</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查询数据库课程考试成绩前三名的学生的姓名和成绩</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token keyword">with</span> ties sname<span class="token punctuation">,</span>grade <span class="token keyword">from</span>  student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno <span class="token keyword">where</span> cname<span class="token operator">=</span><span class="token string">'数据库原理'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> grade <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">--或</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">3</span> <span class="token keyword">with</span> ties sname<span class="token punctuation">,</span>grade <span class="token keyword">from</span> student<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>course <span class="token keyword">where</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno <span class="token operator">and</span>   sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno <span class="token operator">and</span> cname<span class="token operator">=</span><span class="token string">'数据库原理'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> grade <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-9-2-将查询结果保存到新表"><a href="#3-3-9-2-将查询结果保存到新表" class="headerlink" title="3.3.9.2 将查询结果保存到新表"></a>3.3.9.2 将查询结果保存到新表</h4><ul><li>select 查询表序列 into 新表名 from 数据源(表名) where [&lt;条件&gt;]…..</li><li>新表有二类：<ul><li><strong>永久的表</strong>，起一个表名就可以了。</li><li><strong>临时表</strong>：<ul><li>局部临时表，表名前加#，当前连接可用，生存期为当前连接的生存期。</li><li>全局临时表：表名前加##，所有连接都可用．生存期为当前连接的生存期。</li></ul></li></ul></li></ul><h4 id="3-3-9-3-case子句"><a href="#3-3-9-3-case子句" class="headerlink" title="3.3.9.3 case子句"></a>3.3.9.3 case子句</h4><p><strong>使用case子句对查询结果进行分析</strong>，见下例。</p><p>[例]查询001号课程的学号和成绩，并进行如下处理成绩&gt;90 显示’优’,80-89:’良’,etc。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> sno<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>  <span class="token keyword">CASE</span>    <span class="token keyword">WHEN</span> GRADE<span class="token operator">>=</span><span class="token number">90</span> <span class="token keyword">THEN</span> <span class="token string">'优'</span>    <span class="token keyword">WHEN</span> GRADE <span class="token operator">BETWEEN</span> <span class="token number">80</span> <span class="token operator">AND</span> <span class="token number">89</span> <span class="token keyword">THEN</span> <span class="token string">'良'</span>    <span class="token keyword">WHEN</span> GRADE <span class="token operator">BETWEEN</span> <span class="token number">70</span> <span class="token operator">AND</span> <span class="token number">79</span> <span class="token keyword">THEN</span> <span class="token string">'中'</span>    <span class="token keyword">WHEN</span> GRADE <span class="token operator">BETWEEN</span> <span class="token number">60</span> <span class="token operator">AND</span> <span class="token number">69</span> <span class="token keyword">THEN</span> <span class="token string">'及格'</span>    <span class="token keyword">WHEN</span> GRADE<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">'不及格'</span>  <span class="token keyword">End</span> <span class="token keyword">as</span> degree <span class="token keyword">From</span> sc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-数据更新"><a href="#3-4-数据更新" class="headerlink" title="3.4 数据更新"></a>3.4 数据更新</h2><h3 id="3-4-1-插入数据"><a href="#3-4-1-插入数据" class="headerlink" title="3.4.1 插入数据"></a>3.4.1 插入数据</h3><ul><li>INSERT  INTO &lt;表名&gt; [(&lt;属性列1&gt;[,&lt;属性列2 &gt;…)] VALUES (&lt;常量1&gt; [,&lt;常量2&gt;] … )</li><li>功能：<strong>将新元组插入指定表中</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>sno<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>ssex<span class="token punctuation">,</span>sage<span class="token punctuation">,</span>sdept<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'120'</span><span class="token punctuation">,</span><span class="token string">'李白'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'计算机系'</span><span class="token punctuation">,</span><span class="token string">'97/09/01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--oracle写法: to_date('09/01/1977','mm/dd/yyyy');</span><span class="token comment">--追加查询结果到指定表中</span><span class="token keyword">insert</span> <span class="token keyword">into</span> xx11<span class="token punctuation">(</span>sno<span class="token punctuation">,</span>avggrade1<span class="token punctuation">)</span> <span class="token keyword">select</span> sno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">group</span> <span class="token keyword">by</span> sno<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-2-修改和删除数据"><a href="#3-4-2-修改和删除数据" class="headerlink" title="3.4.2 修改和删除数据"></a>3.4.2 修改和删除数据</h3><p><strong>修改数据</strong>：</p><ul><li><p>UPDATE  &lt;表名&gt;  SET  &lt;列名&gt;&#x3D;&lt;表达式&gt;[,&lt;列名&gt;&#x3D;&lt;表达式&gt;] …  [WHERE &lt;条件&gt;];</p></li><li><p>功能：修改指定表中满足WHERE子句条件的元组</p><p>[例]将信息系所有学生的年龄增加1岁。 <code>UPDATE Student SET Sage = Sage+1 WHERE Sdept=&#39;IS&#39;;</code></p></li></ul><p><strong>删除数据</strong>：</p><ul><li>DELETE  FROM  &lt;表名&gt; [WHERE &lt;条件&gt;];</li><li>功能：删除指定表中满足WHERE子句条件的元组</li><li>需要满足实体完整性和参照完整性</li><li>delete后表仍存在，drop后表会被删除</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sname<span class="token operator">=</span><span class="token string">'李白'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sc<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'120'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-5-视图"><a href="#3-5-视图" class="headerlink" title="3.5 视图"></a>3.5 视图</h2><p>视图机制可以为不同的用户定义不同的视图，把数据对象限制在一定的范围内。也即，通过视图机制把要加密的数据对无权存取的用户隐藏起来，从而自动对数据提供一定程度的安全保护。<strong>视图机制间接地实现支持存取谓词的用户权限定义</strong>。</p><ul><li>视图是一个“<strong>假的表</strong>”，数据库中只存储查询语句，查询视图即是查询视图中的查询语句。</li><li>视图消解是对视图的操作转换成对基本表的操作。</li><li>CREATE  VIEW  &lt;视图名&gt;  [(&lt;列名&gt; [,&lt;列名&gt;]…)]  AS  &lt;子查询&gt;  [WITH CHECK OPTION];</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> avg_ss<span class="token punctuation">(</span>sname<span class="token punctuation">,</span>avggrade<span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token keyword">select</span> sname<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">,</span>sc    <span class="token keyword">where</span> student<span class="token punctuation">.</span>sno <span class="token operator">=</span> sc<span class="token punctuation">.</span>sno <span class="token keyword">group</span> <span class="token keyword">by</span> sname<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-6-数据控制"><a href="#3-6-数据控制" class="headerlink" title="3.6 数据控制"></a>3.6 数据控制</h2><h3 id="3-6-1-授权"><a href="#3-6-1-授权" class="headerlink" title="3.6.1 授权"></a>3.6.1 授权</h3><p>SQL语言用GRANT语句向用户授予操作权限。</p><p>GRANT &lt;权限&gt;[,&lt;权限&gt;] … [<strong>ON</strong> &lt;对象类型&gt; &lt;对象名&gt;]  TO &lt;用户&gt;[,&lt;用户&gt;] …[WITH GRANT OPTION];</p><p>若加入<strong>WITH GRANT OPTION</strong>，获得的权限仍可以授予给别人。</p><p>[例1]把查询Student表权限授给用户U1。</p><p><code>GRANT SELECT ON TABLE Student TO U1;</code></p><p>[例2]把对Student表和Course表的全部权限授予用户U2和U3。</p><p><code>GRANT ALL PRIVILIGES ON TABLE Student, Course TO U2,U3;</code></p><p>[例3]把对表SC的查询权限授予所有用户。</p><p><code>GRANT SELECT ON TABLE SC TO PUBLIC;</code></p><p>[例4]把查询Student表和修改学生学号的权限授给用户U4。</p><p><code>GRANT UPDATE(Sno), SELECT ON TABLE Student TO U4;</code></p><p>[例5]把对表SC的INSERT权限授予U5用户，并允许他再将此权限授予其他用户。</p><p><code>GRANT INSERT ON TABLE SC TO U5 WITH GRANT OPTION;</code></p><h3 id="3-6-2-收回权限"><a href="#3-6-2-收回权限" class="headerlink" title="3.6.2 收回权限"></a>3.6.2 收回权限</h3><p>由DBA或其他授权者用<strong>REVOKE</strong>语句收回。</p><p>一般格式：</p><p>  REVOKE &lt;权限&gt;[,&lt;权限&gt;]…[ON &lt;对象类型&gt; &lt;对象名&gt;] FROM &lt;用户&gt;[,&lt;用户&gt;] …；</p><p>[例1]把用户U4修改学生学号的权限收回。</p><p>REVOKE UPDATE(Sno) ON TABLE Student FROM U4;</p><p>[例2]收回所有用户对表SC的查询权限。</p><p>REVOKE SELECT ON TABLE SC FROM PUBLIC;</p><p>[例3]把用户U5对SC表的INSERT权限收回。</p><p>REVOKE INSERT ON TABLE SC FROM U5;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机学科理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理(二) 过程语言与关系数据理论</title>
      <link href="/2022/08/14/li-lun-04-shu-ju-ku-yuan-li-er/"/>
      <url>/2022/08/14/li-lun-04-shu-ju-ku-yuan-li-er/</url>
      
        <content type="html"><![CDATA[<h1 id="ch4-过程语言PL-x2F-SQL"><a href="#ch4-过程语言PL-x2F-SQL" class="headerlink" title="ch4.过程语言PL&#x2F;SQL"></a>ch4.过程语言PL&#x2F;SQL</h1><h1 id="PART1-SQL-Server"><a href="#PART1-SQL-Server" class="headerlink" title="PART1.SQL Server"></a>PART1.SQL Server</h1><h2 id="4-1-1-T-SQL编程基础"><a href="#4-1-1-T-SQL编程基础" class="headerlink" title="4.1.1 T-SQL编程基础"></a>4.1.1 T-SQL编程基础</h2><ul><li><p><strong>程序注释语句</strong></p><p>–：单行注释；</p><p><code>/*……*/</code>：多行注释。此多行注释中不能包括go语句。</p></li><li><p><strong>变量</strong></p><ul><li>分类：<ul><li>局部变量@</li><li>全局变量@@</li></ul></li><li><strong>局部变量使用前要先定义，赋值、再使用</strong></li></ul><p>​       declare @变量名 数据类型——每次可定义多个变量</p><p>​       set|select @变量名＝常量</p><blockquote><p>set 与select 赋值的区别为：<strong>set 只能一次一个变量,select 则可以一次给多个变量赋值</strong>。</p></blockquote></li></ul><p>​ Declare @x int<br>​ Declare @y int<br>​ Set @x&#x3D;10</p><ul><li><p>程序结构</p><ul><li><p><strong>语句组</strong></p><p>BEGIN<br>   语句1<br>   语句2<br>END </p></li><li><p><strong>if …else 结构</strong>——条件分支结构</p><p>if  逻辑表达式<br>单条语句 or  begin…end 语句组（多条语句）<br>else<br>单条语句 or  begin…end 语句组（多条语句）</p></li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@w</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token variable">@ss</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token variable">@aa</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">select</span>  <span class="token variable">@w</span><span class="token operator">=</span>sname<span class="token punctuation">,</span><span class="token variable">@ss</span><span class="token operator">=</span>ssex<span class="token punctuation">,</span><span class="token variable">@aa</span><span class="token operator">=</span>sdept <span class="token keyword">from</span> student <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'101'</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">@ss</span><span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span>   <span class="token keyword">begin</span>       <span class="token keyword">print</span> <span class="token variable">@w</span><span class="token operator">+</span><span class="token string">'在'</span><span class="token operator">+</span><span class="token variable">@aa</span><span class="token operator">+</span><span class="token string">'是个男同志'</span>   <span class="token keyword">end</span><span class="token keyword">else</span>   <span class="token keyword">begin</span>       <span class="token keyword">print</span> <span class="token variable">@w</span><span class="token operator">+</span><span class="token string">'是个女同志'</span>   <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【例】查看100号同学的最小成绩&gt;&#x3D;60。如果&gt;&#x3D;60的话，就打印出’这是个好同志’；否则打印出’还要努力’，然后把这个同学不及格的成绩变为60分。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@cc</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@cc</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'100'</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">@cc</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>   <span class="token keyword">print</span> <span class="token string">'还要努力!'</span>   <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span><span class="token number">60</span> <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'100'</span> <span class="token operator">and</span> grade<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">end</span><span class="token keyword">else</span>  <span class="token keyword">print</span> <span class="token string">'这是个好同志!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>case表达式</strong>：</p><p>CASE 测试表达式<br>  When 简单表达式1 then 结果表达式1<br>  When 简单表达式2 then 结果表达式2<br>  ……..<br>  When 简单表达式n then 结果表达式n<br>  [else  结果表达式n+1]<br>END</p></li></ul><p>【简单表达式也可以为布尔表达式。】</p><p>​case多重分支结构：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 教师姓名<span class="token punctuation">,</span>出生年月<span class="token punctuation">,</span>年龄层次<span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">case</span>        <span class="token keyword">when</span> 出生年月<span class="token operator">&lt;</span><span class="token string">'1950-01-01'</span> <span class="token keyword">then</span> <span class="token string">'老'</span>              <span class="token keyword">when</span> 出生年月 <span class="token operator">between</span> <span class="token string">'1950-01-01'</span><span class="token operator">and</span> <span class="token string">'1969-12-31'</span> <span class="token keyword">then</span> <span class="token string">'中'</span>       <span class="token keyword">when</span> 出生年月<span class="token operator">></span><span class="token string">'1970-01-01'</span> <span class="token keyword">then</span> <span class="token string">'青'</span><span class="token keyword">else</span>        <span class="token string">' '</span><span class="token keyword">end</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>工资层次<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span>        <span class="token keyword">when</span> 工资<span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token keyword">then</span> <span class="token string">'低'</span>           <span class="token keyword">when</span> 工资 <span class="token operator">between</span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token number">2000</span> <span class="token keyword">then</span> <span class="token string">'中'</span>       <span class="token keyword">when</span> 工资<span class="token operator">></span><span class="token number">2000</span> <span class="token keyword">then</span> <span class="token string">'高'</span><span class="token keyword">else</span>        <span class="token string">''</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 教师表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>cast能改变变量的数据类型，如： <strong>cast(@sum as char(4))</strong></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@i</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@sum</span> <span class="token keyword">int</span>     <span class="token comment">--定义二个变量@i和@sum</span><span class="token keyword">set</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token number">1</span>                       <span class="token comment">--让变量@i=1</span><span class="token keyword">set</span> <span class="token variable">@sum</span><span class="token operator">=</span><span class="token number">0</span>                     <span class="token comment">--和的结果初始值为0</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">@i</span><span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span>           <span class="token comment">--只要变量@i&lt;=100,就进行下面的循环</span>   <span class="token keyword">begin</span>       <span class="token keyword">set</span> <span class="token variable">@sum</span><span class="token operator">=</span><span class="token variable">@sum</span><span class="token operator">+</span><span class="token variable">@i</span>    <span class="token comment">--每次加一个@i</span>       <span class="token keyword">print</span> <span class="token string">'i的值='</span><span class="token operator">+</span> cast<span class="token punctuation">(</span><span class="token variable">@i</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token string">'中间和的值='</span> <span class="token operator">+</span> cast<span class="token punctuation">(</span><span class="token variable">@sum</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">set</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span>             <span class="token comment">--每次@i增长1</span>   <span class="token keyword">end</span><span class="token keyword">print</span> <span class="token variable">@sum</span>           <span class="token comment">--打印最后的和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>return和break意思相同。</li></ul><h2 id="4-1-2-游标和事务"><a href="#4-1-2-游标和事务" class="headerlink" title="4.1.2 游标和事务"></a>4.1.2 游标和事务</h2><h3 id="4-1-2-1-游标"><a href="#4-1-2-1-游标" class="headerlink" title="4.1.2.1 游标"></a>4.1.2.1 游标</h3><p>游标是系统为用户开设的一个数据缓冲区，存放Sql语句的执行结果。用户可以通过游标逐一获取记录并赋给主变量，交由主语言进一步处理。也即，游标是结果集的逻辑扩展，<strong>它使应用程序得以逐行处理结果集</strong>。</p><p>游标的使用中，会每次处理一行或一部分行作为个性化处理。游标一定<strong>要跟查询语句相关联</strong>。</p><p>游标定义：DECLARE  (游标名字) [ INSENSITIVE ] [ SCROLL ] CURSOR FOR select_statement  [ FOR { READ ONLY | UPDATE [ OF column_name [ ,…n ] ] } ]，其中update定义游标中可更新的列。</p><p>游标可认为是C语言的指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理。</p><p>四个步骤：</p><ul><li><strong>定义游标</strong></li><li><strong>打开游标</strong></li><li><strong>提取数据</strong></li><li><strong>关闭游标</strong></li></ul><p>与游标相关的<strong>系统全局变量</strong>：</p><ul><li><p><strong>@@fetch_status</strong>：返回FETCH语句的最后状态</p><p>0——表示获取成功，-1——表示获取失败或此行不在结果集中，-2表示被提取的行不存在。</p></li><li><p><strong>@@cursor_rows</strong>：返回本次在服务器连接中打开游标取回的数据行的数目。</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---判断成绩是否及格</span><span class="token keyword">declare</span> <span class="token variable">@xuehao</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token variable">@chengji</span> <span class="token keyword">int</span><span class="token keyword">declare</span> cc1 <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>grade <span class="token keyword">from</span> sc  <span class="token comment">--定义游标cc1</span><span class="token keyword">open</span> cc1     <span class="token comment">--打开游标,执行与游标相关联的查询语句(查询结果放入缓存中)</span><span class="token comment">--从游标中取得第一记录内容存入变量,还有last,prior最前/最后</span><span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> cc1 <span class="token keyword">into</span> <span class="token variable">@xuehao</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span><span class="token punctuation">,</span><span class="token variable">@chengji</span><span class="token keyword">while</span> @<span class="token variable">@fetch_status</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">--@@fetch_status为系统自定义的变量,判断获取是否成功,即记录是否取得完成</span>   <span class="token keyword">begin</span>　  <span class="token keyword">if</span> <span class="token variable">@chengji</span><span class="token operator">&lt;</span><span class="token number">60</span>         <span class="token keyword">print</span> <span class="token variable">@xuehao</span><span class="token operator">+</span><span class="token variable">@kechenghao</span><span class="token operator">+</span><span class="token string">'不及格'</span>　    <span class="token keyword">else</span>         <span class="token keyword">print</span> <span class="token variable">@xuehao</span><span class="token operator">+</span><span class="token variable">@kechenghao</span><span class="token operator">+</span><span class="token string">'及格'</span><span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> cc1 <span class="token keyword">into</span> <span class="token variable">@xuehao</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span><span class="token punctuation">,</span><span class="token variable">@chengji</span>  <span class="token keyword">end</span><span class="token keyword">close</span> cc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用游标修改数据</strong>：</p><ul><li><p><strong>更新操作</strong>：</p><p>update 表名 set 列名&#x3D; 表达式  <strong>where current of 游标名</strong></p></li><li><p><strong>删除操作</strong>：</p><p>delete from 表名  where current of 游标名</p></li></ul><p>current of 游标名：指对当前游标数据行操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">A、<span class="token comment">---对成绩表按不同的分数段加不同的成绩</span><span class="token comment">--delare 游标名 cursor for select 语句</span><span class="token keyword">declare</span> <span class="token variable">@xuehao</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token variable">@chengji</span> <span class="token keyword">int</span><span class="token comment">--定义游标cc3</span><span class="token keyword">declare</span> cc3 <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> sno<span class="token punctuation">,</span>cno<span class="token punctuation">,</span>grade <span class="token keyword">from</span> sc <span class="token keyword">for</span> <span class="token keyword">update</span> <span class="token keyword">of</span> grade<span class="token keyword">open</span> cc3     <span class="token comment">--打开游标;执行与游标相关联的查询语</span><span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> cc3 <span class="token keyword">into</span> <span class="token variable">@xuehao</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span><span class="token punctuation">,</span><span class="token variable">@chengji</span><span class="token comment">--从游标中取得第一记录内容存入变量</span><span class="token keyword">while</span> @<span class="token variable">@fetch_status</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">--判断获取是否成功</span>   <span class="token keyword">begin</span>    <span class="token keyword">if</span> <span class="token variable">@chengji</span><span class="token operator">></span><span class="token number">90</span>         <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span>grade<span class="token operator">+</span><span class="token number">3</span>                   <span class="token keyword">where</span> <span class="token keyword">current</span> <span class="token keyword">of</span> cc3   <span class="token keyword">else</span>      <span class="token keyword">if</span> <span class="token variable">@chengji</span><span class="token operator">></span><span class="token number">80</span>         <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span>grade<span class="token operator">+</span><span class="token number">5</span>                   <span class="token keyword">where</span> <span class="token keyword">current</span> <span class="token keyword">of</span> cc3   <span class="token keyword">else</span>      <span class="token keyword">if</span> <span class="token variable">@chengji</span><span class="token operator">></span><span class="token number">70</span>         <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span>grade<span class="token operator">+</span><span class="token number">7</span>                   <span class="token keyword">where</span> <span class="token keyword">current</span> <span class="token keyword">of</span> cc3    <span class="token keyword">else</span>       <span class="token keyword">if</span> <span class="token variable">@chengji</span><span class="token operator">></span><span class="token number">60</span>         <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span>grade<span class="token operator">+</span><span class="token number">8</span>                   <span class="token keyword">where</span> <span class="token keyword">current</span> <span class="token keyword">of</span> cc3    <span class="token keyword">else</span>       <span class="token keyword">update</span> sc <span class="token keyword">set</span> grade<span class="token operator">=</span>grade<span class="token operator">+</span><span class="token number">8</span>                   <span class="token keyword">where</span> <span class="token keyword">current</span> <span class="token keyword">of</span> cc3 <span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> cc3 <span class="token keyword">into</span>　　　　 <span class="token variable">@xuehao</span><span class="token punctuation">,</span><span class="token variable">@kechenghao</span><span class="token punctuation">,</span><span class="token variable">@chengji</span> <span class="token keyword">end</span><span class="token keyword">close</span> cc3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-2-事务"><a href="#4-1-2-2-事务" class="headerlink" title="4.1.2.2 事务"></a>4.1.2.2 事务</h3><p>事务（<strong>transaction</strong>）是并发控制逻辑上的基本单位。</p><p>事务处理控制语句：</p><ul><li><p>begin tain  —开始一个事务名</p></li><li><p>commit tain ——提交一个事务</p></li><li><p>rollback ——回滚一个事务（在发生情况时，撤消提交）</p></li></ul><h2 id="4-1-3-存储过程"><a href="#4-1-3-存储过程" class="headerlink" title="4.1.3 存储过程"></a>4.1.3 存储过程</h2><p>存储过程是一组预先编译好的<code>T-SQL</code>代码。</p><p>系统存储过程以<code>SP_</code>或<code>DT_</code>开头</p><p>创建存储过程的语法：</p><p>​       create procedure 存储过程名 [{@参数名 数据类型}<code>[=default][output]</code><br>​[{@参数名 数据类型}<code>[=default][output]</code><br>​       AS Select 语句</p><p><code>create procedure xs as select * from 学生表</code></p><p><code>exec xs --执行存储过程</code></p><p><strong>含参数</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> student_grade3  <span class="token variable">@student_name</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token variable">@course_name</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'数据库原理'</span><span class="token keyword">as</span>   <span class="token keyword">select</span> sname<span class="token punctuation">,</span>cname<span class="token punctuation">,</span>grade    <span class="token keyword">from</span> student s <span class="token keyword">inner</span> <span class="token keyword">join</span> sc <span class="token keyword">on</span> s<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno     <span class="token keyword">inner</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>cno<span class="token operator">=</span>sc<span class="token punctuation">.</span>cno    <span class="token keyword">where</span> sname<span class="token operator">=</span> <span class="token variable">@student_name</span>       <span class="token operator">and</span> cname<span class="token operator">=</span> <span class="token variable">@course_name</span><span class="token keyword">exec</span> student_grade3 <span class="token string">'王五'</span> <span class="token comment">--没给第二个参数,直接赋默认参数值</span><span class="token keyword">exec</span> student_grade3 <span class="token variable">@student_name</span> <span class="token operator">=</span><span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token variable">@course_name</span><span class="token operator">=</span><span class="token string">'数据库原理'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带输出参数的存储过程（带output）</strong>：</p><p>带有<code>output</code>标识的参数在存储过程中的修改将被保存；如果不带，那么当存储过程运行结束后，对参数的修改将消失。</p><p>如果要设置<code>output</code>，<strong>形参和实参要同时设置</strong>。</p><p>在<code>sql</code>中形参可以改变实参，下面的例子中，使用了<code>output</code>关键字使得其与<code>result</code>（也就是实参）进行了关联。var3在函数内部是形参，对<code>var3</code>的修改会反映到<code>result</code>上。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">proc</span> proc1  <span class="token variable">@var1</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@var2</span> <span class="token keyword">int</span><span class="token punctuation">,</span>  <span class="token variable">@var3</span> <span class="token keyword">int</span> output<span class="token keyword">as</span>   <span class="token keyword">set</span> <span class="token variable">@var3</span><span class="token operator">=</span><span class="token variable">@var2</span><span class="token operator">*</span><span class="token variable">@var1</span><span class="token keyword">declare</span> <span class="token variable">@result</span> <span class="token keyword">int</span> <span class="token keyword">exec</span> proc1 <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token variable">@result</span> output<span class="token comment">--在sql中形参可以改变实参(相当于C语言的地址传递)</span><span class="token keyword">print</span> <span class="token variable">@result</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">proc</span> proc11  <span class="token variable">@cn</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token variable">@avggrade</span> <span class="token keyword">int</span> output <span class="token keyword">as</span>   <span class="token keyword">select</span> <span class="token variable">@avggrade</span><span class="token operator">=</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">join</span>     course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno    <span class="token keyword">where</span> cname<span class="token operator">=</span><span class="token variable">@cn</span><span class="token keyword">declare</span> <span class="token variable">@aa</span> <span class="token keyword">int</span><span class="token keyword">exec</span> proc11 <span class="token string">'数据库原理'</span><span class="token punctuation">,</span> <span class="token variable">@aa</span> output <span class="token keyword">print</span> <span class="token variable">@aa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]查找老师编号并改变职称。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">proc</span> changaa <span class="token punctuation">(</span><span class="token variable">@ttno</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">int</span> <span class="token keyword">declare</span> <span class="token variable">@b</span> <span class="token keyword">int</span> <span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">select</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> tno<span class="token operator">=</span><span class="token variable">@ttno</span> <span class="token keyword">if</span> <span class="token variable">@b</span><span class="token operator">></span><span class="token number">0</span>   <span class="token keyword">begin</span>     <span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">update</span> teacher <span class="token keyword">set</span> proff<span class="token operator">=</span><span class="token string">'教授'</span> <span class="token keyword">where</span> tno<span class="token operator">=</span><span class="token variable">@ttno</span>   <span class="token keyword">end</span><span class="token keyword">return</span> <span class="token variable">@a</span><span class="token keyword">exec</span> changaa <span class="token number">804</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]创建一个新的表。然后创建一个存储过程，存储每个系每个分数段的学生统计成果。</p><p>分数段为90-100，每个系每门课有多少人？</p><p>分数段为80-89，每个系每门课有多少人？</p><p>分数段为70-79，每个系每门课有多少人？</p><p>分数段为60-69，每个系每门课有多少人？</p><p>分数段为&lt;60，每个系每门课有多少人？</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> hh2<span class="token keyword">create</span> <span class="token keyword">proc</span> procaaaa <span class="token keyword">as</span><span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'>90------'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun <span class="token keyword">into</span> hh2   <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">></span><span class="token number">90</span>     <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname <span class="token keyword">delete</span> <span class="token keyword">from</span>  hh2 <span class="token comment">---select * from hh2 </span><span class="token keyword">insert</span> <span class="token keyword">into</span> hh2 <span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'>90'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun  <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">>=</span><span class="token number">90</span>     <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname <span class="token keyword">insert</span> <span class="token keyword">into</span> hh2 <span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'80-89'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun  <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> grade<span class="token operator">&lt;</span><span class="token number">90</span>    <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname     <span class="token keyword">insert</span> <span class="token keyword">into</span> hh2 <span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'70-79'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun  <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> grade<span class="token operator">&lt;</span><span class="token number">80</span>    <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname <span class="token keyword">insert</span> <span class="token keyword">into</span> hh2 <span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'60-69'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun  <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">and</span> grade<span class="token operator">&lt;</span><span class="token number">70</span>    <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname     <span class="token keyword">insert</span> <span class="token keyword">into</span> hh2 <span class="token keyword">select</span> sdept<span class="token punctuation">,</span> cname<span class="token punctuation">,</span> <span class="token string">'&lt;60'</span> fengshuduan<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> tonjishu<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> pingjun  <span class="token keyword">from</span> student <span class="token keyword">join</span> sc <span class="token keyword">on</span> student<span class="token punctuation">.</span>sno<span class="token operator">=</span>sc<span class="token punctuation">.</span>sno    <span class="token keyword">join</span> course <span class="token keyword">on</span> sc<span class="token punctuation">.</span>cno<span class="token operator">=</span>course<span class="token punctuation">.</span>cno  <span class="token keyword">where</span> grade<span class="token operator">&lt;</span><span class="token number">60</span>     <span class="token keyword">group</span> <span class="token keyword">by</span> sdept<span class="token punctuation">,</span>cname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-1-4-触发器"><a href="#4-1-4-触发器" class="headerlink" title="4.1.4 触发器"></a>4.1.4 触发器</h2><ul><li><p>定义：触发器是一种特殊的存储过程。它与表紧密相连，主要用来保证数据的完整性。</p><p>create trigger 名 on 表名 for <code>[after][instead of][insert | delete | update ]</code><br>AS<br>   SQL语句</p></li><li><p><strong>deleted 删除数据的表</strong></p></li><li><p><strong>inserted 插入新数据的表</strong></p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> mytr <span class="token keyword">on</span> spk1 <span class="token keyword">for</span> <span class="token keyword">delete</span>  <span class="token comment">--设置一个删除触发器 </span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@OID</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">--定义一个变量，用于从逻辑表中存储被删除的记录信息</span><span class="token keyword">select</span> <span class="token variable">@OID</span><span class="token operator">=</span>商品代号 <span class="token keyword">from</span> deleted   <span class="token comment">--从逻辑表中检索被删除的商品代号</span><span class="token keyword">delete</span> <span class="token keyword">from</span> spk2 <span class="token keyword">where</span> 商品代号<span class="token operator">=</span><span class="token variable">@OID</span><span class="token keyword">delete</span> <span class="token keyword">from</span> spk1 <span class="token keyword">where</span> 商品代号<span class="token operator">=</span><span class="token string">'DSJ-120'</span><span class="token comment">--此条语句执行后，相应的在SPK2中的DSJ-120记录也被删除。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]插入数据触发触发器的语句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tt2 <span class="token keyword">on</span> sc <span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span>   <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted <span class="token keyword">where</span> grade<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">or</span> grade<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">begin</span><span class="token keyword">print</span> <span class="token string">'成绩要在0-100之间'</span><span class="token keyword">rollback</span><span class="token keyword">end</span><span class="token keyword">insert</span> <span class="token keyword">into</span> sc <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'106'</span><span class="token punctuation">,</span><span class="token string">'005'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">195</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>保证update合法：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">trigger</span> tri_grade <span class="token keyword">on</span> sc <span class="token keyword">for</span> <span class="token keyword">update</span> <span class="token keyword">as</span><span class="token keyword">if</span> <span class="token keyword">update</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted <span class="token keyword">join</span> deleted <span class="token keyword">on</span> inserted<span class="token punctuation">.</span>sno<span class="token operator">=</span>deleted<span class="token punctuation">.</span>sno <span class="token keyword">where</span> inserted<span class="token punctuation">.</span>grade<span class="token operator">>=</span><span class="token number">60</span> <span class="token operator">and</span> deleted<span class="token punctuation">.</span>grade<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span>   <span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[例1]在sc表中定义一个保证课程号在课程表的课程范围内的插入触发器。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tt3 <span class="token keyword">on</span> sc <span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span>   <span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted <span class="token keyword">where</span> cno <span class="token operator">not</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token keyword">select</span> cno <span class="token keyword">from</span> course<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]在sc表上定义一个限制学生选课门数不能超5门的触发器。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> tg3<span class="token keyword">create</span> <span class="token keyword">trigger</span> tg3 <span class="token keyword">on</span> sc <span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">declare</span> <span class="token variable">@aa</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@aa</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> sno <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> sno <span class="token keyword">from</span> inserted<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@aa</span><span class="token operator">>=</span><span class="token number">5</span><span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例3]在course表上定义一个限制删除有学生选课程的触发器。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tg4 <span class="token keyword">on</span> course <span class="token keyword">for</span> <span class="token keyword">delete</span><span class="token keyword">as</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> cno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> cno <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">rollback</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PART2-Oracle"><a href="#PART2-Oracle" class="headerlink" title="PART2.Oracle"></a>PART2.Oracle</h1><h2 id="4-2-1-PL-x2F-SQL块的组成"><a href="#4-2-1-PL-x2F-SQL块的组成" class="headerlink" title="4.2.1 PL&#x2F;SQL块的组成"></a>4.2.1 PL&#x2F;SQL块的组成</h2><p>一个基本的PL&#x2F;SQL块由3部分组成：定义部分（DECLARE），可执行部分（BEGIN），异常处理部分（EXCEPTION）。 </p><p><strong>declare</strong></p><p>​变量定义</p><p><strong>begin</strong></p><p>​程序主体[<strong>可执行部分</strong>]</p><p><strong>exception</strong></p><p>​异常处理部分</p><p><strong>end</strong></p><p>简单变量定义的一般格式：<br><code>&lt;variablename&gt; [CONSTANT]&lt;datatype&gt; [[NOT NULL] &#123;DEFAULT|:=&#125; &lt;expression&gt;];</code></p><p>[说明]</p><ul><li><p>在PL&#x2F;SQL中使用的变量、常量、游标和异常处理的名字都必须先定义后使用。</p></li><li><p>定义部分是包括在关键字DECLARE和BEGIN之间的部分，每条语句后用’;’结束。</p></li><li><p>每行只能定义一个标识符。</p></li><li><p>如果加上<strong>关键字CONSTANT</strong>,则表示所定义的标识符为一个常量，必须为它<strong>赋初值</strong>。</p></li><li><p>标识符的命名规则与SQL的规则基本相同，即每个标识符必须以字母开头，而且不分大小写。如果定义的标识符不能为空，则必须加上关键字NOT NULL,并赋初值。</p></li><li><p>为标识符赋值时，使用赋值符号’<strong>:&#x3D;</strong>‘，默认值为空。</p></li></ul><h3 id="4-2-1-1-定义"><a href="#4-2-1-1-定义" class="headerlink" title="4.2.1.1 定义"></a>4.2.1.1 定义</h3><p><strong>Oracle中常用数据类型：</strong></p><table><thead><tr><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Number</td><td align="center">数字型，**Number(8,2)**表示总共有8个有效数字，小数点后有两位</td></tr><tr><td align="center">Char</td><td align="center">字符型，最大2000个字符</td></tr><tr><td align="center">Date</td><td align="center">日期型，包含日期、小时、分、秒</td></tr><tr><td align="center">Long</td><td align="center">大文本</td></tr><tr><td align="center">Boolean</td><td align="center">逻辑型，取值为true、false、null</td></tr><tr><td align="center"><strong>Varchar2</strong></td><td align="center"><strong>变长字符型</strong>，最大为4000个字符</td></tr></tbody></table><p>声明一个变量，使它的类型与某个变量或<strong>数据库基本表</strong>中某个列的数据类型一致（不知道该变量或列的数据类型）<strong>可以使用%TYPE</strong>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>teacher_name <span class="token keyword">char</span>（<span class="token number">5</span>）<span class="token punctuation">;</span>student_name teacher<span class="token punctuation">.</span>name<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token comment">--……</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记录类型定义的一般格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TYPE</span> <span class="token operator">&lt;</span>recordtypename<span class="token operator">></span><span class="token punctuation">[</span>记录类型名<span class="token punctuation">]</span> <span class="token operator">IS</span> RECORD<span class="token punctuation">(</span> <span class="token operator">&lt;</span>field1<span class="token operator">></span> <span class="token operator">&lt;</span>datatype<span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">]</span>&#123;<span class="token keyword">DEFAULT</span><span class="token operator">|</span>:<span class="token operator">=</span>&#125; <span class="token operator">&lt;</span>expression<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>field2<span class="token operator">></span> …<span class="token punctuation">]</span> <span class="token punctuation">)</span>； <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>[说明]</p><ul><li>标识符 <recordtypename>是定义的<strong>记录类型名</strong></li><li>记录类型可以参照C语言的<strong>结构体类型</strong></li><li>要定义记录型变量，定义方法与前面标量型变量定义一样</li><li>记录类型变量的属性引用方法是**’.’引用**</li><li>声明一个记录型变量，使它的类型与某个基本表的数据结构一致，可以使用**%ROWTYPE**的形式定义。</li></ul><h3 id="4-2-1-2-可执行部分"><a href="#4-2-1-2-可执行部分" class="headerlink" title="4.2.1.2 可执行部分"></a>4.2.1.2 可执行部分</h3><p><strong>组成语句</strong>：</p><ul><li><p>变量赋值语句</p></li><li><p>数据查询、数据操纵和事务控制语句</p></li></ul><p><strong>赋值语句</strong>：</p><p>1.标量型变量赋值</p><p><code>TEACHER_NAME := &#39;LIU&#39;;</code></p><p>2.记录类型变量的赋值</p><p><code>STUDENT1.NAME :=&#39;FAN&#39;;</code></p><p>3.%ROWTYPE型变量的赋值</p><p><code>EMP_VALUE.NAME:=&#39;BLACK&#39;;</code></p><p>4.<strong>用SELECT语句为%ROWTYPE型变量整个赋值</strong></p><p>在PL&#x2F;SQL中，SELECT语句必须与INTO子句相配合，在INTO子句后面跟需要赋值的变量。</p><p><code>SELECT * INTO EMP_VALUE FROM EMP WHERE ENAME:=’FA’;</code></p><p>[例1]计算表EMP中所有雇员的平均工资。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span><span class="token comment">--定义一个数值型变量。</span>avg_sal number<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token comment">--使用select语句进行赋值</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token keyword">into</span> avg_sal<span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--输出变量结果。</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>avg_sal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment">--程序写完加/</span><span class="token comment">--使用DBMS_OUTPUT.PUT_LINE之前，应该设置环境变量SERVEROUTPUT。(SET SERVEROUTPUT ON)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-1-3-事务控制命令"><a href="#4-2-1-3-事务控制命令" class="headerlink" title="4.2.1.3 事务控制命令"></a>4.2.1.3 事务控制命令</h3><p>事务（transaction）的概念：</p><p>事务是指在相邻两条事务控制命令之间的一组sql语句，它是对数据库操作的逻辑单元。</p><p>事务控制命令有：</p><ul><li>COMMIT (事务提交)</li><li>ROLLBACK（事务回退）</li><li>SAVEPOINT（设置保存点命令）</li></ul><p>在Oracle数据库中，<strong>进程</strong>包含：</p><table><thead><tr><th align="center">数据处理区</th><th align="center">日志区</th></tr></thead></table><p>在<strong>缓冲区</strong>内存在：</p><table><thead><tr><th align="center">data</th><th align="center">log</th></tr></thead></table><p>与<strong>磁盘</strong>间建立连接。</p><p>&#x3D;&#x3D;事务提交命令&#x3D;&#x3D;（Commit）：</p><ul><li><p>支持<strong>先期写入协议</strong>：先写日志，才能写数据；</p></li><li><p>当发生不可控因素使得数据未写入其中时，观察日志，若发现事务并没有结束，则执行<strong>undo</strong>撤销还原流程；若发现事务开始、结束流程已经完成，则执行<strong>redo</strong>重做流程，写入<strong>data</strong>区。</p></li><li><p>提交命令就是使<strong>对数据的改变永久化</strong>，即：<strong>脏数据（指数据与磁盘间数据不一致）—&gt;干净数据</strong>。</p></li><li><p>Oracle中设置了一个自动提交的开关，如果把它设置为ON,那么所有的改变数据库中数据的语句都会立即生效，影响数据库中的数据，<strong>缺省值为OFF</strong>。格式：SET AUTOCOMMIT [ON|OFF];</p></li></ul><p>&#x3D;&#x3D;事务回退命令&#x3D;&#x3D;（Rollback）：</p><p>在尚未对数据库提交的时候，可以用事务回退命令ROLLBACK，将数据库回退到上次COMMIT后的状态。</p><p>一旦事务已经提交，就不能再使用事务回退命令进行回退了。</p><p>事务回退将回退整个事务，如果只需回退事务的一部分时，可以使用保存点，将整个事务划分为若干部分，这样就可以回退部分事务了。</p><p><strong>保存点的设置和使用格式</strong>：</p><ul><li><strong>SAVEPOINT</strong> &lt;保存点名称&gt;;</li><li>ROLLBACK TO &lt;保存点名称&gt;;</li></ul><h3 id="4-2-1-4-流程控制"><a href="#4-2-1-4-流程控制" class="headerlink" title="4.2.1.4 流程控制"></a>4.2.1.4 流程控制</h3><p><strong>IF_THEN_ELSE语句</strong>：</p><p>IF &lt;条件&gt; THEN<br>&lt;语句组1&gt;<br>ELSE<br>&lt;语句组2&gt;<br>END IF;</p><p>[例]根据表emp中DEPTNO字段的值，为姓名为FAN的雇员修改工资；若部门号为10，则工资加100；若部门号为20，则工资加300；否则工资加400。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span>    name emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span> :<span class="token operator">=</span> <span class="token string">'FAN'</span><span class="token punctuation">;</span>    increment emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>    fandept emp<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> deptno <span class="token keyword">into</span> fandept <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'FAN'</span><span class="token punctuation">;</span>    <span class="token comment">--Sql Server语法</span>    <span class="token comment">--declare @sno int</span>    <span class="token comment">--select @sno = Sdept from emp where ename = 'FAN';</span>    <span class="token keyword">if</span> fandept <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">then</span>         increment :<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    elsif fandept <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">then</span>        increment :<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>     increment :<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> sal <span class="token operator">+</span>increment <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'FAN'</span><span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>FOR循环</strong>：</p><p>FOR &lt;循环变量&gt; IN [REVERSE] &lt;下界..上界&gt;<br>LOOP<br>&lt;语句组&gt;<br>END LOOP;</p><p>[示例]从键盘接受一个整数，计算它的阶乘，并在屏幕上打印出来。</p><p><strong>全局变量的引用时，必须加上’:’</strong>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">variable fac number<span class="token comment">--全局变量</span><span class="token keyword">DECLARE</span>NUM NUMBER<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>:<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    :fac:<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> NUM<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span>        <span class="token keyword">for</span> I <span class="token operator">in</span> <span class="token number">1.</span><span class="token punctuation">.</span>NUM <span class="token keyword">loop</span><span class="token comment">--Sql Server使用while循环</span>            :fac:<span class="token operator">=</span>:fac <span class="token operator">*</span> I<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">PRINT</span> fac<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>直到型循环</strong>：</p><p>LOOP<br>&lt;语句组1&gt;<br>EXIT [WHEN &lt;条件&gt;]；<br>&lt;语句组2&gt;<br>END LOOP;</p><p>执行过程：<br>先执行循环体&lt;语句组1&gt;，然后判断&lt;条件&gt;，如果条件为真，则结束循环，否则继续循环。</p><p>说明：<br>直到型循环的循环体至少执行1次。</p><p><strong>当型循环</strong>：</p><p>WHILE &lt;条件&gt; LOOP<br>&lt;语句组&gt;<br>END LOOP;</p><p><strong>标号</strong></p><ul><li><strong>在循环中的语法格式</strong>：</li></ul><p>《标号》<br>LOOP<br>&lt;语句组1&gt;<br>EXIT  标号 [WHEN &lt;条件&gt;]；<br>&lt;语句组2&gt;<br>END LOOP 标号 ;</p><ul><li><strong>GOTO语句</strong>：</li></ul><p>《标号》<br>…<br>GOTO 标号；</p><h2 id="4-2-2-游标"><a href="#4-2-2-游标" class="headerlink" title="4.2.2 游标"></a>4.2.2 游标</h2><p><strong>定义游标</strong></p><p>CURSOR &lt;游标名&gt; IS &lt;SELECT 语句&gt;;</p><p>[说明]</p><p>PL&#x2F;SQL块中，游标的定义应该放在定义部分。</p><p><strong>打开游标</strong></p><p>OPEN &lt;游标名&gt;；</p><p>[说明]</p><p>打开游标，实际上是执行游标定义时对应的SELECT语句，将查询结果检索到工作区中。</p><p><strong>提取数据</strong></p><p>FETCH &lt;游标名&gt; INTO 变量1,变量2,……</p><p>[说明]</p><p>游标指针只能向下移动，不能回退。</p><p><strong>关闭游标</strong></p><p>CLOSE &lt;游标名&gt;；</p><p>[说明]</p><p>关闭游标的作用在于，使游标所对应的内存工作区变为无效，并释放与游标相关的系统资源。</p><p>[例]修改表emp中各个雇员的工资，若雇员属于10号部门，则增加<code>$100</code>，若雇员属于20号部门，则增加<code>$200</code>，若雇员属于30号部门，则增加<code>$300</code>.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    <span class="token keyword">Row</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token comment">--记录型变量</span>    Increment number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">CURSOR</span> cursor_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span>    i number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> i <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    <span class="token keyword">OPEN</span> cursor_emp<span class="token punctuation">;</span>    <span class="token operator">&lt;&lt;</span>label<span class="token operator">>></span>    <span class="token keyword">FETCH</span> cursor_emp <span class="token keyword">INTO</span> <span class="token keyword">row</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">row</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">then</span>    increment:<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    elsif <span class="token keyword">row</span><span class="token punctuation">.</span>deptno<span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">then</span>    increment:<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    increment:<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> sal <span class="token operator">+</span> increment <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token keyword">row</span><span class="token punctuation">.</span>ename<span class="token punctuation">;</span>    i:<span class="token operator">=</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span> <span class="token keyword">goto</span> label<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">close</span> cursor_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>游标的属性</strong></p><p>%ISOPEN<br>该属性是布尔型。如果游标已经打开，返回TRUE,否则为FALSE。</p><p><strong>%FOUND</strong><br>布尔型，如果最近一次使用FETCH语句，<strong>有返回结果则为TRUE</strong>,否则为FALSE;（相当于Sql Server的@@fetch_status）</p><p>%NOTFOUND<br>布尔型，如果最近一次使用FETCH语句,没有返回结果则为TRUE,否则为FALSE;</p><p>%ROWCOUNT<br>数值型，描述的是到目前为止实际从游标工作区抽取的记录数。 </p><p>[说明]</p><p>游标属性只能在PL&#x2F;SQL块中使用，不能在SQL命令中使用。</p><blockquote><p>属性的引用格式：游标名[属性名]</p><p>[说明]属性名与游标名之间没有空格。</p></blockquote><p>上例可改为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    <span class="token keyword">row</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>    increment number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">CURSOR</span> cursor_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span>    I NUMBER<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">OPEN</span> cursor_emp<span class="token punctuation">;</span>    <span class="token operator">&lt;&lt;</span>label<span class="token operator">>></span>    <span class="token keyword">FETCH</span> cursor_emp <span class="token keyword">INTO</span> <span class="token keyword">row</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">row</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">then</span>    increment:<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    elsif <span class="token keyword">row</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">20</span>  <span class="token keyword">then</span>     increment :<span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    increment:<span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> sal<span class="token operator">+</span> increment <span class="token keyword">where</span> ENAME <span class="token operator">=</span> <span class="token keyword">ROW</span><span class="token punctuation">.</span>ENAME<span class="token punctuation">;</span>    <span class="token keyword">if</span> cursor_emp<span class="token operator">%</span>FOUND <span class="token keyword">then</span>    <span class="token keyword">goto</span> label<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;<strong>FOR循环中游标的使用</strong>&#x3D;&#x3D;：</p><p>FOR &lt;变量名&gt; IN &lt;游标名&gt; LOOP<br>  &lt;循环体&gt;<br>END LOOP;</p><p>[说明]</p><ul><li>系统自动打开游标，不用显式地使用OPEN语句打开；</li><li>系统隐含地定义了一个数据类型为%ROWTYPE的变量，并以此作为循环的计数器；</li><li>系统重复地自动从游标工作区中提取数据并放入计数器变量中；</li><li>当游标工作区中所有的记录都被提取完毕或循环中断时，系统自动地关闭游标。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>  increment number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">CURSOR</span> cursor_emp <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP<span class="token punctuation">;</span><span class="token keyword">BEGIN</span>  <span class="token keyword">FOR</span> emp_record <span class="token operator">in</span> cursor_emp <span class="token keyword">LOOP</span><span class="token comment">--emp_record无需定义,自动就为记录型变量</span>      <span class="token keyword">if</span> emp_record<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">then</span>         increment:<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>      elsif emp_record<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">20</span>  <span class="token keyword">then</span>         increment :<span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        increment:<span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>      <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>      <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> sal<span class="token operator">+</span> increment <span class="token keyword">where</span> EMPNO <span class="token operator">=</span> emp_record<span class="token punctuation">.</span>EMPNO<span class="token punctuation">;</span>  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带参数游标的使用</strong>：</p><p>CURSOR 游标名（&lt;参数1&gt; &lt;类型&gt;  [,&lt;参数2&gt;&lt;类型&gt;…]）<br>   IS &lt; SELECT 语句&gt;；</p><p>打开带参数的游标时，参数个数和数据类型必须与其定义时保持一致。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    increment number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">CURSOR</span> cursor_emp<span class="token punctuation">(</span>v_deptno emp<span class="token punctuation">.</span>deptno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span>      <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> deptno <span class="token operator">=</span> v_deptno<span class="token punctuation">;</span><span class="token comment">--定义参数后,查询语句内一定要用到参数</span><span class="token keyword">BEGIN</span>    <span class="token keyword">for</span> I <span class="token operator">in</span> <span class="token number">1.</span><span class="token number">.3</span> <span class="token keyword">loop</span>        <span class="token keyword">for</span> emp_record <span class="token operator">in</span> cursor_emp<span class="token punctuation">(</span>I<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">loop</span>            increment:<span class="token operator">=</span><span class="token number">100</span><span class="token operator">*</span>I<span class="token punctuation">;</span>            <span class="token keyword">update</span> emp <span class="token keyword">set</span> sal <span class="token operator">=</span> sal <span class="token operator">+</span>increment <span class="token keyword">where</span> EMPNO<span class="token operator">=</span> emp_record<span class="token punctuation">.</span>empno<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>    <span class="token keyword">commit</span> <span class="token keyword">work</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-3-PL-x2F-SQL中的异常处理"><a href="#4-2-3-PL-x2F-SQL中的异常处理" class="headerlink" title="4.2.3 PL&#x2F;SQL中的异常处理"></a>4.2.3 PL&#x2F;SQL中的异常处理</h2><p>预定义异常：</p><p>对于Oracle预定义的异常，当预定义的情况发生时，系统将自动触发。</p><p>用户自定义的异常：</p><p>需要程序员自己定义代码，需<strong>抛出异常</strong>（使用&#x3D;&#x3D;<strong>RAISE语句</strong>&#x3D;&#x3D;），对异常情况进行处理。</p><p>如果没有对异常进行处理，程序将结束。</p><p><strong>异常处理</strong>的一般格式：</p><p>DECLARE<br>  …;<br>BEGIN<br>  …;<br>EXCEPTION<br>  WHEN 异常情况1 [OR 异常情况2…] THEN<br>   …;<br>  WHEN 异常情况3 [OR 异常情况4…] THEN<br>  …；<br>  WHEN OTHERS THEN<br>   …；<br>END;</p><p>[例]处理预定义异常的一个例子。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    <span class="token keyword">cursor</span> emp_cursor <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>    record emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">fetch</span> emp_cursor <span class="token keyword">into</span> record<span class="token punctuation">;</span>exception    <span class="token keyword">when</span> INVALID_CURSOR <span class="token keyword">then</span>    <span class="token keyword">if</span> emp_cursor<span class="token operator">%</span>isopen <span class="token keyword">then</span>    <span class="token boolean">null</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">open</span> emp_cursor<span class="token punctuation">;</span>        <span class="token keyword">fetch</span> emp_cursor <span class="token keyword">into</span> record<span class="token punctuation">;</span>        <span class="token keyword">close</span> emp_cursor<span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> others <span class="token keyword">then</span>    <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义异常</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    out_of_stock EXCEPTION<span class="token punctuation">;</span>    number_on_hand NUMBER<span class="token punctuation">;</span><span class="token keyword">BEGIN</span>…    <span class="token keyword">IF</span> number_on_hand <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">THEN</span>    RAISE out_of_stock<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>…EXCEPTION    <span class="token keyword">WHEN</span> out_of_stock <span class="token keyword">THEN</span>    <span class="token comment">--handle the error</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-4-存储过程"><a href="#4-2-4-存储过程" class="headerlink" title="4.2.4 存储过程"></a>4.2.4 存储过程</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">PROCEDURE</span> procedure_name <span class="token punctuation">[</span><span class="token punctuation">(</span>parameter1 <span class="token punctuation">[</span>&#123;输入输出<span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token operator">IN</span> <span class="token keyword">OUT</span>&#125;<span class="token punctuation">]</span> datatype <span class="token punctuation">[</span>&#123;:<span class="token operator">=</span><span class="token operator">|</span><span class="token keyword">DEFAULT</span>&#125; expression<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> parameter2 <span class="token punctuation">[</span>&#123;<span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token operator">IN</span> <span class="token keyword">OUT</span>&#125;<span class="token punctuation">]</span> datatype <span class="token punctuation">[</span>&#123;:<span class="token operator">=</span><span class="token operator">|</span><span class="token keyword">DEFAULT</span>&#125; expression<span class="token punctuation">]</span> …<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>AUTHID &#123;<span class="token keyword">CURRENT_USER</span><span class="token operator">|</span>DESIGNER&#125;<span class="token punctuation">]</span> &#123;<span class="token operator">IS</span><span class="token operator">|</span><span class="token keyword">AS</span>&#125; <span class="token punctuation">[</span>declarations<span class="token punctuation">]</span><span class="token keyword">BEGIN</span> code<span class="token punctuation">[</span>EXCEPTIONexception_handlers<span class="token punctuation">]</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由定义可以看出，存储过程的定义有两部分：声明部分，程序主体部分。主体部分实质上是PL&#x2F;SQL块。</p><p><strong>参数类型</strong>：</p><p>参数的数据类型可以采用PL&#x2F;SQL语言的标准数据类型。但是，在定义过程参数时，&#x3D;&#x3D;<strong>不能强制说明参数的长度</strong>&#x3D;&#x3D;，否则将出错。<br>如果要让定义的参数严格和表定义或者表中的某一列的定义一样，这需要使用属性**%ROWTYPE<strong>、</strong>%TYPE**。</p><p><strong>参数样式</strong>：</p><p>参数的有效样式为：IN、OUT、IN OUT三种。</p><ul><li>IN   该参数将作为一个输入变量。 这个变量为<strong>只读变量</strong>，在过程体中不允许被赋值——<strong>程序外传给存储过程</strong></li><li>OUT 该参数将作为过程的返回值，被调用者使用。在过程体中不允许使用它的值，只能对它赋值——<strong>形参可以改变实参</strong></li><li>IN OUT 该参数既可以作为输入参数，也可以作为输出参数</li></ul><p>[例1]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">PROCEDURE</span> printLine<span class="token punctuation">(</span>width <span class="token operator">IN</span> <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>chr <span class="token operator">IN</span> <span class="token keyword">CHAR</span> <span class="token keyword">DEFAULT</span> ‘<span class="token operator">-</span>’<span class="token punctuation">)</span><span class="token comment">--char不能指定长度</span><span class="token operator">IS</span><span class="token keyword">BEGIN</span>    <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>width <span class="token keyword">LOOP</span>        dbms_output<span class="token punctuation">.</span>put<span class="token punctuation">(</span>chr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>‘’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> printLine<span class="token punctuation">;</span><span class="token comment">--调用</span><span class="token keyword">begin</span>printline<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span>’<span class="token operator">*</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>printline<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span>’<span class="token operator">=</span>‘<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]存储过程query_stu，作用：实现对student表的查询，要求 输入学号，得到学生的具体情况。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> serveroutput <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> query_stu<span class="token punctuation">(</span>sno_p <span class="token operator">in</span> student<span class="token punctuation">.</span>sno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token comment">--参数</span><span class="token keyword">As</span><span class="token comment">--开始为程序主体</span>   not_exist exception<span class="token punctuation">;</span><span class="token comment">--定义异常</span>   <span class="token keyword">temp</span> student<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token comment">--定义记录型参数</span>   <span class="token keyword">cursor</span> judge <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sno<span class="token operator">=</span>sno_p<span class="token punctuation">;</span>   i number<span class="token punctuation">;</span>  <span class="token keyword">begin</span>  <span class="token keyword">open</span> judge<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> judge <span class="token keyword">into</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> judge<span class="token operator">%</span>notfound <span class="token keyword">then</span>       raise not_exist<span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'sno'</span><span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token string">'sname'</span><span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token string">'sex'</span><span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token string">'birthday'</span><span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--'||'为制表位</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token keyword">temp</span><span class="token punctuation">.</span>sno<span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token keyword">temp</span><span class="token punctuation">.</span>sname<span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token keyword">temp</span><span class="token punctuation">.</span>sex<span class="token operator">||</span><span class="token string">'  '</span><span class="token operator">||</span><span class="token keyword">temp</span><span class="token punctuation">.</span>birthday<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span><span class="token keyword">temp</span><span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">close</span> judge<span class="token punctuation">;</span>exception  <span class="token keyword">when</span> not_exist <span class="token keyword">then</span>  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">'student is not found!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">close</span> judge<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-5-存储函数"><a href="#4-2-5-存储函数" class="headerlink" title="4.2.5 存储函数"></a>4.2.5 存储函数</h2><p>与存储过程相比，多一个<code>return returntype</code>（如char等）。</p><p>[例1]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> totalsal<span class="token punctuation">(</span>v_empno <span class="token operator">in</span> emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">RETURN</span> number<span class="token operator">IS</span>totalsal1 number<span class="token punctuation">;</span><span class="token keyword">Begin</span><span class="token keyword">select</span> sal <span class="token operator">+</span> comm <span class="token keyword">into</span> totalsal1 <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span>v_empno<span class="token punctuation">;</span><span class="token keyword">return</span> totalsal1<span class="token punctuation">;</span><span class="token keyword">End</span><span class="token punctuation">;</span>     <span class="token comment">--调用</span><span class="token keyword">select</span> empno<span class="token punctuation">,</span>totalsal<span class="token punctuation">(</span>empno<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> totalsal<span class="token punctuation">(</span>empno<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> f1<span class="token punctuation">(</span>sno1 student<span class="token punctuation">.</span>sno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token operator">is</span>e1 exception<span class="token punctuation">;</span>t1 student<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token comment">--记录型变量用于提取数据</span><span class="token keyword">cursor</span> c3 <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sno <span class="token operator">=</span> sno1<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">open</span> c3<span class="token punctuation">;</span><span class="token keyword">fetch</span> c3 <span class="token keyword">into</span> t1<span class="token punctuation">;</span><span class="token keyword">if</span> c3<span class="token operator">%</span>notfound <span class="token keyword">then</span>raise e1<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">update</span> student <span class="token keyword">set</span> sage <span class="token operator">=</span> sage <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> sno <span class="token operator">=</span> sno1<span class="token punctuation">;</span><span class="token comment">--年龄加一</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>exception<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-6-触发器"><a href="#4-2-6-触发器" class="headerlink" title="4.2.6 触发器"></a>4.2.6 触发器</h2><p>CREATE [OR REPLACE] TRIGGER trigger<br> <strong>{BEFORE|AFTER}</strong>–<strong>先执行触发器还是先执行语句</strong><br> {DELETE|INSERT|UPDATE [OF column [,column]…]}<br> [OR{DELETE|INSERT|UPDATE [OF column [,column]…]}]…<br> ON table<br> <strong>FOR EACH ROW</strong> [WHEN condition]–每执行一行语句调用一次<br> …pl&#x2F;sql block..–块语句<br> END [trigger]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">TRIGGER</span> logemp <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token operator">OR</span> <span class="token keyword">UPDATE</span> <span class="token operator">OR</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> EMP<span class="token keyword">DECLARE</span>statementtype <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">IF</span> INSERTING <span class="token keyword">THEN</span>statementtype:<span class="token operator">=</span><span class="token string">'INSERT!'</span><span class="token punctuation">;</span>ELSIF UPDATING <span class="token keyword">THEN</span>statementtype:<span class="token operator">=</span><span class="token string">'UPDATE!'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span>statementtype:<span class="token operator">=</span><span class="token string">'DELETE!'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>statementtype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被删的记录放在**:old<strong>全局变量（</strong>记录型变量<strong>）中，新记录放在</strong>:new**全局变量中。</p><p>[例1]触发器before_del, 当要在teacher表中删除一个老师时判断老师是否已经授课，如果有的话，引发一个异常，返回给用户无法删除的消息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> before_del before <span class="token keyword">delete</span> <span class="token keyword">on</span> teacher <span class="token keyword">for each row</span><span class="token keyword">declare</span><span class="token keyword">temp</span> course<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>cannot_delete exception<span class="token punctuation">;</span><span class="token keyword">cursor</span> judge <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> tno<span class="token operator">=</span>:OLD<span class="token punctuation">.</span>tno<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">open</span> judge<span class="token punctuation">;</span><span class="token keyword">fetch</span> judge <span class="token keyword">into</span> <span class="token keyword">temp</span><span class="token punctuation">;</span><span class="token keyword">if</span> judge<span class="token operator">%</span>found <span class="token keyword">then</span> raise cannot_delete<span class="token punctuation">;</span><span class="token comment">--Oracle抛出异常会自动将当前操作取消</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">close</span> judge<span class="token punctuation">;</span>exception<span class="token keyword">when</span> cannot_delete <span class="token keyword">then</span>raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20002</span><span class="token punctuation">,</span><span class="token string">'You can not delete this teacher!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">close</span> judge<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]在sc表上定义一个限制学生选课门数不能超5门的触发器。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> t6 before <span class="token keyword">insert</span> <span class="token keyword">on</span> sc <span class="token keyword">for each row</span><span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>e4 exception<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> i <span class="token keyword">from</span> sc sno <span class="token operator">=</span> :new<span class="token punctuation">.</span>sno<span class="token punctuation">;</span><span class="token keyword">if</span> i<span class="token operator">>=</span><span class="token number">5</span> <span class="token keyword">then</span> raise e4<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>exception<span class="token comment">--……</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ch5-关系数据理论"><a href="#ch5-关系数据理论" class="headerlink" title="ch5.关系数据理论"></a>ch5.关系数据理论</h1><p>数据依赖包括函数依赖和多值依赖。</p><h2 id="5-1-函数依赖"><a href="#5-1-函数依赖" class="headerlink" title="5.1 函数依赖"></a>5.1 函数依赖</h2><h3 id="5-1-1-函数依赖的定义"><a href="#5-1-1-函数依赖的定义" class="headerlink" title="5.1.1 函数依赖的定义"></a>5.1.1 函数依赖的定义</h3><p>设$R(U)$是属性集$U$上的关系模式， $X,Y\subseteq U$ （$X,Y$是属性）， 若对于$\forall r(值)∈R(U)$，$\forall t,s∈r$（<strong>元组</strong>）,如果$t[X]&#x3D;s[X]$（若每个都不相等也满足条件），能推出$t[Y]&#x3D;s[Y]$，则称“<strong>X函数决定Y</strong>”,或“<strong>Y函数依赖于X</strong>”,记作：$X\rightarrow Y$，称$X$为决定因素。</p><p>若$\exists t, s \in r, t[X]&#x3D;s[X]$，但$t[Y]\neq s[Y]$，则称“X不函数决定Y”或“Y不函数依赖于X”,记作：$X\nrightarrow Y$。</p><p>函数依赖关系可以理解成关系数据库中“<strong>码</strong>”的理论基础；函数依赖与别的数据依赖一样是<strong>语义范畴的概念</strong>，只能根据语义来确定一个函数依赖。</p><p><code>SDC</code>中的函数依赖：$SNO\rightarrow DEPT,DEPT\rightarrow MNAME,(SNO,CNAME)\rightarrow GRADE$</p><h3 id="5-1-2-函数依赖的分类"><a href="#5-1-2-函数依赖的分类" class="headerlink" title="5.1.2 函数依赖的分类"></a>5.1.2 函数依赖的分类</h3><p>（1）<strong>平凡的函数依赖与非平凡的函数依赖</strong></p><ul><li>如果$X\rightarrow Y$，且$Y \nsubseteq X$，则称$X\rightarrow Y$为非平凡的函数依赖。</li><li>如果$X\rightarrow Y$，且$Y \subseteq X$，则称$X\rightarrow Y$为平凡的函数依赖。【<strong>必然成立</strong>】</li></ul><p>如：$SNO\rightarrow SNO$是平凡的函数依赖。</p><p>在后面的讨论中，一般函数依赖指非平凡的函数依赖。</p><p>（2）<strong>完全函数依赖与部分函数依赖</strong></p><ul><li>如果$X\rightarrow Y$，对于任意$X$的真子集$X^{\prime}$，都有$X^{\prime}\nrightarrow Y$，则称$Y$对$X$<strong>完全函数依赖</strong>，记作$X \stackrel{f}{\longrightarrow} Y$</li><li>如果$X\rightarrow Y$，存在$X$的真子集$X^{\prime}$，使得$X^{\prime}\rightarrow Y$ ，则称$Y$对$X$<strong>部分函数依赖</strong>，记作$X \stackrel{p}{\longrightarrow} Y$</li></ul><p>（3）<strong>传递函数依赖与直接函数依赖</strong></p><ul><li>在$R(U)$中，如果$X \rightarrow Y(Y \nsubseteq X),Y\nrightarrow X,Y \rightarrow Z$，则称$Z$对$X$<strong>传递函数依赖</strong></li></ul><h3 id="5-1-3-函数依赖的逻辑蕴含"><a href="#5-1-3-函数依赖的逻辑蕴含" class="headerlink" title="5.1.3 函数依赖的逻辑蕴含"></a>5.1.3 函数依赖的逻辑蕴含</h3><p>关系模式$R$，$F$是其函数依赖，$X,Y$是其<strong>属性子集</strong>，如果从$F$的函数依赖能够推出$X\rightarrow Y$，则称$F$逻辑蕴含$X\rightarrow Y$，记作$F\models X\rightarrow Y$。</p><p>被$F$所逻辑蕴含的<strong>函数依赖</strong>的全体<strong>所构成的集合</strong>称作$F$的闭包，记作$F^{+}$。[即根据已知F函数依赖<strong>能推导出来的集合</strong>]</p><p>示例：</p><p>$R(X, Y), F &#x3D; {X\rightarrow Y}$</p><p>$F^{+} &#x3D; {X\rightarrow \varnothing, X\rightarrow X, X\rightarrow Y,X\rightarrow XY,<br>            Y\rightarrow  \varnothing, Y\rightarrow Y,<br>            XY\rightarrow  \varnothing,XY\rightarrow X,XY\rightarrow Y,XY\rightarrow XY}$</p><h3 id="5-1-4-Armstrong公理系统"><a href="#5-1-4-Armstrong公理系统" class="headerlink" title="5.1.4 Armstrong公理系统"></a>5.1.4 Armstrong公理系统</h3><p>为了从一组函数依赖求得蕴含的函数依赖，为了确定一个关系模式的码，就需要一套推理规则。下面介绍<strong>函数依赖的公理系统</strong>——<strong>Armstrong公理系统</strong>。</p><p>对于关系模式$R(U,F)$，设$F$是$U$上的一组函数依赖，则：</p><ul><li><strong>自反律</strong>：若$Y\subseteq X\subseteq U$，则$X \rightarrow Y$为$F$所蕴含；</li><li><strong>增广律</strong>：若$X \rightarrow Y$为$F$所蕴含（$X\rightarrow Y∈F^{+}$），$Z\subseteq U$，则$XZ\rightarrow YZ$为$F$所蕴含；<strong>【两边加相同的属性】</strong></li><li><strong>传递律</strong>：若$X \rightarrow Y$及$Y \rightarrow Z$为$F$所蕴含（$F^{+}$），则$X \rightarrow Z$为$F$所蕴含。</li></ul><p>三个有用的<strong>推理规则</strong>：</p><ul><li><p><strong>合并规则</strong>：由$X \rightarrow Y$,$Y \rightarrow Z$,有$X \rightarrow YZ$；</p></li><li><p><strong>伪传递规则</strong>：由$X \rightarrow Y$,$WY \rightarrow Z$,有$XW \rightarrow Z$；[推导：1式两边都加$W$]</p></li><li><p><strong>分解规则</strong>：由$X \rightarrow Y$,$Z\subseteq Y$,有$X \rightarrow Z$。[推导：$Z\subseteq Y$是平凡函数依赖，则$Y\rightarrow Z$，然后传递]</p><p>[推论]$X\rightarrow Y,X\rightarrow Z,X\rightarrow A \longleftrightarrow X\rightarrow YZA$</p></li></ul><h3 id="5-1-5-由函数依赖定义的码"><a href="#5-1-5-由函数依赖定义的码" class="headerlink" title="5.1.5 由函数依赖定义的码"></a>5.1.5 由函数依赖定义的码</h3><p><strong>候选码</strong>：设$K$为$R&lt; U , F &gt;$的属性或属性组，若$K \stackrel{f}{\longrightarrow} U$（$K$要完全决定$U$，即**$K$的任意真子集都不能决定$U$**），则称$K$为$R$的候选码</p><p><strong>主码</strong>：若$R(U , F)$有多个候选码，则可以从中选定一个作为R的主码</p><p><strong>主属性</strong>：包含在任何一个候选码中的属性</p><p><strong>非主属性</strong>：不包含在任何候选码中的属性</p><p><strong>全码</strong>：关系模式的码由整个属性组构成</p><h3 id="5-1-6-候选码的求解方法"><a href="#5-1-6-候选码的求解方法" class="headerlink" title="5.1.6 候选码的求解方法"></a>5.1.6 候选码的求解方法</h3><p>给定一个关系模式$R(U,F)$，$U&#x3D;{A_{1},A_{2},…,A_{n}}$，$F$是$R$的函数依赖集，那么，可以将属性分为如下四类：</p><ul><li><code>L</code>：仅出现在函数依赖集F左部的属性</li><li><code>R</code>：仅出现在函数依赖集F右部的属性</li><li><code>LR</code>：在函数依赖集F左右部都出现的属性</li><li><code>NLR</code>：在函数依赖集F左右部都未出现的属性</li></ul><p>&#x3D;&#x3D;<strong>求候选码的规则</strong>&#x3D;&#x3D;如下：</p><ul><li><p>如果有属性<strong>不在函数依赖集中出现</strong>，那么它必须包含在候选码中</p><p>[解释]不在函数依赖集中出现，即只有自己可以决定自己，别人不能决定它，该属性可以唯一标识元组，包含在候选码中。</p></li><li><p>如果有属性<strong>不在</strong>函数依赖集中任何函数依赖的<strong>右边出现</strong>，那么它必须包含在候选码中</p></li><li><p>如果有属性<strong>只在</strong>函数依赖集的<strong>左边出现</strong>，则该属性一定包含在候选码中</p></li><li><p>如果<strong>有属性或属性组能唯一标识元组</strong>，则它就是候选码（验证候选码是否唯一或有多个，也用于最后判断）</p></li></ul><h2 id="5-2-范式及其规范化"><a href="#5-2-范式及其规范化" class="headerlink" title="5.2 范式及其规范化"></a>5.2 范式及其规范化</h2><p>范式是对关系（关系模式$R$）的<strong>不同数据依赖程度的要求</strong>。各种不同的范式都是以对关系模式的属性间允许的数据依赖加以限制的形式表示的。</p><p>关系的范式三类异常：<strong>插入异常、更新异常、删除异常</strong>，另外还有<strong>数据冗余</strong>问题。</p><p>若$R(U,F)$符合$x$范式的要求，则称$R$为$x$范式，记作：$R\in xNF$    例：x好学生,有德、德智、德智体……</p><p>通过<strong>模式分解</strong>将一个低级范式转换为若干个高级范式的过程称作<strong>规范化</strong>；限制最少，数据依赖条件越少，范围最广。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220428214919770.png" alt="image-20220428214919770" style="zoom:67%;" /><h3 id="5-2-1-1NF"><a href="#5-2-1-1NF" class="headerlink" title="5.2.1 1NF"></a>5.2.1 1NF</h3><p><strong>属性不可再分，是原子量</strong></p><p>定义：分量是否需要再分，与具体应用有关；如果用到值的一部分，则需要进一步分割。</p><ul><li><p>如果只是查询出生日期，则它满足$1NF$；</p></li><li><p>如果查询两人生日是否相同，则只比较月、日，需要将生日分解，就不满足$1NF$。</p></li></ul><table><thead><tr><th align="center"><strong>姓名</strong></th><th align="center"><strong>生日</strong></th></tr></thead><tbody><tr><td align="center"><strong>王军</strong></td><td align="center"><strong>98.7.10</strong></td></tr><tr><td align="center"><strong>张立</strong></td><td align="center"><strong>99.7.10</strong></td></tr><tr><td align="center"><strong>李明</strong></td><td align="center"><strong>90.3.28</strong></td></tr></tbody></table><table><thead><tr><th align="center"><strong>姓名</strong></th><th align="center"><strong>年</strong></th><th align="center"><strong>月日</strong></th></tr></thead><tbody><tr><td align="center"><strong>王军</strong></td><td align="center"><strong>98</strong></td><td align="center"><strong>7.10</strong></td></tr><tr><td align="center"><strong>张立</strong></td><td align="center"><strong>99</strong></td><td align="center"><strong>7.10</strong></td></tr><tr><td align="center"><strong>李明</strong></td><td align="center"><strong>90</strong></td><td align="center"><strong>3.28</strong></td></tr></tbody></table><h3 id="5-2-2-2NF"><a href="#5-2-2-2NF" class="headerlink" title="5.2.2 2NF"></a>5.2.2 2NF</h3><p>若$R\in 1NF$，且<strong>每个非主属性完全依赖于码</strong>，则称$R\in 2NF$， 即**$2NF$不允许有非主属性对码的部分依赖**；若R中有非主属性对码的部分依赖，则$R\notin 2NF$。</p><p>[例1]关系模式$SDC(SNO,DEPT,MNAME,CNAME,GRADE)$,判断$SDC\in 2NF$？</p><p><strong>步骤</strong>：</p><p>先根据函数依赖确定候选码，再观察每个非主属性是否完全依赖于码。</p><p>因为$DEPT,MNAME$部分依赖于码$(SNO,CNAME) $，所以$SDC\notin 2NF$ 。</p><blockquote><p>若码为一个，一定是完全依赖关系；</p><p>消除非主属性对码的部分依赖——模式分解</p></blockquote><p><strong>改造</strong>：</p><p>非主属性有两种，一种完全依赖于码，一种部分依赖于码。</p><p>将$SDC$分解为：</p><p>​$SC(SNO , CNAME , GRADE)\in 2NF$</p><p>​$SDM(SNO ,  DEPT , MNAME)\in 2NF$</p><p>解决了部分插入异常和更新异常，删除异常还存在</p><p>[例2]关系模式$R(A,B,C,D)$，码为$AB$，给出它的一个函数依赖集，使得$R$属于$1NF$而不属于$2NF$。</p><p>$F&#x3D;{(A, B) \stackrel{f}{\rightarrow} C, \quad B \rightarrow D}$</p><h3 id="5-2-3-3NF"><a href="#5-2-3-3NF" class="headerlink" title="5.2.3 3NF"></a>5.2.3 3NF</h3><p>关系模式$R&lt; U , F &gt;$中，若<strong>不存在</strong>这样的码$X$，属性组$Y$及非主属性$Z(Z\nsubseteq Y)$，使得下式成立：</p><div style="font-size:20px"<div align = "center">X->Y,Y-\>X,Y->Z</div><p>则称$R\in 3NF$。即$3NF$要求：<strong>非主属性既不部分也不传递依赖于码</strong>。</p><p>[例1]判断$SDM (SNO ,  DEPT , MNAME) \in 3NF$是否成立。</p><p>因为$SNO \rightarrow DEPT,DEPT\rightarrow MNAME$，所以$SDM\notin 3NF$</p><p>模式分解的方法是：消除非主属性对码的<strong>传递依赖</strong></p><p><strong>改造</strong>：</p><p>将$SDM(SNO,DEPT,MNAME)$分解为：</p><p>$SD (SNO , DEPT) \in 3NF$ 二元&#x2F;目关系</p><p>$DM(DEPT , MNAME) \in 3NF$</p><p>[例2]$SC(SNO , CNAME , GRADE) \in 3NF$不能传递。</p><blockquote><p>全码：所有属性加一起才能构成码，即$U \stackrel{f}{\longrightarrow} U$,必满足$3NF$；</p><p>任意二元关系模式都属于第三范式。</p></blockquote><p>[例3]关系模式$R(A,B,C,D)$，码为$AB$，给出它的一个函数依赖集，使得$R$属于$2NF$而不属于$3NF$。</p><p>$F&#x3D;{(A,B) \rightarrow C,C\rightarrow D}$</p><p>[例4]设有关系模式$R(A,B,C)$，根据语义有如下函数依赖集：$F&#x3D;{A\rightarrow B,(B,C)\rightarrow A}$。关系模式R的规范化程度最高达到（C）</p><p>A）1NF  B）2NF  <strong>C）3NF</strong>  D）4NF</p><p>[解]本题中的候选码为**(A,C),(B,C)**，所有的属性均为主属性。</p><h3 id="5-2-4-BCNF"><a href="#5-2-4-BCNF" class="headerlink" title="5.2.4 BCNF"></a>5.2.4 BCNF</h3><p><strong>每一个决定性因素都包含码。</strong></p><p>定义：关系模式$R&lt; U , F &gt;$中，对于属性组$X,Y$，若$X\rightarrow Y$且$Y \nsubseteq X$时$X$必含有码，则$R&lt; U , F &gt;\in BCNF$</p><p>如$STC \notin BCNF$，因为$T\rightarrow C$，而$T$不含有码；</p><blockquote><p>$ STC(S , T , C)$关系模式中，每位老师只教授一门课，每门课有若干老师。某学生选定一门课，就对应一位老师。则：</p><p>它的一组函数依赖为：$T\rightarrow C,(S,T)\rightarrow C,(S,C)\rightarrow T$，候选码为$(S,T)$和$ (S,C)$</p></blockquote><p>此例子可说明：**全是主属性不一定属于$BCNF$，但一定属于$3NF$**。</p><p><strong>改造</strong>：</p><p>将$STC (S , T , C)$分解为：</p><p>$ST(S,T)\in BCNF ,TC(T,C)\in BCNF.$</p><blockquote><p>结论：</p><p>任何一个二元关系都是BCNF的；</p><p>全码属于BCNF。</p></blockquote><p>在<strong>函数依赖</strong>的范畴内，BCNF达到了最高的规范化程度。</p><h2 id="5-3-多值依赖"><a href="#5-3-多值依赖" class="headerlink" title="5.3 多值依赖"></a>5.3 多值依赖</h2><h3 id="5-3-1-多值依赖的定义"><a href="#5-3-1-多值依赖的定义" class="headerlink" title="5.3.1 多值依赖的定义"></a>5.3.1 多值依赖的定义</h3><p>1.<strong>描述型</strong>：</p><p>关系模式$R(U)$，$X,Y,Z \subset U$，并且$Z &#x3D; U – X – Y$，若对$R(U)$的任一关系$r$，对给定的一对$(x,z)$值有一组$Y$的值，这组值<strong>仅仅决定于$x$值</strong>而与$z$值无关，则称$Y$多值依赖于$X$，记作：$X\rightarrow \rightarrow Y$。</p><blockquote><p>关系模式$TEACH(C#, T#, B#)$ ，一门课程由多个教员担任，一门课程使用相同的一套参考书。</p><table><thead><tr><th align="center"><strong>C#</strong></th><th align="center"><strong>T#</strong></th><th align="center"><strong>B#</strong></th></tr></thead><tbody><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>{T1,T2}</strong></td><td align="center"><strong>{B1,B2}</strong></td></tr><tr><td align="center"><strong>C2</strong></td><td align="center"><strong>{T1,T3}</strong></td><td align="center"><strong>{B3,B4}</strong></td></tr></tbody></table><p>有：</p><table><thead><tr><th align="center"><strong>C#</strong></th><th align="center"><strong>T#</strong></th><th align="center"><strong>B#</strong></th></tr></thead><tbody><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>T1</strong></td><td align="center"><strong>B1</strong></td></tr><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>T1</strong></td><td align="center"><strong>B2</strong></td></tr><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>T2</strong></td><td align="center"><strong>B1</strong></td></tr><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>T2</strong></td><td align="center"><strong>B2</strong></td></tr><tr><td align="center"><strong>C2</strong></td><td align="center"><strong>T1</strong></td><td align="center"><strong>B3</strong></td></tr><tr><td align="center"><strong>C2</strong></td><td align="center"><strong>T1</strong></td><td align="center"><strong>B4</strong></td></tr><tr><td align="center"><strong>C2</strong></td><td align="center"><strong>T3</strong></td><td align="center"><strong>B3</strong></td></tr><tr><td align="center"><strong>C2</strong></td><td align="center"><strong>T3</strong></td><td align="center"><strong>B4</strong></td></tr></tbody></table></blockquote><p>​      在关系模式$TEACH$中，对$(C1 , B1)$有一组$T#$值$(T1 , T2)$，对$(C1 , B2)$也有一组$T#$值$(T1 , T2)$，这组值仅取决于$C#$的取值，而<strong>与$B#$[如参考书]的取值无关</strong>。因此，$T#$多值依赖于$C#$，记作$C#\rightarrow \rightarrow T#$，同样有$C#\rightarrow \rightarrow B#$。</p><p>2.<strong>标准化</strong>：</p><p>关系模式$R(U)$，$X、Y、Z\subset U$，$Z&#x3D;U–X–Y$，对于$R(U)$的任一关系$r$，若存在元组$t1$，$t2$，使得$t1[X] &#x3D; t2[X]$，那么就必然存在元组$t3$，$t4$，使得：</p><p>​         $t3[X] &#x3D; t1[X] &#x3D; t4[X] &#x3D; t2[X]$</p><p>​         $t3[Y] &#x3D; t1[Y], t4[Y] &#x3D; t2[Y]$</p><p>​         $t3[Z] &#x3D; t2[Z], t4[Z] &#x3D; t1[Z] $</p><p>则称$Y$多值依赖于$X$，记作：$X\rightarrow \rightarrow Y$。</p><p>若$X\rightarrow \rightarrow Y$，而$Z&#x3D;\varnothing$，则称$X\rightarrow \rightarrow Y$为平凡的多值依赖。</p><p>例如：$(C#, T#, B#)$满足$C#\rightarrow \rightarrow T#$，含有元组$t1&#x3D;(C1,T1, B1)$，$t2&#x3D;(C1, T2, B2)$，则也一定含有元组$t3&#x3D;(C1, T1, B2)$，$t4&#x3D;(C1, T2, B1)$。</p><p>即：有三条记录，第四条记录<strong>肯定知道&#x2F;肯定需找到</strong>。</p><h3 id="5-3-2-多值依赖的性质"><a href="#5-3-2-多值依赖的性质" class="headerlink" title="5.3.2 多值依赖的性质"></a>5.3.2 多值依赖的性质</h3><ul><li><p>多值依赖具有<strong>对称性</strong>：若$X\rightarrow \rightarrow Y$，则$X\rightarrow \rightarrow Z$</p></li><li><p>&#x3D;&#x3D;多值依赖具有<strong>传递性</strong>&#x3D;&#x3D;：若$X\rightarrow \rightarrow Y$，$Y\rightarrow \rightarrow Z$，则$X\rightarrow \rightarrow Z-Y$。</p></li><li><p>函数依赖是多值依赖的特例：若$X\rightarrow Y$，则$X\rightarrow \rightarrow Y$。</p></li><li><p>若$X\rightarrow \rightarrow Y$，$X\rightarrow \rightarrow Z$，则$Y$、$Z$的<strong>交集、并集、差集</strong>多值依赖于$X$。</p><ul><li>若$X\rightarrow \rightarrow Y$，$X\rightarrow \rightarrow Z$，则$X\rightarrow \rightarrow Y \cup Z$。</li><li>若$X\rightarrow \rightarrow Y$，$X\rightarrow \rightarrow Z$，则$X\rightarrow \rightarrow Y\cap Z$。</li><li>若$X\rightarrow \rightarrow Y$，$X\rightarrow \rightarrow Z$，则$X\rightarrow \rightarrow Y-Z$， $X\rightarrow \rightarrow Z-Y$。</li></ul></li></ul><h3 id="5-3-3-多值依赖与函数依赖的区别"><a href="#5-3-3-多值依赖与函数依赖的区别" class="headerlink" title="5.3.3 多值依赖与函数依赖的区别"></a>5.3.3 多值依赖与函数依赖的区别</h3><ul><li><p>多值依赖是元组产生依赖，函数依赖是相等产生依赖。</p><ul><li>函数依赖规定某些元组不能出现在关系中，也称为<strong>相等产生依赖</strong>。</li><li>多值依赖要求某种形式的其它元组必须存在于关系中，称为<strong>元组产生依赖</strong>。</li></ul></li><li><p>多值依赖的有效性与<strong>属性集的范围</strong>有关，而函数依赖的有效性则与属性集的范围无关。</p><p>如：$X\rightarrow Y$在属性集$W(XY \subseteq W\subseteq U)$上成立，在$U$上也成立； 而$X\rightarrow \rightarrow Y$在属性集$W(XY \subseteq W\subseteq U)$上成立，但在$U$上不一定成立。</p></li></ul><blockquote><p>多值依赖可以缩小范围，不可以扩大范围。如：若$X\rightarrow \rightarrow Y$在$U$上成立，则在属性集$W(XY \subseteq W\subseteq U)$上成立。</p></blockquote><p>如：$A\rightarrow \rightarrow B$在$W&#x3D;ABC$上成立，而在$U&#x3D;ABCD$上不成立。           $(a1,{c1,d1})$  $ b1$ ；  $(a1,{c1,d2})$  $b2$</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">a1</td><td align="center">b1</td><td align="center">c1</td><td align="center">d1</td></tr><tr><td align="center">a1</td><td align="center">b1</td><td align="center">c2</td><td align="center">d1</td></tr><tr><td align="center">a1</td><td align="center">b2</td><td align="center">c1</td><td align="center">d2</td></tr><tr><td align="center">a1</td><td align="center">b2</td><td align="center">c2</td><td align="center">d2</td></tr></tbody></table><ul><li>关于<strong>子集</strong>的问题：<ul><li>若$X\rightarrow Y$在$R(U)$上成立，则对于$\forall Y’ \subseteq Y, \quad X \rightarrow Y’$均成立。 [$Y\rightarrow Y’$<strong>是平凡的函数依赖</strong>]</li><li>若$X\rightarrow \rightarrow Y$在$R(U)$上成立，则不能断言对于$Y’ \subseteq Y$,有$X \rightarrow Y’$成立。</li></ul></li></ul><p>​   在上面的关系模式中，$A\rightarrow \rightarrow BC$成立，$A\rightarrow \rightarrow B$不成立。</p><h3 id="5-3-4-4NF"><a href="#5-3-4-4NF" class="headerlink" title="5.3.4 4NF"></a>5.3.4 4NF</h3><p>定义：</p><p>关系模式$R&lt; U , F &gt;\in 1NF$，若对于每一个<strong>非平凡</strong>(Z不能为空)<strong>的多值依赖</strong>$X\rightarrow \rightarrow Y$（$Y\nsubseteq X$），$X$<strong>都包含码</strong>，则称$R\in 4NF$。</p><p>如关系模式$TEACH(C#,T#,B#)$，$C#\rightarrow \rightarrow T#$，$C#\rightarrow \rightarrow B#$，码为$(C#, T#, B#)$，所以$TEACH\notin 4NF$。</p><p><strong>改造</strong>：</p><p>将$TEACH$分解为：$CT(C#,T#)\in 4NF$，$CB(C#,B#)\in 4NF$。</p><p>在分解后的关系中，虽然仍有$C#\rightarrow \rightarrow T#$，$C#\rightarrow \rightarrow B#$，但它们是平凡的多值依赖，满足$4NF$，分量为$C_{i}$的元组共有$m + n$个。</p><p>在<strong>多值依赖</strong>的范畴内，属于<strong>4NF</strong>的关系模式已达到了最高的规范化程度。</p><p><strong>任何一个二元关系都满足4NF</strong>。[只有两个属性不存在非平凡的多值依赖]</p><p><strong>全码不一定属于4NF。</strong>（如上$TEACH$关系模式例子）</p><blockquote><p>一个<strong>全是主属性</strong>的关系模式一定可以达到第3范式；</p><p>一个<strong>全码</strong>的关系模式一定可以达到$BCNF$范式。</p></blockquote><p><strong>范式之间的关系</strong>：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220503232753112.png" alt="image-20220503232753112" style="zoom:67%;" /><h2 id="5-4-关系模式分解"><a href="#5-4-关系模式分解" class="headerlink" title="5.4 关系模式分解"></a>5.4 关系模式分解</h2><p>引言：表的数量越多，查询速度越慢，更改（插入、更新、删除异常少）速度越快。</p><h3 id="5-4-1-模式分解的定义和要求"><a href="#5-4-1-模式分解的定义和要求" class="headerlink" title="5.4.1 模式分解的定义和要求"></a>5.4.1 模式分解的定义和要求</h3><p><strong>模式分解的定义</strong>：</p><p>关系模式$R&lt;U ,F&gt;$的一个分解是指$\rho &#x3D; {R_{1}&lt;U_{1},F_{1}&gt; ,R_{2}&lt;U_{2},F_{2}&gt;, … , R_{n}&lt;U_{n},F_{n}&gt;}$，其中$U &#x3D; U_{1}\cup U_{2}\cup …\cup U_{n}$ ，并且没有$U_{i} \subseteq U_{j} $，$i\ge 1$，$j ≤n$，$F_{i}$是$F$在$U_{i}$上的投影。</p><p><strong>模式分解的要求</strong>：</p><p>一个关系模式分解成若干个关系模式，则分解前后的模式要等价（即分解后没有信息的丢失）。等价的标准常用的有：</p><ul><li>分解要具有<strong>无损连接性</strong></li><li>分解要保持<strong>函数依赖</strong></li><li>分解既要保持函数依赖又要具有无损连接性</li></ul><h3 id="5-4-2-无损分解与有损分解"><a href="#5-4-2-无损分解与有损分解" class="headerlink" title="5.4.2 无损分解与有损分解"></a>5.4.2 无损分解与有损分解</h3><p><strong>无损分解的定义</strong>：</p><p>关系模式$R&lt;U , F&gt;$ ，$U &#x3D; U_{1}\cup U_{2}\cup …\cup U_{n}$ ，$\rho &#x3D; {R_{1}&lt;U_{1},F_{1}&gt; ,R_{2}&lt;U_{2},F_{2}&gt;, … , R_{n}&lt;U_{n},F_{n}&gt;}$是$R&lt;U ,F&gt;$的一个分解，若对于$R&lt;U , F&gt;$的任一个关系$r$，都有$r &#x3D; \pi_{R_{1}}(r)\Join\pi_{R_{2}}(r)\Join … \Join \pi_{R_{n}}(r)$ , 则称$\rho$是$R&lt;U , F&gt;$的一个无损连接分解。<br>即：对于$R&lt;U , F&gt;$的任一个关系$r$，$r$在$R_{1},R_{2} , … , R_{n}$上的<strong>投影</strong>的<strong>自然连接</strong>等于$r$。 </p><p><strong>一个关系模式分解为两个模式时无损连接性的判别</strong>：</p><p>关系模式$R&lt;U , F&gt;$分解为关系模式$R_{1}&lt;U_{1},F_{1}&gt;,R_{2}&lt;U_{2},F_{2}&gt;$是具有<strong>无损连接性</strong>的分解的充分必要条件是：</p><p>$(U_{1}\cap U_{2}\rightarrow U_{1}-U_{2})\in F^{+}$（或$(U_{1}\cap U_{2}\rightarrow U_{2}-U_{1})\in F^{+}$，即&#x3D;&#x3D;<strong>交集决定差集成立</strong>&#x3D;&#x3D;）, $F^{+}$是所有函数依赖推导的集合。</p><p>**[例]**设$R(U,F)$中$U&#x3D;ABC,F&#x3D;{A\rightarrow B}$, 试判断$R$的下面两个分解的无损连接性：</p><p>$\rho_{1}&#x3D;{R_{1}(AB), R_{2}(AC)},\rho <em>{2}&#x3D;{R</em>{1}(AB), R_{2}(BC)}$。</p><p>因为对于$\rho_{1} $：$R_{1}\cap R_{2}&#x3D;A, R_{1}－R_{2}&#x3D;B$，无损；对于$\rho_{2} $：$R_{1}\cap R_{2}&#x3D;B,R_{1}－R_{2}&#x3D;A,R_{2}－R_{1}&#x3D;C$ ，有损。</p><p><strong>实例</strong>：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505205631354.png" alt="image-20220505205631354" style="zoom:50%;" /><h3 id="5-4-3-保持函数依赖"><a href="#5-4-3-保持函数依赖" class="headerlink" title="5.4.3 保持函数依赖"></a>5.4.3 保持函数依赖</h3><p><strong>保持函数依赖的模式分解的定义</strong>：</p><p>设$\rho &#x3D; {R_{1}&lt;U_{1},F_{1}&gt; ,R_{2}&lt;U_{2},F_{2}&gt;, … , R_{n}&lt;U_{n},F_{n}&gt;}$是$R&lt;U ,F&gt;$的一个分解，如果$F^{+} &#x3D;(F_{1}\cup F_{2}\cup …\cup F_{n})^{+}$，则称$\rho $是保持函数依赖的分解。即：<strong>你能推导出来的我的集合也能推导出来，无函数依赖被丢失</strong>。</p><p>换句话说：$F$所逻辑蕴含的函数依赖一定也由分解得到的各个关系模式中的函数依赖所逻辑蕴含。</p><p><strong>实例</strong>：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505205911334.png" alt="image-20220505205911334" style="zoom: 50%;" /><p>[例1]设关系模式$R&lt;U, F&gt;$，$U &#x3D; {CITY, ST, ZIP}$,$F &#x3D;{(CITY, ST) \rightarrow ZIP[邮政编码], ZIP\rightarrow CITY}$，试判断下列分解$\rho_{1}&#x3D;{R_{1}(ST,ZIP), R_{2}(CITY, ZIP)}$是否保持函数依赖？</p><p>[解]$\because \pi_{R_{1}}(F) &#x3D; \varnothing,\pi_{R_{2}}(F) &#x3D; {ZIP\rightarrow CITY},\pi_{R_{1}}(F)\cup \pi_{R_{2}}(F)&#x3D; {ZIP\rightarrow CITY},$丢失了函数依赖$(CITY, ST)\rightarrow ZIP$</p><p> $ \therefore$分解是没有保持函数依赖的；</p><p>  又$\because R_{1}\cap R_{2} &#x3D;{ZIP}, R_{2}－R_{1} &#x3D;{CITY},R_{1}\cap R_{2}\rightarrow R_{2}－R_{1},$   </p><p>$\therefore$分解是无损的。</p><p>[例2]$R(ABC;A\rightarrow C,B\rightarrow C)$，码为$AB$。</p><p>（1）求具有无损连接性的分解。</p><p>​  分解为$R_{1}(AC;A\rightarrow C)$，$R_{2}(AB)$。</p><p>​  因丢失了函数依赖$B\rightarrow C$，所以不是保持函数依赖的分解。</p><p>另解：$R1(A,B),R2(B,C)$的函数依赖为：$B\rightarrow A,B\rightarrow C  F_{1}&#x3D;\varnothing,F_{2}&#x3D;B\rightarrow C$</p><p>（2）求保持函数依赖的分解。</p><p>​分解为$R_{1}(AC;A\rightarrow C)$，$R_{2}(BC;B\rightarrow C)$，但分解是有损的。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505214557560.png" alt="image-20220505214557560"></p><h3 id="5-4-4-关于模式分解的若干结论"><a href="#5-4-4-关于模式分解的若干结论" class="headerlink" title="5.4.4 关于模式分解的若干结论"></a>5.4.4 关于模式分解的若干结论</h3><p>​ 分解具有无损连接性和分解保持函数依赖是<strong>两个互相独立的标准</strong>。具有无损连接性的分解不一定保持函数依赖，保持函数依赖的分解不一定具有无损连接性。一个关系模式的分解可能有三种情况：</p><ul><li>若要求分解具有无损连接性，那么分解后的模式一定能达到BCNF。</li><li>若要求分解保持函数依赖，那么分解后的模式总可以达到3NF，但不一定能达到BCNF。</li><li>若要求分解既具有无损连接性，又保持函数依赖，则分解后的模式可以达到3NF，但不一定能达到BCNF。</li></ul><h2 id="5-5-属性集闭包"><a href="#5-5-属性集闭包" class="headerlink" title="5.5 属性集闭包"></a>5.5 属性集闭包</h2><h3 id="5-5-1-属性集闭包的定义"><a href="#5-5-1-属性集闭包的定义" class="headerlink" title="5.5.1 属性集闭包的定义"></a>5.5.1 属性集闭包的定义</h3><p>设有关系模式$R(U)$,$U&#x3D;{A_{1},A_{2},…,A_{n}}$，$X$是$U$的子集，$F$是$U$上的一个函数依赖集，则属性集$X$关于函数依赖集$F$的闭包$X_{F}^{+}$定义为：$X_{F}^{+}＝{A_{i}|A_{i}\in U,F\models X\rightarrow A_{i}}$ 。即：<strong>我能决定哪些属性，就是属性集的闭包</strong>。</p><p>[例]设关系模式$R(A,B,C)$的函数依赖集为$F&#x3D;{A\rightarrow B,B\rightarrow C}$，则$A_{F}^{+}&#x3D;{A,B,C},B_{F}^{+}&#x3D;{B,C},C_{F}^{+}&#x3D;{C}$。</p><h3 id="5-5-2-属性集的闭包计算"><a href="#5-5-2-属性集的闭包计算" class="headerlink" title="5.5.2 属性集的闭包计算"></a>5.5.2 属性集的闭包计算</h3><p>算法：求属性集$X(X\subseteq U)$关于$U$上的函数依赖集$F$的闭包$X_{F}^{+}$。</p><p>输入：属性全集$U$,$U$上的函数依赖集$F$,以及属性集$X\subseteq U$；</p><p>输出：$X$关于$F$的闭包$X_{F}^{+}$。</p><p><strong>方法</strong>：根据下列步骤计算一系列属性集合$X^{(0)}$，$X^{(1)}$，…</p><ul><li><p>(1) 令$X^{(0)}&#x3D;X,i&#x3D;0$（将<strong>自身</strong>加入）</p></li><li><p>(2) 求属性集<img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505220343505.png" alt="image-20220505220343505" style="zoom: 67%;" /></p></li></ul><p>  其中：$V$已找出（知道）的集合，$W$是可能已知、可能未知的属性（<strong>未知加入</strong>）</p><ul><li><p>(3) $X^{(i+1)}&#x3D;X^{(i)}\cup B$</p></li><li><p>(4)判断$X^{(i+1)}&#x3D;X^{(i)}$吗？</p><ul><li>若$X^{(i+1)}\ne X^{(i)}$，则用$i+1$取代$i$，返回(2)；</li><li>若$X^{(i+1)}&#x3D; X^{(i)}$，则$X_{F}^{+}&#x3D; X^{(i)}$，结束。</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505220852662.png" alt="image-20220505220852662"></p><p>在<strong>判断计算何时结束</strong>时，可用下面四种方法：</p><ul><li>$X^{(i+1)}&#x3D;X^{(i)}$。</li><li>$X^{(i+1)}$已包含了全部属性。</li><li>在$F$中再也找不到函数依赖的右部属性是$X^{(i)}$未出现过的属性。</li><li>在$F$中再也找不到满足条件$V\subseteq X^{(i)}$的函数依赖$V\rightarrow W$。</li></ul><h2 id="5-6-函数依赖集的等价与覆盖"><a href="#5-6-函数依赖集的等价与覆盖" class="headerlink" title="5.6 函数依赖集的等价与覆盖"></a>5.6 函数依赖集的等价与覆盖</h2><h3 id="5-6-1-定义"><a href="#5-6-1-定义" class="headerlink" title="5.6.1 定义"></a>5.6.1 定义</h3><p>设$F$和$G$是关系$R(U)$上的两个依赖集，若$F^{+}&#x3D;G^{+}$，则称$F$与$G$等价，记为$F&#x3D;G$。也可以称$F$覆盖$G$，$G$覆盖$F$，**$F$和$G$相互覆盖**。</p><p>一个函数依赖集F可能有若干个与其等价的函数依赖集，我们可以从中选择一个较好以便应用的函数依赖集。标准至少是：</p><ul><li><strong>所有函数依赖均独立</strong>，即该函数依赖集中不存在这样的函数依赖，它可由这个集合中的别的函数依赖推导出来。</li><li>表示最简单，即每个函数依赖的<strong>右部为单个属性</strong>[可用分解规则来做]，<strong>左部最简单</strong>[左部不能有冗余属性]。</li></ul><p>具体规则见下小节“最小函数依赖集”。</p><h3 id="5-6-2-最小函数依赖集"><a href="#5-6-2-最小函数依赖集" class="headerlink" title="5.6.2 最小函数依赖集"></a>5.6.2 最小函数依赖集</h3><p>若函数依赖集$F$如果满足下列条件，则称$F$为<strong>最小函数覆盖</strong>，记为$F_{min}$：</p><ul><li>对$F$中任一函数依赖$X\rightarrow A$，$F－{X→A}$都不与$F$等价。[<strong>不存在冗余的函数依赖</strong>]</li><li>$F$中每一个函数依赖的右部<strong>都是单个属性</strong>。[<strong>右部最简单</strong>]</li><li>对于$F$中的任一函数依赖$X\rightarrow A$，$F－{X→A}\cup {Z\rightarrow A}$都不与$F$等价，其中$Z$为$X$的<strong>任一真子集</strong>。[<strong>左部最简单，左部不能有冗余的属性——X的真子集不能决定A，左边已经是最少的属性</strong>]</li></ul><p><strong>求函数依赖集F的最小覆盖的方法</strong>是：</p><ul><li>（1）<strong>使右部最简单</strong>：检查$F$中的每个函数依赖$X\rightarrow A$，若$A&#x3D;{A_{1},A_{2},…,A_{k}}$,则根据<strong>分解规则</strong>，用$X\rightarrow A_{i}(i&#x3D;1,2,…,k)$取代$X\rightarrow A$</li><li>（2）<strong>检查是否有冗余的函数依赖</strong>：检查$F$中的每个函数依赖$X\rightarrow A$，令$G&#x3D;F－{X\rightarrow A}$，若有$A\in X_{G}^{+}$，则从$F$中去掉此函数依赖。</li><li>（3）<strong>使左部最简单</strong>：检查$F$中各函数依赖$X\rightarrow A$，设$X&#x3D;{B_{1},B_{2},…,B_{m}}$，检查$B_{i}$，当$A\in (X-B_{i})<em>{F}^{+}$时，即以$X－B</em>{i}$替换$X$。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220505222728062.png" alt="image-20220505222728062"></p><h1 id="ch6-数据库设计"><a href="#ch6-数据库设计" class="headerlink" title="ch6.数据库设计"></a>ch6.数据库设计</h1><h2 id="6-1-需求分析"><a href="#6-1-需求分析" class="headerlink" title="6.1 需求分析"></a>6.1 需求分析</h2><p>​<strong>数据字典</strong>是各类数据描述的集合，是进行详细的数据收集和数据分析所获得的主要结果。数据字典在数据库设计中占有很重要的地位，其主要内容包括：</p><ul><li><strong>数据项</strong>：是不可再分的数据单位。数据项描述＝{数据项名,数据项含义说明,别名,数据类型,长度,取值范围,取值含义,与其他数据项的逻辑关系}</li><li><strong>数据结构</strong>：反映了数据之间的组合关系。一个数据结构可以由若干数据项或数据结构组成。数据结构描述＝{数据结构名,含义说明,组成:{数据项或数据结构}}</li><li><strong>数据流</strong>：是数据结构在系统内传输的路径。数据流描述＝{数据流名,说明,数据流来源,数据流去向,组成:{数据结构}, 平均流量,高峰期流量}</li><li><strong>数据存储</strong>：是数据结构的停留或保存处，也是数据流的来源和去向之一。数据存储描述＝{数据存储名,说明,编号,流入的数据流 ,流出的数据流，组成:{数据结构},数据量,存取方式}</li><li><strong>处理过程</strong>：具体处理逻辑一般用判定表或判定树来描述，数据字典中只需要描述处理过程的说明性信息。处理过程描述＝{处理过程名,说明,输入:{数据流},输出:{数据流},处理:{简要说明}}</li></ul><p>【例】学生学籍管理子系统的数据字典。</p><p>数据项以学号为例：<br>数据项：　学号<br>含义说明：唯一标识每个学生<br>别名：　　学生编号<br>类型：　　字符型<br>长度：　　 8<br>取值范围：00000000至99999999<br>取值含义：前两位标别该学生所在年级，后六位按顺序编号</p><p>数据结构以学生为例：<br>数据结构：　学生<br>含义说明：　定义了一个学生的有关信息<br>组成：　　　学号，姓名，性别，年龄，所在系，年级</p><p>数据流以体检结果为例：<br>数据流：　　体检结果<br>说明：　　　学生参加体格检查的最终结果<br>数据流来源：体检<br>数据流去向：批准<br>组成：　　　……<br>平均流量：　……<br>高峰期流量：……　</p><p>数据存储以学生登记表为例：<br>数据存储：　学生登记表<br>说明：　　　记录学生的基本情况<br>流入数据流：……                           流出数据流：……<br>组成：　　　……<br>数据量：　　每年3000张               存取方式：　随机存取 </p><p>处理过程以分配宿舍为例：<br>处理过程：分配宿舍<br>说明：　　为所有新生分配学生宿舍<br>输入：　　学生，宿舍，<br>输出：　　宿舍安排<br>处理：　　在新生报到后，为所有新生分配学生宿舍。要求同一间宿舍只能安排同一性别的学生，同一个学生只能安排在一个宿舍中。每个学生的居住面积不小于3平方米。安排新生宿舍其处理时间应不超过15分钟。</p><h2 id="6-2-概念结构设计"><a href="#6-2-概念结构设计" class="headerlink" title="6.2 概念结构设计"></a>6.2 概念结构设计</h2><p><strong>描述概念模型的工具是E-R模型</strong>。</p><h3 id="6-2-1-设计概念结构的四类方法"><a href="#6-2-1-设计概念结构的四类方法" class="headerlink" title="6.2.1 设计概念结构的四类方法"></a>6.2.1 设计概念结构的四类方法</h3><ul><li><strong>自顶向下</strong>：先定义全局概念结构的框架，再逐步细化。</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517162620988.png" alt="image-20220517162620988" style="zoom:67%;" /><ul><li><strong>自底向上</strong>：先定义各局部应用的概念结构，再将它们集成起来，得到全局概念结构。</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517162643518.png" alt="image-20220517162643518" style="zoom:67%;" /><ul><li><strong>逐步扩张</strong>：<strong>先定义最重要的核心概念结构</strong>，<strong>再向外扩充</strong>，以滚雪球的方式逐步生成其他概念结构，直至总体概念结构。</li></ul><p>​[“滚雪球”的方式]</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517162654309.png" alt="image-20220517162654309" style="zoom:67%;" /><ul><li><strong>混合策略</strong>：将自顶向下和自底向上相结合，用自顶向下策略设计一个全局概念结构的框架，以它为骨架集成由自底向上策略中设计的各局部概念结构。</li></ul><p>​常用策略有：自顶向下地进行需求分析、自底向上地设计概念结构。自底向上设计概念结构的步骤是先抽象数据并设计局部视图，再集成局部视图，得到全局概念结构。</p><h3 id="6-2-2-数据抽象"><a href="#6-2-2-数据抽象" class="headerlink" title="6.2.2 数据抽象"></a>6.2.2 数据抽象</h3><p>数据抽象：概念结构是对现实世界的一种抽象。所谓抽象是从实际的人、物、事和概念中抽取所关心的共同特性，忽略非本质的细节，并把这些特性用各种概念精确地加以描述，这些概念组成了某种模型。一般有三种常用抽象：</p><ul><li><strong>分类</strong>(Classification)：定义某一类概念作为现实世界中一组对象的类型。这些对象具有某些共同的特性和行为，它抽象了对象值和型之间的“is member of”的语义，如张三是<strong>学生</strong>中的一员。即：<strong>客观世界同一类的对象用一种数据类型来表示</strong>。在E-R模型中，实体型就是这种抽象。联系也属于一种对象。</li><li><strong>聚集</strong>(Aggregation)：定义<strong>某一类型的组成成分</strong>。它抽象了对象内部类型和成分之间“is part of”的语义。在E-R模型中若干属性的聚集组成了实体型，就是这种抽象。如学号、姓名、专业、等属性的聚集组成学生实体型。</li><li><strong>概括</strong>(Generalization)：定义类型之间的一种子集联系。它抽象了类型之间的“is subset of”的语义。如学生是实体型，本科生、研究生也是实体型，本科生、研究生是学生的子集，称学生为超类，本科生、研究生为子类。概括具有继承性：子类继承超类上定义的所有抽象。 E-R模型中用双竖边的矩形框表示子类，用直线加小圆圈表示超类-子类的联系。</li></ul><p>实体和属性的区分：实体与属性是相对而言的，同一事物在一种应用环境中作为属性，在另一应用环境中就必须作为实体。</p><p><strong>确定为属性的两条准则是</strong>：</p><ul><li><p><strong>属性必须是不可分的数据项</strong>；</p></li><li><p><strong>属性不能与其他实体具有联系</strong>，联系只发生在实体之间。</p></li></ul><p>如职工是一个实体，职工号、姓名、年龄是职工的属性，职称如果没有与工资、福利挂钩，即没有需要进一步描述的特性，则根据准则1可以作为职工实体的属性。但如果不同的职称有不同的工资、住房标准和不同的附加福利，则职称将作为一个实体看待。</p><p><strong>一个实体转化成一个表，它的属性就是表的属性；联系可以转化成一个独立的关系&#x2F;表。</strong></p><p><strong>【例】</strong>第二个E-R图可以转化成三个表，职工、职称、聘任（职工号、职称代码）。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517163648167.png" alt="image-20220517163648167" style="zoom:67%;" /><h3 id="6-2-3-视图集成"><a href="#6-2-3-视图集成" class="headerlink" title="6.2.3 视图集成"></a>6.2.3 视图集成</h3><p><strong>视图集成</strong>的两种方式：</p><ul><li>一次集成：一次集成多个分E-R图，适用于局部视图较简单时</li><li>逐步累积：首先集成两个局部视图(通常是比较关键的两个局部视图)，以后每次将一个新的局部视图集成进来。</li></ul><p>无论哪种方式，集成局部E-R图必须经过两步：合并分E-R图，生成初步E-R图。</p><p>由于各个局部应用所面向的问题不同，且由不同的设计人员进行设计，这就导致了各个分E-R图之间必定存在冲突。合并分E-R图的主要工作与关键所在就是<strong>合理消除各分E-R图的冲突</strong>。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517164328519.png" alt="image-20220517164328519" style="zoom:67%;" /><p><strong>冲突主要分为如下三类</strong>：</p><ul><li><strong>属性冲突</strong></li><li><strong>属性域冲突</strong>：即属性值的类型、取值范围或取值集合不同。如零件号，有的部门将它定义为整型，有的部门将它定义为字符型。又如年龄，有些部门以出生日期形式表示职工年龄，而另一些部门用整数形式表示职工年龄。</li><li><strong>属性取值单位冲突</strong>：如零件的重量，有的以公斤为单位，有的以斤为单位，有的以克为单位。</li></ul><p>属性冲突通常用讨论、协商等手段加以解决。</p><ul><li><strong>命名冲突</strong>：可能发生在属性级、实体级、联系级上。命名冲突通常用讨论、协商等手段解决。</li><li><strong>同名异义</strong>：不同意义的对象在不同局部应用中具有相同名字。</li><li><strong>异名同义</strong>：同一意义的对象在不同局部应用中具有不同名字。如对科研项目，财务科称为项目，科研处称为课题。</li></ul><h2 id="6-3-逻辑结构设计"><a href="#6-3-逻辑结构设计" class="headerlink" title="6.3 逻辑结构设计"></a>6.3 逻辑结构设计</h2><p>下面介绍<strong>E-R图向关系模式的转换</strong>。</p><p>（1）<strong>一个实体型转换为一个关系模式</strong>：<strong>实体的属性就是关系的属性，实体的码就是关系的码。</strong>如职工实体可以转换为关系模式职工(职工号,姓名,年龄,职称)</p><p>（2）<strong>实体间的联系转换</strong>有以下不同情况：</p><ul><li><p>一个<strong>1:1联系</strong>可以转换为：</p><ul><li><p><strong>一个独立的关系模式</strong>：<strong>关系模式的名字就是联系的名字，相联系两端实体的码以及联系本身的属性都是关系模式的属性，任意一端实体的码都是它的码</strong>（存在两个候选码）。</p><p>如下面的E-R图中，负责(<strong>职工号,产品号</strong>)，职工(职工号,……)，产品(产品号,……)。[多了一个表]</p><p>职工号、产品号均可作为关系模式的码。</p></li><li><p><strong>与任意一端实体合并</strong>：<strong>加入另一端实体的码以及联系的属性，码不变。</strong></p><p>如下面的E-R图中，职工(职工号,……,<strong>产品号</strong>)，产品(产品号,……)</p></li></ul></li><li><p>一个<strong>1:n联系</strong>可以转换为：</p><ul><li><p>一个独立的关系模式：<strong>n端的码是新的关系模式的码</strong>，其余与1:1联系相同。</p><p>如下面的E-R图中，</p><p>部门(部门号,……)，职工(职工号,姓名,……)</p><p>属于(部门号,<strong>职工号</strong>[码])</p></li><li><p><strong>1端与n端合并</strong>：要加到n端，码不变。</p><p>如下面的E-R图中，职工(职工号,……,<strong>部门号</strong>)</p></li></ul></li><li><p>一个<strong>m:n联系</strong>只能转换为<strong>一个独立的关系模式</strong>，码是两端实体码的组合。</p><p>如下面的E-R图中，零件-仓库联系中，库存(<strong>零件号,仓库号</strong>[码],库存量[联系本身的属性])。</p></li><li><p>三个或三个以上实体间的一个多元联系转换为一个关系模式：</p><p>与该多元联系相连的各实体的码以及联系本身的属性均是关系的属性，各实体码的组合是关系的码。如(供应商、产品与零件间的)供应联系是一个三元联系，可以将它转换为如下关系模式：<strong>供应(供应商号,产品号,零件号)</strong></p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220517171620714.png" alt="image-20220517171620714"></p><h1 id="ch7-数据库恢复与并发控制"><a href="#ch7-数据库恢复与并发控制" class="headerlink" title="ch7.数据库恢复与并发控制"></a>ch7.数据库恢复与并发控制</h1><h2 id="7-1-事务"><a href="#7-1-事务" class="headerlink" title="7.1 事务"></a>7.1 事务</h2><p>事务(transaction)：用户定义的一个数据库操作序列，这些操作<strong>要么全做，要么全不做</strong>，是一个不可分割的工作单位。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519163250825.png" alt="image-20220519163250825"></p><p>其中，Begin Transction表示事务的开始， Commit为事务提交，即告诉事务管理器事务中的所有操作都已完成，数据库处于另一个一致性状态；而RollBack为事务回滚，即告诉事务管理器事务执行时发生故障，所有已完成的操作必须全部撤销，滚回到事务开始的状态。这里的操作指对数据库的更新操作。</p><p><strong>事务的性质</strong>：事务具有<strong>ACID特性</strong>。</p><ul><li><strong>原子性</strong>(Atomicity)：事务是数据库的逻辑工作单位，事务中包括的诸操作要么全做，要么全不做；</li><li><strong>一致性</strong>(Consistency)：事务的执行必须保证数据库从一个一致性状态转到另一个一致性状态，<strong>并行调度与串行调度结果一致</strong>（若不一致，把此现象称为”丢失修改”）。为了保证其不冲突，需要采用协议，在这里采用<strong>封锁</strong>的方法——X锁（对数据进行修改）、S锁（读锁，Shared Lock），上锁后其他人不能修改；</li><li><strong>隔离性</strong>(Isolation)：一个事务的执行不能被其他事务干扰，并发执行的各个事务间应互相独立；</li><li><strong>持久性</strong>(Durability)：事务一旦提交，它对数据库中数据的改变应是永久的。</li></ul><p>[例] T1事务表示A转帐100元到B， T2事务表示从A中取100元。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519162217909.png" alt="image-20220519162217909" style="zoom:50%;" /><ul><li>一致性：T1单独执行时A+B应不变，如果只write(A)没有write(B)，就不一致；T1、T2并发执行时，A应去掉200元，否则不一致；</li><li>原子性：T1必须全部执行6个操作；</li><li>隔离性：T1、T2相互独立，不应产生数据错误；</li><li>持久性：T1执行后，对数据库的修改永久存在。</li></ul><p>保证事务ACID特性是事务处理的任务。事务ACID特性可能遭到破坏的因素有：</p><ul><li>多个事务并行运行时，不同事务的操作交叉执行</li><li>事务在运行过程中被强行停止</li></ul><h2 id="7-2-故障的种类"><a href="#7-2-故障的种类" class="headerlink" title="7.2 故障的种类"></a>7.2 故障的种类</h2><p>​恢复子系统是DBMS的一个重要组成部分，保证故障发生后能把数据库中的数据从错误状态恢复到某一已知的正确状态，保证事务ACID。恢复技术是衡量系统优劣的重要指标。一般一个大型数据库产品，恢复子系统的代码要占全部代码的10％以上。 下面介绍故障的种类。</p><p>1.<strong>事务故障</strong>：</p><p>某个事务在运行过程中由于种种原因未运行至正常结束点就夭折了，造成数据库可能处于不正确状态。</p><p>事务故障的原因：违反了某些完整性限制、输入数据有误、运算溢出、并行事务发生死锁等。</p><p>恢复子系统一般采用<strong>回滚</strong>(RollBack)，强行撤销(UNDO)该事务对数据库的所有修改，使得这个事务象根本没有启动过一样。</p><p>2.<strong>系统故障</strong>：</p><p>系统故障(软故障)指造成系统停止运转的任何事件，使得系统要重新启动。这类故障影响所有正在运行的事务，但不破坏整个数据库。这时内存数据丢失，所有运行事务都异常终止。</p><p>系统故障的原因：特定类型的硬件错误(如CPU故障)、操作系统故障、DBMS代码错误、突然停电等。</p><p>系统故障的恢复：</p><ul><li><p><strong>日志文件数据不完整，将已经做的全部撤销</strong></p><p>发生系统故障时，一些尚未完成的事务可能已将部分更新操作写回数据库，使数据库处于不正确状态，所以恢复子系统在系统重启时必须让所有非正常终止的事务回滚，<strong>强行撤销</strong>(UNDO)所有未完成事务。</p></li><li><p><strong>日志文件数据完整（知道操作），数据文件数据不完整—–&gt;根据日志继续操作</strong></p><p>发生系统故障时，有些已完成事务可能部分甚至全部留在缓冲区，尚未写回磁盘，系统故障使得这些事务对数据库的修改部分或全部丢失，数据库处于不一致状态，因此恢复子系统在系统重启时，还必须**重做(**REDO)所有已提交事务。</p></li></ul><p>3.<strong>介质故障</strong>：</p><p>介质故障(硬故障)使存储在外存中的数据部分丢失或全部丢失。介质故障发生的可能性较小，但破坏性大，破坏数据库或部分数据库，并影响正在存取这部分数据的所有事务。</p><p>介质故障的原因：磁盘损坏、磁头碰撞、瞬时强磁场干扰等。</p><p>介质故障的恢复：装入介质故障前某个时刻的数据副本，重做自此时开始的所有成功事务，将这些事务已提交的结果重新记入数据库。</p><h2 id="7-3-恢复的实现技术"><a href="#7-3-恢复的实现技术" class="headerlink" title="7.3 恢复的实现技术"></a>7.3 恢复的实现技术</h2><p>恢复机制涉及的两个关键问题：<strong>如何建立冗余数据(数据转储backup、登录日志文件logging)、 如何利用这些冗余数据实施数据库恢复</strong>。</p><p><strong>数据转储</strong>：指DBA将整个数据库复制到磁带或另一磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519165735305.png" alt="image-20220519165735305" style="zoom:50%;" /><p>数据转储分为两类：</p><ul><li><p><strong>静态转储</strong>：系统中无运行事务时进行转储，即转储开始时数据库处于一致性状态，而转储期间不允许对数据库的任何存取、修改操作。优点是实现简单；缺点是转储必须等用户事务结束，<strong>新的事务必须等转储结束</strong>，降低了数据库的可用性。</p></li><li><p><strong>动态转储</strong>：转储期间允许对数据库进行存取或修改，即转储操作与用户事务可以并发进行。优点是不用等待正在运行的用户事务结束，不会影响新事务的运行；缺点是不能保证副本中的数据正确有效，如转储期间的某个时刻Tc系统将数据A&#x3D;100转储，而在下一时刻Td某一事务将A改为200，转储结束后，后备副本上A的值已经过时。因此，必须利用日志文件进行恢复。</p></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519165902324.png" alt="image-20220519165902324" style="zoom:50%;" /><p>数据转储还可以分为以下两类：（均可以动态&#x2F;静态）</p><ul><li><strong>海量转储</strong>：转储全部数据。</li><li><strong>增量转储</strong>：每次只转储自上一次转储后更新过的数据。</li></ul><p>​ 从恢复角度看，使用海量转储得到的后备副本进行恢复往往更方便。但如果数据库很大，事务处理又十分频繁，则增量转储方式更实用更有效。</p><h2 id="7-4-日志"><a href="#7-4-日志" class="headerlink" title="7.4 日志"></a>7.4 日志</h2><p>日志文件的内容：每个事务的开始标记(BEGIN TRANSACTION)、结束标记(COMMIT或ROLLBACK)和每个更新操作均可作为日志文件中的一个日志记录 (log  record)。</p><p><strong>基于记录的日志文件</strong>：每条日志记录的内容有事务标识、操作类型(插入、删除或修改)、操作对象(记录ID)、更新前数据的旧值(插入操作此项为空)、更新后数据的新值(删除操作此项为空)</p><p><strong>基于数据块的日志文件</strong>：每条日志记录的内容有事务标识、被更新的数据块Block NO.、更新前数据所在数据块的值(插入操作此项为空)、更新后数据所在数据块的值(删除操作此项为空)</p><p>日志文件示例：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519170751083.png" alt="image-20220519170751083" style="zoom:50%;" /><p>日志的操作必须遵循以下两点原则：</p><ul><li>登记的次序<strong>严格按照并行事务执行的时间次序</strong>。</li><li><strong>必须先写日志文件，后写数据库写日志文件操作</strong>（“<strong>先期写入</strong>”协议）</li></ul><p>​ 把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不同的操作。有可能在这两个操作之间发生故障，即两个写操作只完成了一个。若先写了数据库修改，而在日志文件中没有登记这个修改，我们无法知道数据库是否修改，则以后就无法恢复这个修改了；若先写日志，但没有修改数据库，按日志文件恢复时只不过是多执行一次不必要的UNDO操作，并不会影响数据库的正确性。</p><h2 id="7-5-恢复策略"><a href="#7-5-恢复策略" class="headerlink" title="7.5 恢复策略"></a>7.5 恢复策略</h2><h3 id="7-5-1-事务故障的恢复"><a href="#7-5-1-事务故障的恢复" class="headerlink" title="7.5.1 事务故障的恢复"></a>7.5.1 事务故障的恢复</h3><p>​事务故障指事务在运行至正常终止点前被中止，这时恢复子系统应利用日志文件撤消(UNDO)此事务已对数据库进行的修改。事务故障的恢复由系统自动完成，对用户是透明的。恢复步骤是：</p><ul><li>反向扫描文件日志(即从最后向前扫描日志文件)，查找该事务的更新操作。</li><li>对该事务的更新操作<strong>执行逆操作</strong>。即若记录中是插入操作， “更新前的值”为空，则相当于做删除操作；若记录中是删除操作，“更新后的值”为空，则相当于做插入操作；若记录中是修改操作，则用修改前值代替修改后值。</li><li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。</li></ul><h3 id="7-5-2-系统故障的恢复"><a href="#7-5-2-系统故障的恢复" class="headerlink" title="7.5.2 系统故障的恢复"></a>7.5.2 系统故障的恢复</h3><p>​系统故障造成数据库不一致状态的原因有两个，一是未完成事务对数据库的更新已写入数据库，二是一些已提交事务对数据库的更新还留在缓冲区没来得及写入数据库。因此恢复操作要UNDO故障发生时未完成的事务，REDO已完成的事务。系统故障的恢复由系统在重新启动时自动完成，不需要用户干预。恢复步骤是：</p><ul><li><strong>正向扫描日志文件</strong>(即从头[老时间—&gt;新时间]扫描日志文件)，找出在故障发生前已经提交的事务(这些事务既有Begin Transaction记录，又有Commit记录)，将其事务标识放入<strong>REDO队列</strong>（继续做完）；同时找出故障发生时尚未完成的事务(这些事务只有Begin Transaction记录、但无Commit记录)，将其事务标识放入<strong>UNDO队列</strong>（全部撤销）。</li><li><strong>反向扫描日志文件</strong>，对UNDO队列中各个事务进行撤销处理。</li><li><strong>正向扫描日志文件</strong>，对REDO队列中各个事务进行重做处理。</li></ul><blockquote><p>[注意]<strong>必须先UNDO再REDO</strong>。</p></blockquote><p>[例]设事务T1在A中存100，执行更新后在提交之前被中止。事务T2在A中存200，并提交。</p><p>T1没有结束标志，T2有开始、结束的标志。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519172238259.png" alt="image-20220519172238259" style="zoom:50%;" /><p>介质故障的恢复与系统故障的恢复相同，发生介质故障后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障。恢复方法是重装数据，然后重做已完成的事务。</p><h2 id="7-6-并发控制"><a href="#7-6-并发控制" class="headerlink" title="7.6 并发控制"></a>7.6 并发控制</h2><h3 id="7-6-1-并发操作引起的问题"><a href="#7-6-1-并发操作引起的问题" class="headerlink" title="7.6.1 并发操作引起的问题"></a>7.6.1 并发操作引起的问题</h3><p>并发操作可能引起的三类数据不一致问题：</p><p><strong>丢失修改</strong>：指两个事务T1和T2从数据库中读入同一数据并修改，T2的提交结果破坏了T1提交的结果，导致T1的修改被丢失</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519172851605.png" alt="image-20220519172851605" style="zoom:50%;" /><p><strong>不可重复读</strong>：不可重复读是指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519172947487.png" alt="image-20220519172947487" style="zoom:50%;" /><p>不可重复读包括三种情况：</p><ul><li>事务T1读取某一数据后，事务T2对其做了<strong>修改</strong>，当T1再次读该数据时，得到与前一次不同的值。</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2<strong>删除</strong>了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录神秘地消失了。</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2<strong>插入</strong>了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。</li></ul><p>后两种情况也称为<strong>幻影现象</strong>(Phantom Row)。</p><p><strong>读“脏”数据</strong>：事务T1修改某一数据，并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤消，这时事务1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据称为“脏”数据。（<strong>读了数据库中没有的数据</strong>）</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519173108830.png" alt="image-20220519173108830" style="zoom:50%;" /><h3 id="7-6-2-封锁"><a href="#7-6-2-封锁" class="headerlink" title="7.6.2 封锁"></a>7.6.2 封锁</h3><p>任何事务T在对某数据操作之前，先向系统发出请求对其加锁。加锁后事务T就对该数据拥有了一定的控制权，在事务T释放锁之前其它事务不能更新该数据。</p><ul><li>**排它锁(X锁,写锁)**：若事务T对数据A加X锁，则只允许T读取和修改A，其他事务不能再对A加任何锁，直到T释放A上的X锁。它保证了在T释放A上X锁之前其他事务不能再读取和修改A ；</li><li>**共享锁(S锁,读锁)**：若事务T对数据A加S锁，则事务T只可读A，但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。它保证了在T释放A上S锁之前其它事务可以读A，但不能修改A。</li></ul><p><strong>X锁和S锁的相容性</strong>：Y为相容，N为不相容。若两个锁不相容，则后提出锁请求的事务必须等待。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220519173416029.png" alt="image-20220519173416029" style="zoom: 67%;" /><h3 id="7-6-3-封锁协议"><a href="#7-6-3-封锁协议" class="headerlink" title="7.6.3 封锁协议"></a>7.6.3 封锁协议</h3><p>封锁协议是指事务对数据封锁时，何时申请X锁或S锁、持锁时间、何时释放等有关封锁的规则。</p><ul><li><strong>一级封锁协议</strong>：事务T在<strong>修改数据</strong>A之前必须先对其加X锁，直到该<strong>事务结束</strong>才释放X锁 （防丢失修改）；</li><li><strong>二级封锁协议</strong>：一级封锁协议加上事务T在<strong>读取数据</strong>A前必须先对其加S锁，<strong>读完后立即释放S锁</strong>（防丢失修改，<strong>防读“脏”数据</strong>）；</li><li><strong>三级封锁协议</strong>：一级封锁协议加上事务T在<strong>读取数据</strong>A前必须先对其加S锁，直到该<strong>事务结束</strong>才释放S锁（防丢失修改，防读“脏”数据，<strong>防不可重复读</strong>）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机学科理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2022/08/14/python01-python-ji-chu/"/>
      <url>/2022/08/14/python01-python-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python基础语法"><a href="#一、Python基础语法" class="headerlink" title="一、Python基础语法"></a>一、Python基础语法</h1><h2 id="1-1-基本运算"><a href="#1-1-基本运算" class="headerlink" title="1.1 基本运算"></a>1.1 基本运算</h2><h3 id="1-1-1-取幂运算"><a href="#1-1-1-取幂运算" class="headerlink" title="1.1.1 取幂运算"></a>1.1.1 取幂运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token number">100</span>a<span class="token operator">**=</span><span class="token number">10</span>  <span class="token comment">#10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-2-除以"><a href="#1-1-2-除以" class="headerlink" title="1.1.2 除以"></a>1.1.2 除以</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">/=</span><span class="token number">10</span> <span class="token comment">#10.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-3-整除"><a href="#1-1-3-整除" class="headerlink" title="1.1.3 整除"></a>1.1.3 整除</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">//</span><span class="token number">9</span>  <span class="token comment">#11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2-字符串的定义与相关操作"><a href="#1-2-字符串的定义与相关操作" class="headerlink" title="1.2 字符串的定义与相关操作"></a>1.2 字符串的定义与相关操作</h2><h3 id="1-2-1-字符串的定义"><a href="#1-2-1-字符串的定义" class="headerlink" title="1.2.1 字符串的定义"></a>1.2.1 字符串的定义</h3><p>字符串在<code>Python</code>中有多种定义形式：</p><ul><li>单引号定义法</li><li>双引号定义法</li><li>三引号定义法：与多行注释的写法一样，同样支持换行操作<ul><li>使用变量接收它，它就是字符串</li><li>不使用变量接收它，就可以作为多行注释使用</li></ul></li></ul><h3 id="1-2-2-字符串的引号嵌套"><a href="#1-2-2-字符串的引号嵌套" class="headerlink" title="1.2.2 字符串的引号嵌套"></a>1.2.2 字符串的引号嵌套</h3><ul><li>单引号定义法，可以内含双引号</li><li>双引号定义法，可以内含单引号</li><li>可以使用转义字符”<code>\</code>“来将引号解除效用<ul><li>例：<code>name = &quot;\&quot;黑马程序员\&quot;&quot;</code>    </li></ul></li></ul><h3 id="1-2-3-字符串的拼接"><a href="#1-2-3-字符串的拼接" class="headerlink" title="1.2.3 字符串的拼接"></a>1.2.3 字符串的拼接</h3><p>使用”<code>+</code>“号连接字符串变量或字符串字面量即可，但<strong>无法和非字符串类型进行拼接</strong>。</p><h3 id="1-2-4-索引"><a href="#1-2-4-索引" class="headerlink" title="1.2.4 索引"></a>1.2.4 索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">word<span class="token operator">=</span><span class="token string">'Python'</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#'P'</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#'n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-3-字符串的格式化与对齐"><a href="#1-3-字符串的格式化与对齐" class="headerlink" title="1.3 字符串的格式化与对齐"></a>1.3 字符串的格式化与对齐</h2><p>字符串的拼接有明显的劣势：</p><ul><li>变量过多，拼接起来较麻烦</li><li>字符串无法和数字或其他类型完成拼接</li></ul><h3 id="1-3-1-占位型拼接"><a href="#1-3-1-占位型拼接" class="headerlink" title="1.3.1 占位型拼接"></a>1.3.1 占位型拼接</h3><ul><li><code>%s</code>表示：占位</li><li><code>s</code>表示：将变量变成字符串放入占位的地方</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"黑马程序员"</span>message <span class="token operator">=</span> <span class="token string">"学IT就来 %s"</span> <span class="token operator">%</span>name<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>多个变量占位</strong>，变量要用括号括起来，并按照占位的顺序填入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class_num <span class="token operator">=</span> <span class="token number">57</span>avg_salary <span class="token operator">=</span> <span class="token number">16781</span>message <span class="token operator">=</span> <span class="token string">"Python大数据学科,北京%d期,毕业平均工资:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>class_num<span class="token punctuation">,</span>avg_salary<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用辅助符号”<code>m.n</code>“来控制数据的<strong>宽度</strong>和<strong>精度</strong>：</p><ul><li><code>m</code>控制宽度，要求是数字（设置的宽度小于数字自身将不生效）</li><li><code>.n</code>控制小数点精度，要求是数字，会进行小数的四舍五入</li></ul><h3 id="1-3-2-快速格式字符串的方式"><a href="#1-3-2-快速格式字符串的方式" class="headerlink" title="1.3.2 快速格式字符串的方式"></a>1.3.2 快速格式字符串的方式</h3><p><code>f&quot;内容&#123;变量&#125;&quot;</code>(<code>f</code>意为<code>format</code>)</p><p>这种方式不理会类型，且不作精度控制，适合对精度没有要求的时候快速使用。</p><h3 id="1-3-3-对齐字符串"><a href="#1-3-3-对齐字符串" class="headerlink" title="1.3.3 对齐字符串"></a>1.3.3 对齐字符串</h3><ul><li><p><code>^</code> ：居中，后面带宽度</p></li><li><p><code>&lt;</code> ：左对齐，后面带宽度</p></li><li><p><code>&gt;</code> ：右对齐，后面带宽度</p></li><li><p><code>:</code> 后面带填充的字符，只能是一个字符，不指定则是默认用空格填充</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#宽度为5,右对齐</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：<br><pre class="line-numbers language-none"><code class="language-none">   1  10 1001000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><div class="table-container"><table><thead><tr><th style="text-align:center">数字</th><th style="text-align:center">格式</th><th style="text-align:center">输出</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">3.1415926</td><td style="text-align:center"><code>&#123;:.2f&#125;</code></td><td style="text-align:center">3.14</td><td style="text-align:center">保留小数点后两位</td></tr><tr><td style="text-align:center">3.1415926</td><td style="text-align:center"><code>&#123;:+.2f&#125;</code></td><td style="text-align:center">+3.14</td><td style="text-align:center">带符号保留小数点后两位</td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center"><code>&#123;:-.2f&#125;</code></td><td style="text-align:center">-1.00</td><td style="text-align:center">带符号保留小数点后两位</td></tr><tr><td style="text-align:center">2.71828</td><td style="text-align:center"><code>&#123;:.0f&#125;</code></td><td style="text-align:center">3</td><td style="text-align:center">不带小数</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>&#123;:0&gt;2d&#125;</code></td><td style="text-align:center">05</td><td style="text-align:center">数字补零 (填充左边, 宽度为2)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>&#123;:x&lt;4d&#125;</code></td><td style="text-align:center">5xxx</td><td style="text-align:center">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center"><code>&#123;:x&lt;4d&#125;</code></td><td style="text-align:center">10xx</td><td style="text-align:center">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:center">1000000</td><td style="text-align:center"><code>&#123;:,&#125;</code></td><td style="text-align:center">1,000,000</td><td style="text-align:center">以逗号分隔的数字格式</td></tr><tr><td style="text-align:center">0.25</td><td style="text-align:center"><code>&#123;:.2%&#125;</code></td><td style="text-align:center">25.00%</td><td style="text-align:center">百分比格式</td></tr><tr><td style="text-align:center">1000000000</td><td style="text-align:center"><code>&#123;:.2e&#125;</code></td><td style="text-align:center">1.00e+09</td><td style="text-align:center">指数记法</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><code>&#123;:&gt;10d&#125;</code></td><td style="text-align:center">13</td><td style="text-align:center">右对齐 (默认, 宽度为10)</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><code>&#123;:&lt;10d&#125;</code></td><td style="text-align:center">13</td><td style="text-align:center">左对齐 (宽度为10)</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><code>&#123;:^10d&#125;</code></td><td style="text-align:center">13</td><td style="text-align:center">中间对齐 (宽度为10)</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center"><code>&#39;&#123;:b&#125;&#39;.format(11) &#39;&#123;:d&#125;&#39;.format(11) &#39;&#123;:o&#125;&#39;.format(11) &#39;&#123;:x&#125;&#39;.format(11) &#39;&#123;:#x&#125;&#39;.format(11) &#39;&#123;:#X&#125;&#39;.format(11)</code></td><td style="text-align:center"><code>1011 11 13 b 0xb 0XB</code></td><td style="text-align:center">进制</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 正号表示正数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:+2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">#+3.140000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:-2f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment">#-1.000000</span><span class="token comment"># 不带小数的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:.0f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.23123131</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#3</span><span class="token comment"># 以逗号为分隔符的</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:,&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">#100,000</span><span class="token comment"># 表示一个百份比</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;:.2%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">#25.00%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-切片操作"><a href="#1-4-切片操作" class="headerlink" title="1.4 切片操作"></a>1.4 切片操作</h2><p>简单切片指的是这样的切片形式：<code>a[start:stop]</code>，其行为是得到下标在这样一个<strong>前闭后开区间</strong>范围内的元素，其中<code>start</code>和<code>stop</code>为负数时，简单看作是负数下标对应的位置即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment">#'Py'相当于数学中的[0,2)</span>z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>z<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#[1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-5-Python中的基本概念"><a href="#1-5-Python中的基本概念" class="headerlink" title="1.5 Python中的基本概念"></a>1.5 Python中的基本概念</h2><ul><li><strong>列表</strong><code>list</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>元组</strong><code>Tuple</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">x2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>步长</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#第三个参数代表步长，答案为(2,4,6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>序列重复</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">x3<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">*</span><span class="token number">5</span>  <span class="token comment">#123123123123123</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二、列表"><a href="#二、列表" class="headerlink" title="二、列表"></a>二、列表</h1><p>列表的<strong>下标索引</strong>，从前向后从<code>0</code>开始，每次<code>+1</code>；从后向前从<code>-1</code>开始，每次<code>-1</code>。</p><h2 id="2-1-追加元素"><a href="#2-1-追加元素" class="headerlink" title="2.1 追加元素"></a>2.1 追加元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一个元素</span>x1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token comment">#仅对列表使用append,[1,2,3,4,"Hello"]</span><span class="token comment">#追加多个元素</span>x1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-中间插入元素"><a href="#2-2-中间插入元素" class="headerlink" title="2.2 中间插入元素"></a>2.2 中间插入元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"GREAT"</span><span class="token punctuation">)</span> <span class="token comment">#x1=[1, 2, 'GREAT', 3, 4, 'Hello', 6, 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3-删除元素"><a href="#2-3-删除元素" class="headerlink" title="2.3 删除元素"></a>2.3 删除元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#remove会删除查找到的第一个元素，并且没有返回值</span><span class="token keyword">del</span> x1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token comment">#删除指定元素</span>element <span class="token operator">=</span> x1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#取出(并删除)元素,并用一变量接收返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-4-反转列表"><a href="#2-4-反转列表" class="headerlink" title="2.4 反转列表"></a>2.4 反转列表</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-5-排序"><a href="#2-5-排序" class="headerlink" title="2.5 排序"></a>2.5 排序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、元组"><a href="#三、元组" class="headerlink" title="三、元组"></a>三、元组</h1><p>元组一旦定义完成，就<strong>不可修改</strong>。</p><blockquote><p>特例：</p><p>可以修改元组内的<code>list</code>内容(修改元素、增加、删除、反转等)。</p></blockquote><h2 id="3-1-只有一个元素的元组定义"><a href="#3-1-只有一个元素的元组定义" class="headerlink" title="3.1 只有一个元素的元组定义"></a>3.1 只有一个元素的元组定义</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#&lt;class 'tuple'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-统计某元素在元组中出现的次数"><a href="#3-2-统计某元素在元组中出现的次数" class="headerlink" title="3.2 统计某元素在元组中出现的次数"></a>3.2 统计某元素在元组中出现的次数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-元组的嵌套"><a href="#3-3-元组的嵌套" class="headerlink" title="3.3 元组的嵌套"></a>3.3 元组的嵌套</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>元组支持<code>for</code>循环。</p></blockquote><h1 id="四、字典"><a href="#四、字典" class="headerlink" title="四、字典"></a>四、字典</h1><h2 id="4-1-格式"><a href="#4-1-格式" class="headerlink" title="4.1 格式"></a>4.1 格式</h2><p>​        每个元素均由”<code>:</code>“和键值对构成，”<code>:</code>“左边称为键（Key），右边称为值（Value）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">english<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"we"</span><span class="token punctuation">:</span><span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span><span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span><span class="token string">"公司"</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#运行结果为：&#123;'we':'我们','world':'世界','company':'公司'&#125; &lt;class 'dict'></span>english<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"城市"</span>  <span class="token comment">#修改/增加元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-删除、清空与拷贝"><a href="#4-2-删除、清空与拷贝" class="headerlink" title="4.2 删除、清空与拷贝"></a>4.2 删除、清空与拷贝</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> english<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span>  <span class="token comment">#删除元素</span>english<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#清空元素</span>english1<span class="token operator">=</span>english<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#复制一个具有相同键值对的字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-3-创建新词典"><a href="#4-3-创建新词典" class="headerlink" title="4.3 创建新词典"></a>4.3 创建新词典</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">seq<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"class"</span><span class="token punctuation">)</span>stu1<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不指定默认值"</span><span class="token punctuation">,</span>stu1<span class="token punctuation">)</span>  <span class="token comment">#&#123;'name':None,'age':None,'Class':None&#125;</span>stu2<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"指定默认值"</span><span class="token punctuation">,</span>stu2<span class="token punctuation">)</span>  <span class="token comment">#&#123;'name':15,'age':15,'Class':15&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-返回键对应的值"><a href="#4-4-返回键对应的值" class="headerlink" title="4.4 返回键对应的值"></a>4.4 返回键对应的值</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#输出"世界"，若字典中没有则返回None,可以指定默认值，如下</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出"未知"</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出：dict_key(['we','world','company'])，keys方法常用来判断一个键是否存在于字典中</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是否存在world?"</span><span class="token punctuation">,</span><span class="token string">"world"</span> <span class="token keyword">in</span> english<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-返回列表"><a href="#4-5-返回列表" class="headerlink" title="4.5 返回列表"></a>4.5 返回列表</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#输出：dict_items([('we','我们'),('world','世界'),('company','公司')])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-6-遍历字典"><a href="#4-6-遍历字典" class="headerlink" title="4.6 遍历字典"></a>4.6 遍历字典</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> english<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token string">"->"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token comment">#输出：we->我们</span><span class="token comment">#     world->世界</span><span class="token comment">#     company->公司</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h1><h2 id="5-1-集合的格式"><a href="#5-1-集合的格式" class="headerlink" title="5.1 集合的格式"></a>5.1 集合的格式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">empty <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#空集合</span>number <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>  <span class="token comment">#数字集合</span>mix <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"您好"</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#混合类型集合，输出&#123;3.14,1,'您好'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-2-集合的基本操作"><a href="#5-2-集合的基本操作" class="headerlink" title="5.2 集合的基本操作"></a>5.2 集合的基本操作</h2><p>集合的基本操作主要有增加，减少，取交、并、差等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">number <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>number<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#&#123;1,2,3,5&#125;,增加元素可以增加重复的（相当于不增加）</span>number<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#&#123;1,2&#125;,减少元素不可以用于不存在的元素，不然会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设<code>n1=&#123;1,3,5&#125;,n2=&#123;2,7,1,3&#125;:</code></p><ul><li>交：<code>n1&amp;n2</code> ，结果是<code>&#123;1,3&#125;</code></li><li>并：<code>n1|n2</code>，结果是<code>&#123;1,2,3,5,7&#125;</code></li><li>差：<code>n1-n2</code>，结果是<code>&#123;5&#125;</code></li><li>对称差：<code>n1^n2</code>，结果是<code>&#123;2，5，7&#125;</code></li></ul><h1 id="六、推导式-解析式"><a href="#六、推导式-解析式" class="headerlink" title="六、推导式(解析式)"></a>六、推导式(解析式)</h1><h2 id="6-1-列表推导式"><a href="#6-1-列表推导式" class="headerlink" title="6.1 列表推导式"></a>6.1 列表推导式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">odd<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span>  <span class="token comment">#输出为[1,3,5,7,9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-2-字典推导式"><a href="#6-2-字典推导式" class="headerlink" title="6.2 字典推导式"></a>6.2 字典推导式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">d1<span class="token operator">=</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">:</span>n<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span>  <span class="token comment">#&#123;0:0,1:1,2:4,3:9,4:16&#125;</span>d2<span class="token operator">=</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">:</span>k <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> d1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span>  <span class="token comment">#&#123;0:0,1:1,4:2,9:3,16:4&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3-集合推导式"><a href="#6-3-集合推导式" class="headerlink" title="6.3 集合推导式"></a>6.3 集合推导式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1<span class="token operator">=</span><span class="token punctuation">&#123;</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment">##&#123;1,4,25&#125;,推导时可以去除重复元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="七、流程控制"><a href="#七、流程控制" class="headerlink" title="七、流程控制"></a>七、流程控制</h1><h2 id="7-1-if判断"><a href="#7-1-if判断" class="headerlink" title="7.1 if判断"></a>7.1 if判断</h2><p>格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token boolean">True</span><span class="token keyword">if</span> x<span class="token punctuation">:</span> <span class="token comment">#表达式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It is True!"</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>elif,else</code></p><h2 id="7-2-while循环"><a href="#7-2-while循环" class="headerlink" title="7.2 while循环"></a>7.2 while循环</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> x<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-for循环"><a href="#7-3-for循环" class="headerlink" title="7.3 for循环"></a>7.3 for循环</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#输出1 2 3 4 5(每个都将会换行)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#range也可指定开始和结束数字，如range(1,10),输出从1到9</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#输出0 1 2 3 4 5(每个都将会换行)，注意从0开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>range</code>还可以指定序列步长，如<code>range(1,10,2)</code>,即为<code>1，3，5，7，9</code>（每个都将会换行）。</p><p>ps：<code>pass</code>语句，不执行任何操作，其作用是保持程序结构的完整性</p><p>如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>while</code>、<code>for</code>后可以跟<code>else</code>,当跳出循环时会执行<code>else</code>的语句。但如果是因为<code>break</code>产生的跳出循环，则不会执行<code>else</code>的语句。</p><h1 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h1><h2 id="8-1-可变参数"><a href="#8-1-可变参数" class="headerlink" title="8.1 可变参数"></a>8.1 可变参数</h2><p>(1)<code>*args</code>参数：获取到的是一个元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Shanghai"</span><span class="token punctuation">)</span> <span class="token comment">#输出(1,'Shanghai')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)<code>**kwargs</code>参数：获取到的是一个字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>foo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">)</span>  <span class="token comment">#输出&#123;'name':'Jack'&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(3)组合使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>    s<span class="token operator">+=</span>i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的数字之和为"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>cal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>姓名<span class="token operator">=</span><span class="token string">"Jack"</span><span class="token punctuation">)</span> <span class="token comment">#结果为：输入的数字之和为15  姓名Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-函数的多返回值"><a href="#8-2-函数的多返回值" class="headerlink" title="8.2 函数的多返回值"></a>8.2 函数的多返回值</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#1</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment">#2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-函数的多种传参方式"><a href="#8-3-函数的多种传参方式" class="headerlink" title="8.3 函数的多种传参方式"></a>8.3 函数的多种传参方式</h2><h3 id="8-3-1-位置参数"><a href="#8-3-1-位置参数" class="headerlink" title="8.3.1 位置参数"></a>8.3.1 位置参数</h3><p>调用函数时根据函数定义的<strong>参数位置</strong>来传递参数。</p><h3 id="8-3-2-关键字参数"><a href="#8-3-2-关键字参数" class="headerlink" title="8.3.2 关键字参数"></a>8.3.2 关键字参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"您的名字是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">，年龄是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">，性别是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>gender<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">#关键字传参</span>user_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token comment">#可以不按照固定顺序</span>user_info<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token comment">#可以和位置参数混用，位置参数必须在前，且匹配参数顺序</span>user_info<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-3-缺省参数"><a href="#8-3-3-缺省参数" class="headerlink" title="8.3.3 缺省参数"></a>8.3.3 缺省参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"您的名字是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">，年龄是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">，性别是：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>gender<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-函数作为参数传递"><a href="#8-4-函数作为参数传递" class="headerlink" title="8.4 函数作为参数传递"></a>8.4 函数作为参数传递</h2><p>函数作为参数传递是一种<strong>计算逻辑的传递</strong>，计算逻辑由被传入函数决定，而非数据的传递。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#确定compute是函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> ytest_func<span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-5-lambda匿名函数"><a href="#8-5-lambda匿名函数" class="headerlink" title="8.5 lambda匿名函数"></a>8.5 lambda匿名函数</h2><p><code>lambda</code>关键字，可以定义匿名函数(无名称)。匿名函数只可以<strong>临时使用一次</strong>。</p><p>匿名函数定义语法：<code>lambda 传入参数 : 函数体</code></p><blockquote><p>注：</p><p>函数体就是函数的执行逻辑，只能写一行，无法写多行代码。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>compute<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> compute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#确定compute是函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>test_func<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-6-filter函数"><a href="#8-6-filter函数" class="headerlink" title="8.6 filter函数"></a>8.6 filter函数</h2><p><code>filter</code>函数是内置函数，用于过滤序列，即过滤掉不符合条件的元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>a2<span class="token operator">=</span><span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>  <span class="token comment">#[6,7,8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-7-函数注释"><a href="#8-7-函数注释" class="headerlink" title="8.7 函数注释"></a>8.7 函数注释</h2><p>格式为：(参数注释+返回值注释)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span>expression<span class="token punctuation">,</span>b<span class="token punctuation">:</span>expression<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>expression<span class="token punctuation">:</span>    function body<span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若需要获取函数注释，可以使用<code>__annotations__</code>的方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>function_name<span class="token punctuation">.</span>__annotations__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="九、类和对象"><a href="#九、类和对象" class="headerlink" title="九、类和对象"></a>九、类和对象</h1><h2 id="9-1-类的属性"><a href="#9-1-类的属性" class="headerlink" title="9.1 类的属性"></a>9.1 类的属性</h2><p>在Python中，构造函数就是类的<code>__init__</code>方法，当一个类定义了<code>__init__</code>方法后，类在实例化时会自动调用<code>__init__</code>方法，用于创建新的类实例。在构造方法中我们可以初始化一些属性（或称成员变量、类变量）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">3</span>dog<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">#旺财</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment">#3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类中定义的方法第一个参数必须是“self”，即<code>def play(self)</code>。</p><p>私有属性可用<code>dog.__name</code>加两条下划线的形式，只能在类内进行修改。私有方法同理。</p><h2 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h2><p>定义要从哪个父类继承，只需在定义子类的名字后面的括号中填入父类的名字即可，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">3</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3-多态"><a href="#9-3-多态" class="headerlink" title="9.3 多态"></a>9.3 多态</h2><p>多态的意思就是多种形态。多态意味着即使不知道变量所引用的对象是什么类型，也能对对象进行操作。多态会根据类的不同表现出不同的行为。</p><h3 id="9-3-1-继承方式实现多态"><a href="#9-3-1-继承方式实现多态" class="headerlink" title="9.3.1 继承方式实现多态"></a>9.3.1 继承方式实现多态</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span>dog<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#Dog</span>cat<span class="token operator">=</span>cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#cat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：判断一个实例是否是某个对象可以用<code>isinstance</code>函数，格式为<code>isinstance(dog,Dog)</code>，返回<code>True</code>or<code>False</code>。</p><h3 id="9-3-2-函数参数实现多态"><a href="#9-3-2-函数参数实现多态" class="headerlink" title="9.3.2 函数参数实现多态"></a>9.3.2 函数参数实现多态</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#接上例</span><span class="token keyword">def</span> <span class="token function">animal_say</span><span class="token punctuation">(</span>animal<span class="token punctuation">:</span>Animal<span class="token punctuation">)</span>animal<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>animal_say<span class="token punctuation">(</span>dog<span class="token punctuation">)</span>animal_say<span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-3-鸭子类型"><a href="#9-3-3-鸭子类型" class="headerlink" title="9.3.3 鸭子类型"></a>9.3.3 鸭子类型</h3><p>​        鸭子类型中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口决定的，而是由当前方法和属性的集合决定的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">animal_say</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#编写一个函数，使它接受一个类型为鸭子的对象</span>    animal<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token operator">=</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token operator">=</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>animal_say<span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-4-静态方法和类方法"><a href="#9-4-静态方法和类方法" class="headerlink" title="9.4 静态方法和类方法"></a>9.4 静态方法和类方法</h2><h3 id="9-4-1-静态方法"><a href="#9-4-1-静态方法" class="headerlink" title="9.4.1 静态方法"></a>9.4.1 静态方法</h3><p>​        定义静态方法时，在定义函数的上面一行添加“<code>@staticmethod</code>”，且静态方法不再有第一个默认参数“<code>self</code>”，本身也不能调用成员变量和成员方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span>name<span class="token operator">=</span><span class="token string">"动物"</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Playing"</span><span class="token punctuation">)</span>Animal<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-2-类方法"><a href="#9-4-2-类方法" class="headerlink" title="9.4.2 类方法"></a>9.4.2 类方法</h3><p>​            类方法将该方法绑定在定义的类上，而不是绑定在实例上。在定义函数的上面一行添加“<code>@classmethod</code>”，有初始参数”<code>cls</code>“，类方法指向的是定义的类本身，类方法可以读取和修改类变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span>name<span class="token operator">=</span><span class="token string">"动物"</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token string">"Playing"</span><span class="token punctuation">)</span>Animal<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、模块"><a href="#十、模块" class="headerlink" title="十、模块"></a>十、模块</h1><p>模块就是一个包含了Python定义和声明的”.py”文件。在完成一个”.py”文件后，在与其同目录的文件可以使用这个模块，即<code>import fibs</code>。如果要导入模块中的一个指定的部分到当前命名空间中，可用<code>from fibs import fib,fib2</code>。</p><h2 id="10-1-获取模块名"><a href="#10-1-获取模块名" class="headerlink" title="10.1 获取模块名"></a>10.1 获取模块名</h2><p>模块的模块名可以通过全局变量”<code>__name__</code>“获得。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> fibs<span class="token keyword">print</span><span class="token punctuation">(</span>fibs<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment">#fibs</span><span class="token keyword">print</span><span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>       <span class="token comment">#__main__</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由此可知，在定义模块时，可通过看当前的”<code>__name__</code>“变量是否为”<code>__main__</code>“来判断当前文件是被运行还是作为模块被导入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"直接运行"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"被作为模块导入"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-2-dir函数"><a href="#10-2-dir函数" class="headerlink" title="10.2 dir函数"></a>10.2 dir函数</h2><p>dir函数可以列出对象的模块标识符，包括函数、类和变量。模块也是对象，调用模块中的内容和调用对象中的内容的方法是一样的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> fibsfibs<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fibs<span class="token punctuation">.</span>fib2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10-3-包"><a href="#10-3-包" class="headerlink" title="10.3 包"></a>10.3 包</h2><p>模块即一个py文件，通过“包”加以组织。“包”是一个包含模块，且至少包含一个<code>__init__.py</code>的文件夹，模块中包含代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">package9<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span>__init__<span class="token punctuation">.</span>py<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span>fun1<span class="token punctuation">.</span>py<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span>fun2<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>package9/fun1.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>package9/fun2.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>__init__.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"作为主程序运行"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"package初始化"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>demo.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入package9包</span><span class="token keyword">from</span> package9<span class="token punctuation">.</span>fun1 <span class="token keyword">import</span> print1<span class="token keyword">from</span> package9<span class="token punctuation">.</span>fun2 <span class="token keyword">import</span> print2print1<span class="token punctuation">(</span><span class="token punctuation">)</span>print2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-常用标准库"><a href="#10-4-常用标准库" class="headerlink" title="10.4 常用标准库"></a>10.4 常用标准库</h2><h3 id="10-4-1-math库"><a href="#10-4-1-math库" class="headerlink" title="10.4.1 math库"></a>10.4.1 math库</h3><p>两个常量：圆周率和自然常数e，调用方式为：<code>math.pi</code>,<code>math.e</code>。</p><p>运算函数：向上取整，如<code>math.ceil(1.7)</code>，结果为2；向下取整，如<code>math.floor(1.7)</code>，结果为1。</p><p>​                    对数函数（默认底数为e，可使用第二个参数来改变对数的底数）</p><p>​                    平方根计算（sqrt），三角函数计算，角度(degree)弧度(radians)转换</p><h3 id="10-4-2-random库"><a href="#10-4-2-random库" class="headerlink" title="10.4.2 random库"></a>10.4.2 random库</h3><p><code>random.random</code>用于生成一个0-1的随机浮点数：<code>0&lt;=n&lt;1.0</code>。</p><p><code>random.uniform(1,150)</code>用于生成一个指定范围内的随机浮点数。</p><p><code>random.choice(seq1)</code>会从给定的序列中获取一个随机元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomseq1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>seq2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"星期日"</span><span class="token punctuation">,</span><span class="token string">"星期一"</span><span class="token punctuation">,</span><span class="token string">"星期二"</span><span class="token punctuation">,</span><span class="token string">"星期三"</span><span class="token punctuation">,</span><span class="token string">"星期四"</span><span class="token punctuation">,</span><span class="token string">"星期五"</span><span class="token punctuation">,</span><span class="token string">"星期六"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>seq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>seq2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>random.shuffle(seq1)</code>用于将一个列表中的元素打乱（注意：原来的序列必须是可以修改的，故元组等类型不能作为其参数使用）。</p><h1 id="十一、文件操作与IO"><a href="#十一、文件操作与IO" class="headerlink" title="十一、文件操作与IO"></a>十一、文件操作与IO</h1><h2 id="11-1-文件基本操作"><a href="#11-1-文件基本操作" class="headerlink" title="11.1 文件基本操作"></a>11.1 文件基本操作</h2><p>打开文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">file_name<span class="token operator">=</span><span class="token string">"10.1.py"</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件模式:<code>r+</code>，表示打开一个文件用于读写，文件指针将会放在文件的开头。</p><p>使用<code>open</code>函数返回的是一个文件对象，然后通过使用<code>read</code>方法从一个打开的文件中读取内容到字符串。写文件则用<code>write</code>方法。<code>write</code>方法返回写入文件的字符串的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">)</span>txt<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若想在已有的文件内容后追加内容，可在打开文件时使用”<code>a</code>“模式，这样就可以在文件中追加写入内容。</p><p>关闭文件用<code>f.close()</code>。</p><h2 id="11-2-按行读-写文件"><a href="#11-2-按行读-写文件" class="headerlink" title="11.2 按行读/写文件"></a>11.2 按行读/写文件</h2><h3 id="11-2-1-按行读取文件内容"><a href="#11-2-1-按行读取文件内容" class="headerlink" title="11.2.1 按行读取文件内容"></a>11.2.1 按行读取文件内容</h3><p><code>f.readline()</code></p><p><code>readlines</code>函数会将文件内容按行切割，返回一个list列表对象。（注意：<code>readlines</code>函数会保留结尾的换行符，不会去掉换行符，直接<code>print</code>列表元素会发现每次输出都跟随一个空白行）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此外还有直接迭代文件对象本身的操作：这是一种”惰性“读取文件的方式，只有迭代到需要读取的一行，才会真的执行读取操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-2-2-按行写入文件内容"><a href="#11-2-2-按行写入文件内容" class="headerlink" title="11.2.2 按行写入文件内容"></a>11.2.2 按行写入文件内容</h3><p>利用<code>writelines</code>方法接收一个参数（必须是列表），列表的每个元素就是想写入的每行文本的内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"writelines.txt"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span>lines<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为<code>0123456789</code>，说明其不会帮助我们在每行之后添加换行符。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i<span class="token operator">=</span><span class="token number">1</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"numbers.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token comment">#利用追加模式,参数从w替换为a即可</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&#123;&#125;\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#format()为格式化字符串的函数</span>    i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-3-StringIO函数"><a href="#11-3-StringIO函数" class="headerlink" title="11.3 StringIO函数"></a>11.3 StringIO函数</h2><p>对str操作，要把str写入<code>StringIO</code>，需要先创建一个<code>StringIO</code>对象，然后像文件一样写入即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIOf<span class="token operator">=</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#获得写入后的str，输出hello world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要读取<code>StringIO</code>，可以先用一个str初始化<code>StringIO</code>，然后像读文件一样读取。其中<code>strip()</code>方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。若参数不为空，则移除所有该参数，如<code>print str.strip( &#39;0&#39; );  #去除首尾字符 0</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIOf<span class="token operator">=</span>StringIO<span class="token punctuation">(</span><span class="token string">'Hello!\nWorld!\nWelcome!\n'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    s<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> s<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-4-BytesIO函数"><a href="#11-4-BytesIO函数" class="headerlink" title="11.4 BytesIO函数"></a>11.4 BytesIO函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOf<span class="token operator">=</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"您好"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#以指定的编码格式编码字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#以指定的编码格式解码字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：<code>b&#39;\xe6\x82\xa8\xe5\xa5\xbd&#39;</code></p><p>​                           <code>您好</code>  </p><p>读取方式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOf<span class="token operator">=</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'\xe6\x82\xa8\xe5\xa5\xbd'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#输出"中文"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-5-序列化与反序列化"><a href="#11-5-序列化与反序列化" class="headerlink" title="11.5 序列化与反序列化"></a>11.5 序列化与反序列化</h2><p><code>pickle.dumps</code>可以把任意对象序列化成bytes对象，然后写入文件中永久存储。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>genderstudent1<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十二、日期和时间"><a href="#十二、日期和时间" class="headerlink" title="十二、日期和时间"></a>十二、日期和时间</h1><h2 id="12-1-time函数"><a href="#12-1-time函数" class="headerlink" title="12.1 time函数"></a>12.1 time函数</h2><p>​        time函数用于返回当前时间的时间戳，time函数返回的是浮点数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timenow<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前的时间戳是：%f"</span> <span class="token operator">%</span> now<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果为：<code>当前的时间戳是：1641976277.347599</code>。</p><h2 id="12-2-localtime函数"><a href="#12-2-localtime函数" class="headerlink" title="12.2 localtime函数"></a>12.2 localtime函数</h2><p>​         <code>localtime</code>函数的作用是将时间戳格式化为本地时间，返回<code>struct_time</code>对象。<code>localtime</code>函数有一个参数用于接收时间戳，如果调用函数时不提供时间戳， <code>localtime</code>函数默认使用当前时间戳。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前时间"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0时间戳对应的时间"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="12-3-datetime模块"><a href="#12-3-datetime模块" class="headerlink" title="12.3 datetime模块"></a>12.3 datetime模块</h2><p>​        datetime模块包含了日期和时间的所有信息。</p><h3 id="12-3-1-date对象"><a href="#12-3-1-date对象" class="headerlink" title="12.3.1 date对象"></a>12.3.1 date对象</h3><p>表示在日历中的一个日期（包含年、月、日）。格式为<code>date=datetime.date(2018,7,1)</code>。</p><h3 id="12-3-2-一些方法"><a href="#12-3-2-一些方法" class="headerlink" title="12.3.2 一些方法"></a>12.3.2 一些方法</h3><p><code>Today</code>方法/<code>weekday</code>方法分别返回当天日期和当前星期数（星期一返回0，依此类推）。<code>isoweekday</code>方法星期一返回1，依此类推。<code>isoformat</code>方法返回日期格式为ISO格式，即“YYYY-MM-DD”字符串。<code>strftime</code>方法可以格式化输出日期，如<code>print(date.strftime(&quot;%Y-%m-%d&quot;))</code>。对于时-分-秒，分别为<code>%H:%M:%S</code>。</p><h1 id="十三、多线程和并行"><a href="#十三、多线程和并行" class="headerlink" title="十三、多线程和并行"></a>十三、多线程和并行</h1><p>​        多线程是指在软件或者硬件上实现多个线程并发执行的技术。Python标准库中关于线程的主要是<code>_thread</code>和<code>threading</code>模块。</p><h2 id="13-1-thread模块"><a href="#13-1-thread模块" class="headerlink" title="13.1 _thread模块"></a>13.1 _thread模块</h2><h3 id="13-1-1-概述"><a href="#13-1-1-概述" class="headerlink" title="13.1.1 概述"></a>13.1.1 概述</h3><p>​        核心是<code>start_new_thread</code>方法，格式为：<code>_thread.start_new_thread(function,args[,kwargs])</code>。线程使用参数列表<code>args</code>（必须是元组）执行函数，可选的<code>kwargs</code>参数指定关键字参数的字典。在单个线程执行时，别的线程也在”同步“地执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> _threaddate_time_format<span class="token operator">=</span><span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span>date_time_format<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_function</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleeping"</span><span class="token operator">%</span>thread_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread start at %s"</span><span class="token operator">%</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>thread_function<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread finish at %s"</span><span class="token operator">%</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Main thread start at 17:44:03Thread 0 start at 17:44:03Thread 0 sleepingThread 1 start at 17:44:04Thread 1 sleepingThread 2 start at 17:44:05Thread 2 sleepingThread 3 start at 17:44:06Thread 3 sleepingThread 0 finish at 17:44:07Thread 4 start at 17:44:07Thread 4 sleepingThread 1 finish at 17:44:08Thread 2 finish at 17:44:09Thread 3 finish at 17:44:10Thread 4 finish at 17:44:11Main thread finish at 17:44:14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-1-2-线程锁"><a href="#13-1-2-线程锁" class="headerlink" title="13.1.2 线程锁"></a>13.1.2 线程锁</h3><p><code>_thread.allocate_lock</code>方法返回一个<code>Lock</code>对象。<code>Lock</code>对象有三个方法：</p><p>【1】acquire方法：用于无条件地获取Lock对象（如果有必要，等待他被另一个线程释放，一次只有一个线程可以获取锁定）。</p><p>【2】release方法：用于释放锁，释放之前必须先锁定，</p><p>【3】locked方法：用于返回锁的状态，如果已被某个线程锁定，则返回True，否则返回False。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lock<span class="token operator">=</span>_thread<span class="token punctuation">.</span>allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>locks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-2-Threading模块"><a href="#13-2-Threading模块" class="headerlink" title="13.2 Threading模块"></a>13.2 Threading模块</h2><p>利用<code>threading.Thread</code>创建线程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> threadingdate_time_format<span class="token operator">=</span><span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now<span class="token operator">=</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span>date_time_format<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_function</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleeping"</span><span class="token operator">%</span>thread_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread start at %s"</span><span class="token operator">%</span>get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#创建线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thread<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_function<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    <span class="token comment">#启动线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#等待线程执行完毕</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#阻塞线程，使用join后，后面的语句需要等当前进程完成之后才能执行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread finish at %s"</span><span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-none"><code class="language-none">Main thread start at 20:36:02Thread 0 start at 20:36:02Thread 0 sleepingThread 1 start at 20:36:03Thread 1 sleepingThread 2 start at 20:36:04Thread 2 sleepingThread 3 start at 20:36:05Thread 3 sleepingThread 0 finish at 20:36:06Thread 4 start at 20:36:06Thread 4 sleepingThread 1 finish at 20:36:07Thread 2 finish at 20:36:08Thread 3 finish at 20:36:09Thread 4 finish at 20:36:10Main thread finish at 20:36:10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统理论</title>
      <link href="/2022/08/14/li-lun-01-cao-zuo-xi-tong-li-lun/"/>
      <url>/2022/08/14/li-lun-01-cao-zuo-xi-tong-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="ch1-操作系统概述"><a href="#ch1-操作系统概述" class="headerlink" title="ch1.操作系统概述"></a>ch1.操作系统概述</h1><h2 id="1-1-操作系统的类型"><a href="#1-1-操作系统的类型" class="headerlink" title="1.1 操作系统的类型"></a>1.1 操作系统的类型</h2><h3 id="1-1-1-基本类型"><a href="#1-1-1-基本类型" class="headerlink" title="1.1.1 基本类型"></a>1.1.1 基本类型</h3><ul><li>(单道&#x2F;多道)<strong>批处理系统</strong></li></ul><blockquote><p>批处理(batch processing)，即将作业按照它们的性质分组(批)，然后成组(批)提交给计算机系统。</p><p>多道批处理系统出现的前提：通道技术、中断技术</p><ul><li>通道：专门用于负责输入输出的硬件装置(输入输出处理机，IOP)。</li><li>通道思想：用户提交的作业先在外存排成一个队列（后备队列），由作业调度程序按照一定的算法从中选择若干作业调入内存，共享系统中的各种资源。</li></ul><p>多道批处理系统的特征：</p><ul><li><strong>多道性</strong></li><li><strong>无序性</strong></li><li><strong>调度性（两级）</strong></li></ul><p>多道批处理系统的优缺点：</p><p>优点：</p><ul><li>资源利用率高</li><li>系统吞吐量大</li></ul><p>缺点：</p><ul><li>平均周转时间长</li><li><strong>无交互能力</strong></li></ul></blockquote><ul><li><p><strong>分时系统</strong></p></li><li><p><strong>实时系统</strong></p></li></ul><h3 id="1-1-2-分时系统"><a href="#1-1-2-分时系统" class="headerlink" title="1.1.2 分时系统"></a>1.1.2 分时系统</h3><p>一台主机周围联接多个终端，多个用户通过不同的终端共享使用主机资源。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220530160228638.png" alt="image-20220530160228638" style="zoom:50%;" /><p><strong>分时系统的特征</strong>：</p><ul><li><p><strong>多路性</strong></p></li><li><p><strong>独立性</strong></p></li><li><p><strong>及时性</strong></p></li><li><p><strong>交互性</strong></p></li></ul><p>分时系统实现的关键问题：</p><ul><li>及时接收：及时接收来自终端用户的命令</li><li>及时处理：及时响应用户输入的命令，即响应时间要短</li></ul><p>实现方法：</p><ul><li>简单分时系统：单道，时间片（Time Slice）</li><li>具有前后台的分时系统<ul><li>前台存放分时作业，后台存放<strong>批处理</strong>作业。</li><li>仅当前台无作业处理时，才运行后台作业。</li></ul></li><li>多道分时系统：  目前采用较多的分时系统。</li></ul><p><strong>影响响应时间的因素</strong>：</p><ul><li>时间片一定</li><li>用户数一定</li><li>系统开销</li><li>对换信息量</li></ul><h3 id="1-1-3-实时系统"><a href="#1-1-3-实时系统" class="headerlink" title="1.1.3 实时系统"></a>1.1.3 实时系统</h3><p>实时系统的分类：</p><ul><li>实时过程控制</li><li>实时信息处理</li></ul><p>实时系统的类型：</p><ul><li>周期性实时任务&#x2F;非周期性实时任务</li><li>每一个任务都有一个<strong>截止时间</strong>（deadline）：开始截止时间、完成截止时间</li><li>根据对截止时间的要求划分：<strong>硬实时任务&#x2F;软实时任务</strong></li></ul><p>实时系统的特征：</p><ul><li>多路性</li><li>交互性</li><li>独立性</li><li>及时性</li><li><strong>可靠性</strong></li></ul><blockquote><p>实时系统与批处理、分时系统的区别：</p><ul><li>属“<strong>专用系统</strong>”，处理程序常驻主存</li><li>有较强的中断处理机构、分析机构</li><li>有较高的精度和可靠性</li></ul></blockquote><h2 id="1-2-操作系统的工作控制方式"><a href="#1-2-操作系统的工作控制方式" class="headerlink" title="1.2 操作系统的工作控制方式"></a>1.2 操作系统的工作控制方式</h2><ul><li>中断（Interrupt）【硬件】——中断向量、中断驱动</li><li>陷入（trap）【软件】</li></ul><h2 id="1-3-操作系统的硬件保护"><a href="#1-3-操作系统的硬件保护" class="headerlink" title="1.3 操作系统的硬件保护"></a>1.3 操作系统的硬件保护</h2><ul><li><strong>双模式</strong>：<strong>内核模式</strong>（或称系统模式&#x2F;内核态&#x2F;系统态）、<strong>用户模式</strong>（或称用户态）</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220530155610315.png" alt="image-20220530155610315" style="zoom: 67%;" /><ul><li><strong>I&#x2F;O保护</strong>：<strong>特权指令</strong>（只在内核模式下才允许执行的指令）和<strong>非特权指令</strong></li><li><strong>CPU保护</strong>：<strong>定时器</strong>（设置中断计算机的周期时间，可固定&#x2F;可变）——CPU Interval</li><li><strong>内存保护</strong>：<strong>基址寄存器</strong>（存放程序基本地址值）、<strong>限长寄存器</strong>、<strong>越界检测</strong></li></ul><h2 id="1-4-操作系统的设置目标、功能和特征"><a href="#1-4-操作系统的设置目标、功能和特征" class="headerlink" title="1.4 操作系统的设置目标、功能和特征"></a>1.4 操作系统的设置目标、功能和特征</h2><p><strong>设置目标</strong>：</p><ul><li><strong>管理系统资源，达到系统资源的有效利用和共享。</strong>（主要目标）</li><li><strong>合理组织计算机的工作流程，改善系统性能（响应时间、吞吐量）。</strong>（主要目标）</li><li><strong>提供用户接口，简化用户使用操作</strong>。（主要目标）</li><li>可扩展——满足计算机硬件与体系结构的发展及应用不断扩大的要求，能扩展新的功能</li><li>开放——遵循世界标准规范，特别是开放系统互连OSI国际标准；凡遵循国际标准所开发的硬件和软件，都能彼此兼容</li><li>安全可靠</li></ul><p><strong>功能</strong>：</p><ul><li><strong>存储管理</strong>：内存分配、内存保护、地址映射、内存扩充</li><li><strong>处理机管理</strong>：进程控制、进程同步、进程通信、进程调度</li><li><strong>设备管理</strong>：缓冲管理、设备分配、设备处理、设备独立性和虚拟设备</li><li><strong>文件管理</strong>：外存管理、目录管理、文件操作</li><li><strong>用户接口</strong>：<strong>命令接口</strong>、<strong>程序接口</strong>、<strong>图形接口</strong></li></ul><blockquote><p>注：</p><p>当用户程序需要使用操作系统所提供的服务时，采用<strong>系统调用接口</strong>来完成，系统调用是程序调用的一种。</p></blockquote><p><strong>特征</strong>：</p><ul><li><strong>并发性</strong></li><li><strong>共享性</strong></li><li><strong>异步性</strong></li><li><strong>随机性</strong></li><li><strong>虚拟性</strong></li></ul><p>各特征解释如下：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220530160958651.png" alt="image-20220530160958651"></p><h2 id="1-5-操作系统安全相关概念"><a href="#1-5-操作系统安全相关概念" class="headerlink" title="1.5 操作系统安全相关概念"></a>1.5 操作系统安全相关概念</h2><p><strong>操作系统安全的目标</strong>：</p><ul><li>控制哪些人来用操作系统</li><li>控制合法用户使用哪些程序</li><li>控制进程能访问哪些数据或资源</li><li>保护用户之间的资源共享</li></ul><p><strong>操作系统安全的需求</strong>：</p><ul><li>系统边界安全</li><li>系统权限管理</li><li>应用和数据的<strong>访问控制</strong></li><li>可信通路</li><li>安全审计和管理</li></ul><p><strong>操作系统安全的内容</strong>：</p><ul><li>Authentication（<strong>认证</strong>）：who are you？</li><li>Access Control&#x2F;Authorisation（<strong>访问控制&#x2F;授权</strong>）： How to use？</li><li>Auditing（<strong>审计</strong>）： What have you done?</li><li>Action（<strong>响应</strong>）：How to response your actions？</li></ul><h1 id="ch2-进程与线程"><a href="#ch2-进程与线程" class="headerlink" title="ch2.进程与线程"></a>ch2.进程与线程</h1><h2 id="2-1-程序执行方式"><a href="#2-1-程序执行方式" class="headerlink" title="2.1 程序执行方式"></a>2.1 程序执行方式</h2><p>程序的<strong>顺序</strong>执行：顺序性、封闭性、可再现性（只要程序执行环境和初始条件相同，重复执行时结果都将相同）。</p><p>程序的<strong>并发</strong>执行：间断性（每个程序都是“执行-停止-执行”）、失去封闭性（一个程序执行期间，另一个程序可以插入执行）、不可再现性。</p><h2 id="2-2-前趋图"><a href="#2-2-前趋图" class="headerlink" title="2.2 前趋图"></a>2.2 前趋图</h2><p>由多个结点构成的<strong>有向无循环图</strong>，用于描述程序中操作间的关系。</p><p>若两个结点Pi、Pj，仅当Pi操作完成后，才能执行Pj结点的操作，称Pi，Pj之间存在前趋关系。表示为：Pi -&gt;Pj。</p><p>集合表示：{(Pi,Pj)|仅当Pi完成，才能执行Pj }</p><p>程序Pi和Pj并发执行的<strong>Bernstein条件</strong>：</p><p>$ (R(Pi) ∩ W(Pj))∪ (R(Pj) ∩ W(Pi))∪(W(Pi) ∩W(Pj))&#x3D; { }$</p><p><strong>【注】</strong></p><p>R(Pi)&#x3D;{a1,…am}：进程Pi执行其间所需参考的所有变量的集合——<strong>读集</strong></p><p>W(Pi)&#x3D;{b1,…bn}：进程Pi执行其间所要改变的所有变量的集合——<strong>写集</strong></p><h2 id="2-3-进程的概念和特征"><a href="#2-3-进程的概念和特征" class="headerlink" title="2.3 进程的概念和特征"></a>2.3 进程的概念和特征</h2><p><strong>进程</strong>(Process)是一个具有一定独立功能的可并发执行的程序，在一个数据集合上的运行过程。进程的特征有：</p><ul><li>并发性：可并发执行</li><li>制约性：对资源争用而相互制约</li><li>结构特征：&#x3D;&#x3D;<strong>进程</strong>&#x3D;<strong>程序</strong>+<strong>数据</strong>+<strong>PCB</strong>&#x3D;&#x3D;（进程控制块）</li><li>动态性：有生命周期</li><li>独立性</li><li>异步性：进程按照各自不可预知的速度向前推进</li></ul><blockquote><p>进程和程序的区别：</p><ul><li>进程是程序的一次运行过程，是一个动态实体，而程序是一个指令的集合，是静态实体</li><li>进程具有生命周期，具有创建、执行和撤销的过程，而程序一旦创建，可以永远存在</li><li>进程实体由程序段、数据段及进程控制块组成</li><li>进程与程序之间不存在一一对应的关系，不同的进程可以对应相同的程序，一个进程中还可以同时调用多个程序</li><li>进程实体是一个能独立运行的基本单位，可独立获得资源和独立调度；而程序不能作为独立的单位参加运行</li><li><strong>进程可按异步方式运行</strong>；程序不是运行实体，故不能异步执行</li></ul></blockquote><h2 id="2-4-进程控制块PCB"><a href="#2-4-进程控制块PCB" class="headerlink" title="2.4 进程控制块PCB"></a>2.4 进程控制块PCB</h2><h3 id="2-4-1-主要内容"><a href="#2-4-1-主要内容" class="headerlink" title="2.4.1 主要内容"></a>2.4.1 主要内容</h3><ul><li><p><strong>进程标识信息</strong>：</p><p>（1）进程本身：外标识、内标识（<strong>PID</strong>）</p><p>（2）家族信息：父进程、子进程信息</p></li><li><p>处理机状态信息：<strong>中断现场保留区</strong>（PSW程序状态字）</p></li><li><p>进程调度信息：状态、<strong>优先级</strong>、入主存</p></li><li><p><strong>进程控制信息</strong>：</p><p>（1）程序、数据的外存&#x2F;内存地址</p><p>（2）进程同步和通信机制：<strong>消息队列、信号量</strong></p><p>（3）资源清单</p><p>（4）链接指针</p></li></ul><blockquote><p>注：</p><ul><li>PCB不包含页面大小信息</li><li>PCB在<strong>进程被创建</strong>时建立，在<strong>进程被撤销</strong>时删除</li><li>进程只能有唯一的进程控制块</li></ul></blockquote><h3 id="2-4-2-组织方式"><a href="#2-4-2-组织方式" class="headerlink" title="2.4.2 组织方式"></a>2.4.2 组织方式</h3><ul><li><p><strong>线性方式</strong>：系统中所有PCB都组织在一个线性表中，表的首地址存放在内存专用区</p></li><li><p><strong>链接方式</strong>：具有相同状态进程的<strong>PCB</strong>通过PCB中的链接字链接成一个<strong>队列</strong></p></li><li><p><strong>索引方式</strong>：系统根据进程状态的不同，建立索引表，根据索引值查找进程。</p></li></ul><h2 id="2-5-进程的状态"><a href="#2-5-进程的状态" class="headerlink" title="2.5 进程的状态"></a>2.5 进程的状态</h2><h3 id="2-5-1-进程的三个基本状态"><a href="#2-5-1-进程的三个基本状态" class="headerlink" title="2.5.1 进程的三个基本状态"></a>2.5.1 进程的三个基本状态</h3><ul><li><strong>运行状态</strong>（Running）：指令被执行</li><li><strong>就绪状态</strong>（Ready）：进程等待分配CPU</li><li><strong>阻塞状态</strong>（Blocked&#x2F;Waiting）：进程等待事件（I&#x2F;O事件）的发生</li></ul><h3 id="2-5-2-新建状态和终止状态"><a href="#2-5-2-新建状态和终止状态" class="headerlink" title="2.5.2 新建状态和终止状态"></a>2.5.2 新建状态和终止状态</h3><ul><li>新建状态（New）：刚被创建，尚未进入就绪队列时的状态</li><li>终止状态（Terminated）：进程正常&#x2F;异常结束，移出就绪队列，但尚未撤销时的状态</li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312133938521.png" alt="image-20220312133938521" style="zoom:80%;" /><blockquote><p>注意：</p><ul><li>这幅图中状态转换的前驱、后继，比如“等待-&gt;运行”、“就绪-&gt;等待”状态是不存在的，因为<strong>运行只认识就绪状态，等待只认识输入&#x2F;输出状态</strong>；</li><li>当进程从执行状态转换为就绪状态，则表示<strong>时间片用完</strong>。</li></ul></blockquote><h3 id="2-5-3-挂起-x2F-解挂状态"><a href="#2-5-3-挂起-x2F-解挂状态" class="headerlink" title="2.5.3 挂起&#x2F;解挂状态"></a>2.5.3 挂起&#x2F;解挂状态</h3><p><strong>设置进程挂起&#x2F;解挂状态的原因</strong>：</p><ul><li>用户需要：中间结果与预期不符；</li><li>操作系统需要：系统某些功能故障；</li><li>系统负荷过重</li><li>父进程请求：修改或协调子进程</li><li>对换的需要</li></ul><p><strong>设置挂起状态后进程状态的转换</strong>：</p><ul><li>设置挂起状态后，进程的就绪分为<strong>活动就绪</strong>（Readya）和<strong>静止就绪</strong>（Readys）</li><li>进程的阻塞状态分为<strong>活动阻塞</strong>（Blockeda）、<strong>静止阻塞</strong>（Blockeds）</li></ul><h2 id="2-6-进程控制"><a href="#2-6-进程控制" class="headerlink" title="2.6 进程控制"></a>2.6 进程控制</h2><h3 id="2-6-1-内核定义"><a href="#2-6-1-内核定义" class="headerlink" title="2.6.1 内核定义"></a>2.6.1 内核定义</h3><p>现代操作系统设计采用层次结构，往往将一些与硬件紧密相关的模块或运行频率较高的模块设置在第一层软件中，称为操作系统的<strong>内核</strong>。</p><h3 id="2-6-2-内核基本功能"><a href="#2-6-2-内核基本功能" class="headerlink" title="2.6.2 内核基本功能"></a>2.6.2 内核基本功能</h3><p><strong>支撑功能</strong>：中断处理、时钟管理、<strong>原语操作</strong></p><blockquote><p>原语是指在操作系统内核中，由若干条指令构成、用于完成一个特定功能的一个过程；</p><p>原语在一个操作中的所有动作<strong>不可分割</strong>。</p></blockquote><p><strong>管理功能</strong>：</p><ul><li>进程管理：调度、创建、同步等</li><li>存储器管理</li><li>设备管理</li></ul><h3 id="2-6-3-进程创建——进程图"><a href="#2-6-3-进程创建——进程图" class="headerlink" title="2.6.3 进程创建——进程图"></a>2.6.3 进程创建——进程图</h3><p><strong>定义</strong>：用于描述进程家族关系的有向树。</p><p><strong>与前趋图的区别</strong>：</p><ul><li>含义不同：有向树&#x2F;有向无环图；</li><li>执行时处理不同：进程图父子进程可同时执行，前趋图父子不可并发执行（即<strong>前趋图代表的是执行顺序，进程图代表的是父子关系</strong>）。</li></ul><p><strong>引发进程创建的事件</strong>：</p><ul><li>用户登录</li><li>作业调度</li><li>提供服务</li><li>应用请求</li></ul><p><strong>创建完成的工作</strong>：</p><ul><li>申请空白PCB</li><li><strong>初始化PCB</strong></li><li>为新进程分配资源</li><li>将新进程插入就绪队列</li></ul><h2 id="2-7-线程"><a href="#2-7-线程" class="headerlink" title="2.7 线程"></a>2.7 线程</h2><h3 id="2-7-1-概述"><a href="#2-7-1-概述" class="headerlink" title="2.7.1 概述"></a>2.7.1 概述</h3><ul><li><strong>定义</strong>：</li></ul><p>​ 线程是进程中的一个实体，是能被<strong>系统（处理机）</strong>独立调度和分派的基本单位。在同一进程中，线程的切换不会引起进程切换。线程共享进程的资源，自己不拥有。线程也称<strong>轻型进程</strong>（Light-Weight Process），进程也称重型进程（Heavy-Weight Process）。线程的概念是由<strong>微内核方法</strong>引入的。</p><ul><li><p><strong>组成</strong>：</p><ul><li>线程ID</li><li>寄存器集合</li><li>程序计数器</li><li>栈</li></ul></li><li><p><strong>类型</strong>：</p><ul><li><strong>内核支持线程KST</strong>：</li></ul><p>又叫内核线程，由内核管理，内核空间里为每个内核支持线程都设置了一个线程控制块（TCB），并通过TCB感知和控制线程。</p><ul><li><strong>用户级线程ULT</strong>：</li></ul><p>又叫用户线程，对该类线程的创建、切换由用户完成，不利用系统调用。<strong>系统未建立该线程的控制块，不知道其存在</strong>。</p></li></ul><h3 id="2-7-2-多线程的优点"><a href="#2-7-2-多线程的优点" class="headerlink" title="2.7.2 多线程的优点"></a>2.7.2 多线程的优点</h3><ul><li><p>系统开销小</p></li><li><p><strong>响应度高：只需要阻塞部分线程，提高了用户的响应</strong></p></li><li><p>资源共享：默认共享所属进程的内存和资源</p></li><li><p><strong>多处理器体系结构的利用</strong></p></li></ul><h1 id="ch3-进程调度"><a href="#ch3-进程调度" class="headerlink" title="ch3.进程调度"></a>ch3.进程调度</h1><h2 id="3-1-调度的类型"><a href="#3-1-调度的类型" class="headerlink" title="3.1 调度的类型"></a>3.1 调度的类型</h2><ul><li><strong>高级调度</strong>：按照一定的算法从后备作业队列中选择满足条件的作业，分配一定资源，<strong>创建PCB</strong>，入主存<strong>就绪队列</strong>；</li><li><strong>低级调度</strong>(进程调度)：按照一定的算法从就绪队列中选择满足条件的<strong>进程</strong>，<strong>分配CPU运行</strong>。分<strong>抢占&#x2F;非抢占</strong>两种形式。低级调度算法简单，目的是不浪费使用CPU资源的时间；</li><li><strong>中级调度</strong>：将在主存中长期得不到执行的进程，按照一定的算法<strong>入盘交换区</strong>（先由内存调至外存），满足执行条件后再入主存。</li></ul><h2 id="3-2-调度方法选择准则"><a href="#3-2-调度方法选择准则" class="headerlink" title="3.2 调度方法选择准则"></a>3.2 调度方法选择准则</h2><h3 id="3-2-1-面向用户（4准则）"><a href="#3-2-1-面向用户（4准则）" class="headerlink" title="3.2.1 面向用户（4准则）"></a>3.2.1 面向用户（4准则）</h3><ul><li>&#x3D;&#x3D;<strong>响应时间</strong>&#x3D;&#x3D;<ul><li>请求传到CPU延时</li><li>CPU执行时间</li><li>结果回传延时</li></ul></li><li>&#x3D;&#x3D;<strong>周转时间</strong>&#x3D;&#x3D;<ul><li><strong>作业从提交到完成所经过的时间</strong>，包括后备队列延时、就绪队列延时、CPU执行时间、等待I&#x2F;O时间。</li></ul></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312165129354.png" alt="image-20220312165129354"  /><ul><li>&#x3D;&#x3D;<strong>截止时间保证</strong>&#x3D;&#x3D;：开始&#x2F;完成截止时间</li><li>&#x3D;&#x3D;<strong>优先权准则</strong>&#x3D;&#x3D;</li></ul><h3 id="3-2-2-面向系统（3准则）"><a href="#3-2-2-面向系统（3准则）" class="headerlink" title="3.2.2 面向系统（3准则）"></a>3.2.2 面向系统（3准则）</h3><ul><li>&#x3D;&#x3D;<strong>系统吞吐量</strong>&#x3D;&#x3D;：单位时间内系统所能处理的任务数越多越好</li><li>&#x3D;&#x3D;<strong>CPU利用率</strong>&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>各类资源的平均利用</strong>&#x3D;&#x3D;</li></ul><h2 id="3-3-调度算法"><a href="#3-3-调度算法" class="headerlink" title="3.3 调度算法"></a>3.3 调度算法</h2><p>ProcessBurst Time<br>    P124<br>    P2 3<br>    P3 3<br>假定进程都是在第0秒到达，顺序如下: P1 , P2 , P3。试计算采用各种算法的平均周转时间和平均等待时间。</p><blockquote><p>进程调度算法中，若算法选择不当，会出现<strong>进程长期等待</strong>的问题。</p></blockquote><h3 id="3-3-1-先来先服务FCFS"><a href="#3-3-1-先来先服务FCFS" class="headerlink" title="3.3.1 先来先服务FCFS"></a>3.3.1 先来先服务FCFS</h3><p>First Come First Serve，思想是选择最先进入后备&#x2F;就绪队列的作业&#x2F;进程，入主存&#x2F;分配CPU。</p><ul><li>优点：简单、易于实现；公平；</li><li>缺点：平均等待时间长；<strong>短作业不利</strong>（使用CPU时间少，等待时间长）；紧迫型作业不利。</li></ul><p>对于题干，</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312170834878.png" alt="image-20220312170834878"></p><p>(1) 平均周转时间： ((24-0)+(27-0)+(30-0))&#x2F;3&#x3D;81&#x2F;3&#x3D;27</p><p>(2) 平均等待时间：((24-0-24))+(27-0-3)+(30-0-3))&#x2F;3&#x3D;51&#x2F;3&#x3D;17</p><h3 id="3-3-2-短作业优先SJF"><a href="#3-3-2-短作业优先SJF" class="headerlink" title="3.3.2 短作业优先SJF"></a>3.3.2 短作业优先SJF</h3><p>Shortest Job First，思想是选择后备&#x2F;就绪队列中执行时间最短的作业&#x2F;进程，入主存&#x2F;分配CPU。</p><p>优点：平均等待时间最小；<strong>系统吞吐量增加</strong>（各调度策略中的吞吐量最高）；</p><p>缺点：长作业不利（<strong>长作业饿死现象</strong>）；需要知道每个作业所需的执行时间。</p><p>对于题干，</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312170754178.png" alt="image-20220312170754178"></p><p>(1) 平均周转时间： ((30-0)+(3-0)+(6-0))&#x2F;3&#x3D;39&#x2F;3&#x3D;13</p><p>(2) 平均等待时间：((30-0-24))+(3-0-3)+(6-0-3))&#x2F;3&#x3D;9&#x2F;3&#x3D;3</p><h3 id="3-3-3-时间片轮转RR"><a href="#3-3-3-时间片轮转RR" class="headerlink" title="3.3.3 时间片轮转RR"></a>3.3.3 时间片轮转RR</h3><p>思想是设置使用CPU时间长度（<strong>时间片</strong>time slice），就绪队列中的进程依次轮流分配一个时间片的CPU。分时系统中的进程调度算法通常采用时间片轮转法。</p><p>优点：平均响应时间短；</p><p>缺点：性能依赖时间片的大小。</p><blockquote><p>当时间片用完而暂停运行时，进程状态应从<strong>运行态</strong>变为<strong>就绪态</strong>（而非进入等待队列&#x2F;阻塞状态）。</p></blockquote><p>对于题干，</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312171759190.png" alt="image-20220312171759190"></p><p>(1) 平均周转时间：((30-0)+(7-0)+(10-0))&#x2F;3&#x3D;47&#x2F;3 ≈ 15.7</p><p>(2) 平均等待时间：((30-0-24))+(7-0-3)+(10-0-3))&#x2F;3&#x3D;17&#x2F;3 ≈ 5.7</p><h3 id="3-3-4-优先权调度Priority"><a href="#3-3-4-优先权调度Priority" class="headerlink" title="3.3.4 优先权调度Priority"></a>3.3.4 优先权调度Priority</h3><p>思想：选择优先权最高的后备&#x2F;就绪队列的作业&#x2F;进程，入主存&#x2F;分配CPU。</p><p>类型：<strong>抢占式、非抢占式</strong>；</p><p>优先权类型：静态优先权、动态优先权。</p><blockquote><p>抢占式静态优先权算法可能引起进程长时间得不到运行。</p></blockquote><p><strong>优点</strong>：能处理<strong>实时事件</strong>（提高对紧迫型任务的响应度）。</p><p>进程     到达时间     运行时间      优先权<br> P1            0                24               4<br> P2            2                  3                2<br> P3             3                 3                3<br> P4             4                 7                1</p><p>试计算采用抢占式优先权算法的平均周转时间和平均等待时间。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312172153063.png" alt="image-20220312172153063"></p><p>(1) 平均周转时间：((37-0)+(12-2)+(15-3)+(11-4))&#x2F;4&#x3D;66&#x2F;4&#x3D;16.5</p><p>(2) 平均等待时间：((37-0-24))+(12-2-3)+(15-3-3)+(11-4-7))&#x2F;4&#x3D;29&#x2F;4&#x3D;7.25</p><h3 id="3-3-5-高响应比优先HRRN"><a href="#3-3-5-高响应比优先HRRN" class="headerlink" title="3.3.5 高响应比优先HRRN"></a>3.3.5 高响应比优先HRRN</h3><p>Highest Response Ratio Next，思想：选择响应比最高的后备&#x2F;就绪队列的作业&#x2F;进程，入主存&#x2F;分配CPU。</p><p><strong>响应比Rp&#x3D;1+(等待时间&#x2F;要求运行时间)</strong> &gt;1</p><p>在该算法中，<strong>优先级动态变化</strong>，开始是短作业进入进程，随着时间的推移，长作业等待时间逐渐增加，响应比变大，转而长作业的优先级变高。</p><h3 id="3-3-6-多级队列调度"><a href="#3-3-6-多级队列调度" class="headerlink" title="3.3.6 多级队列调度"></a>3.3.6 多级队列调度</h3><p>Multilevel Queue</p><p>思想：系统设置多个就绪队列，<strong>分配不同优先权</strong>（节省选的时间），先调度优先权高的进程，只有高优先权队列为空时才调度低一级优先权队列中的进程。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312172909503.png" alt="image-20220312172909503"></p><h3 id="3-3-7-多级反馈队列"><a href="#3-3-7-多级反馈队列" class="headerlink" title="3.3.7 多级反馈队列"></a>3.3.7 多级反馈队列</h3><p>Multilevel Feedback Queue</p><p>思想：</p><p>设置多个就绪队列，每队分配不同的优先权；</p><p>各队规定一时间片，并各队列随着优先权的降低时间片逐渐增大；</p><p>新入就绪队列的进程先入高优先权队列，按FIFO执行规定时间片，未完成，入下一级队尾；</p><p>高优先权队列为空，执行次一级队列进程…;</p><p>若有新入就绪队列的进程，中止低优先权队列进程执行。被中止进程入本队队尾；</p><p>最后一级队列采用时间片轮转；</p><p>响应比Rp：Rp&#x3D;1+(等待时间&#x2F;要求运行时间)。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312173329604.png" alt="image-20220312173329604" style="zoom:80%;" /><blockquote><p>[例]下列每对调度准则在何种情况下会发生冲突：</p><ul><li>CPU利用率和响应时间：若上下文切换所产生的系统开销减小，CPU利用率就会增加，但上下文切换执行次数减小会导致进程平均效应时间减小。</li><li>平均响应时间和最大等待时间：可以通过<strong>短作业优先</strong>来<strong>减小平均周转时间</strong>，但会导致长作业长时间处于等待状态，从而增加他们的等待时间。</li></ul></blockquote><h2 id="3-4-实时系统调度"><a href="#3-4-实时系统调度" class="headerlink" title="3.4 实时系统调度"></a>3.4 实时系统调度</h2><p>调度要求：</p><ul><li>提供必要的调度信息<ul><li>任务就绪时间</li><li>开始&#x2F;完成截止时间</li><li>处理所需时间</li><li>资源要求</li><li>优先级</li></ul></li><li>调度方式：<strong>抢占式</strong></li><li>有较强的中断处理机构</li><li>具有<strong>快速任务分配机制</strong>，任务切换开销小</li></ul><blockquote><p>注：</p><p>当若干任务是可调度时，可得出结论：$\left. {\sum\limits_{i &#x3D; 1}^{n}\frac{R_{i}}{T_{i}}} \leq 1\rightarrow n\left( 2^{\frac{1}{n}} - 1 \right) \right.$（$R_{i}$为运行时间，$T_{i}$为周期）。</p></blockquote><h2 id="3-5-多核系统调度"><a href="#3-5-多核系统调度" class="headerlink" title="3.5 多核系统调度"></a>3.5 多核系统调度</h2><p>进程调度与系统结构相关：</p><ul><li>同构型系统（系统处理能力一致）：静态分配、动态分配、自调度</li><li>异构型系统：主从式</li></ul><p>常见调度方式：</p><ul><li>自调度Self Scheduling</li><li>成组调度Gang Scheduling：同种作业分配仅在一组执行（针对保存现场的问题），减少调度频率。</li><li>专用处理机分配</li></ul><blockquote><p>注：</p><p>进程调度中“可抢占”和“非抢占”两种方式，可抢占式系统的开销更大。</p><p>[解释]可抢占式调度是严格保证任何时刻，让<strong>具有最高优先权的进程</strong>占有处理机运行，因此增加了处理机调度的时机，<strong>引起为退出处理机的进程保留现场，为占有处理机的进程恢复现场</strong>等时间(和空间)开销增大。</p></blockquote><h1 id="ch4-进程同步和通信"><a href="#ch4-进程同步和通信" class="headerlink" title="ch4.进程同步和通信"></a>ch4.进程同步和通信</h1><h2 id="4-1-进程同步的概念"><a href="#4-1-进程同步的概念" class="headerlink" title="4.1 进程同步的概念"></a>4.1 进程同步的概念</h2><p><strong>进程间的关系</strong>：</p><ul><li>间接制约：互斥关系（进程共享资源）</li><li>直接制约：同步关系（进程之间存在联系——接力赛）</li></ul><p><strong>进程同步</strong>：</p><p>两个进程所表示事件的发生有着某种<strong>时序</strong>上的关系。</p><p><strong>临界资源</strong>（Critical Resource）：</p><p>一次仅允许一个进程使用的资源，如慢速设备、共享变量、数据结构、缓冲区等。</p><p>多道系统中，为保证进程并发执行且结果确定，必须互斥使用临界资源。</p><p><strong>临界区</strong>：</p><ul><li>定义：<strong>进程中访问临界资源的代码段</strong>。</li><li>使用原则：<strong>互斥使用</strong>，先申请、判断。</li><li><strong>临界资源的循环进程结构</strong>：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    entry section<span class="token punctuation">;</span>            <span class="token comment">//进入区，作判断</span>    critical section<span class="token punctuation">;</span>         <span class="token comment">//临界区</span>    exit section<span class="token punctuation">;</span>             <span class="token comment">//退出区</span>    remainder section<span class="token punctuation">;</span>        <span class="token comment">//剩余区</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-进程同步机制应遵循的原则"><a href="#4-2-进程同步机制应遵循的原则" class="headerlink" title="4.2 进程同步机制应遵循的原则"></a>4.2 进程同步机制应遵循的原则</h2><ul><li><strong>空闲让进</strong></li><li><strong>忙则等待</strong></li><li><strong>有限等待</strong>：任何进入临界区的进程将会等待有限时间</li><li><strong>让权等待</strong>：放弃CPU时间，即：当进程不能进入自己的临界区时,应立即释放处理机,以免进程陷入“<strong>忙等</strong>”状态。</li></ul><blockquote><p>忙等，即进程在循环等待中，同时还在不断竞争处理器(如while循环)；忙等是可以消除的，可以通过阻塞等待的进程，然后在合适的时候唤醒该进程。</p></blockquote><h2 id="4-3-解决进程互斥问题"><a href="#4-3-解决进程互斥问题" class="headerlink" title="4.3 解决进程互斥问题"></a>4.3 解决进程互斥问题</h2><h3 id="4-3-1-软件方法"><a href="#4-3-1-软件方法" class="headerlink" title="4.3.1 软件方法"></a>4.3.1 软件方法</h3><p>（1）&#x3D;&#x3D;<strong>设置标志位flag[i],flag[j]</strong>&#x3D;&#x3D;</p><p>标志$P_{i}$和$P_{j}$进程是否在临界区，初值为false。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Pi<span class="token operator">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>no operation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">;</span>                <span class="token comment">//进入区</span>      critical section<span class="token punctuation">;</span>              <span class="token comment">//临界区</span>      flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token punctuation">;</span>               <span class="token comment">//退出区</span>      remainder section<span class="token punctuation">;</span>             <span class="token comment">//剩余区</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）&#x3D;&#x3D;<strong>设置整型变量turn</strong>&#x3D;&#x3D;</p><p>标志turn表示哪个进程可进入临界区，flag[i]和flag[j]表示哪个进程要进入，初值为true。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Pi<span class="token operator">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>turn<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>no op<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//进入区</span>      critical section<span class="token punctuation">;</span>          <span class="token comment">//临界区</span>      turn<span class="token operator">=</span>j<span class="token punctuation">;</span>                        <span class="token comment">//退出区（“谦让动作”）</span>      remainder section<span class="token punctuation">;</span>             <span class="token comment">//剩余区</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点：当Pj进程还没进去，而Pi进程又想进入却发现无法进入，违背“<strong>空闲让进</strong>”的规则。</li></ul><p>（3）&#x3D;&#x3D;<strong>Peterson算法</strong>&#x3D;&#x3D;</p><p>设置turn表示哪个进程可进入临界区，flag[i]和flag[j]表示哪个进程要进入，初值为true。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Pi<span class="token operator">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token comment">//表示我（i）想使用该资源（表达意愿）</span>     turn<span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment">//愿意优先让j使用（表示谦让）</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> turn<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>no op<span class="token punctuation">&#125;</span>  <span class="token comment">//如果j想用而且是自己（i）最后表达的谦让，则等待，否则i先执行</span>     critical section<span class="token punctuation">;</span>         <span class="token comment">//临界区</span>     flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>                 <span class="token comment">//退出区</span>     remainder section<span class="token punctuation">;</span>             <span class="token comment">//剩余区</span>   <span class="token punctuation">&#125;</span>Pj<span class="token operator">:</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>     turn<span class="token operator">=</span>i<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> turn<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>no op<span class="token punctuation">&#125;</span>        critical section<span class="token punctuation">;</span>           <span class="token comment">//临界区</span>     flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>                <span class="token comment">//退出区</span>     remainder section<span class="token punctuation">;</span>           <span class="token comment">//剩余区</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点：仍未遵循<strong>让权等待</strong>的原则（一直while循环消耗资源）。</li></ul><h3 id="4-3-2-硬件方法"><a href="#4-3-2-硬件方法" class="headerlink" title="4.3.2 硬件方法"></a>4.3.2 硬件方法</h3><p>特点：指令操作只需一个<strong>指令周期</strong>就能完成（<strong>原子性</strong>的操作）</p><h4 id="4-3-2-1-检测和设置指令TS"><a href="#4-3-2-1-检测和设置指令TS" class="headerlink" title="4.3.2.1 检测和设置指令TS"></a>4.3.2.1 检测和设置指令TS</h4><p>TS又称<strong>Test-and-Set</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">boolean <span class="token function">TS</span> <span class="token punctuation">(</span>boolean <span class="token operator">*</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    boolean rv <span class="token operator">=</span> <span class="token operator">*</span>target<span class="token punctuation">;</span><span class="token comment">//存放lock原来的值</span>    <span class="token operator">*</span>target <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">//无论之前是否被加锁，都将lock设为true</span>    <span class="token keyword">return</span> rv<span class="token operator">:</span>       <span class="token comment">//返回lock原来的值，若lock原来未加锁即可进入临界区，否则等待</span> <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">TS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>no op<span class="token punctuation">&#125;</span><span class="token comment">//do nothing</span>    critical section<span class="token punctuation">;</span><span class="token comment">//临界区</span>    lock <span class="token operator">=</span> FALSE<span class="token punctuation">;</span><span class="token comment">//退出区，将lock解锁，使别的进程可以进行访问</span>    remainder section<span class="token punctuation">;</span><span class="token comment">//剩余区</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例]利用TS指令实现多处理器环境中的wait()和signal()信号量操作。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> semaphore value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>guard<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>semaphore value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//automatically add process to a queue of processes waiting for the semaphore and set guard to -</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        semaphore value<span class="token operator">--</span><span class="token punctuation">;</span>        guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>guard<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>semaphore value <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> there is a process on the wait queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//wake up the first process in the queue of waiting processes</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        semaphore value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-2-Swap指令"><a href="#4-3-2-2-Swap指令" class="headerlink" title="4.3.2.2 Swap指令"></a>4.3.2.2 Swap指令</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Swap</span> <span class="token punctuation">(</span>boolean <span class="token operator">*</span>a<span class="token punctuation">,</span> boolean <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    boolean temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     key <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> TRUE<span class="token punctuation">)</span>  <span class="token comment">//直到lock被设为false，则执行lock交换指令后会使得key为false，使得程序可以进入临界区</span>       <span class="token function">Swap</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment">//critical section;</span>     lock <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">//remainder section;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-信号量机制"><a href="#4-4-信号量机制" class="headerlink" title="4.4 信号量机制"></a>4.4 信号量机制</h2><h3 id="4-4-1-信号量机制的一些概念"><a href="#4-4-1-信号量机制的一些概念" class="headerlink" title="4.4.1 信号量机制的一些概念"></a>4.4.1 信号量机制的一些概念</h3><p><strong>信号量</strong>：信号量是一个变量（整数、记录型变量等），可以用一个信号量来表示<strong>系统中某种资源的数量</strong>。比如系统中只有一台打印机，就可以设置一个初值为1的信号量。</p><p><strong>同步原语</strong>：P()&#x2F;wait()操作、V()&#x2F;signal()操作。</p><blockquote><p>注：</p><ul><li>信号量每执行一次P操作，意味着要求<strong>分配一个资源</strong></li><li>用V操作唤醒一个等待进程时，被唤醒的进程的状态应变为<strong>就绪状态</strong></li></ul></blockquote><h3 id="4-4-2-整型信号量机制"><a href="#4-4-2-整型信号量机制" class="headerlink" title="4.4.2 整型信号量机制"></a>4.4.2 整型信号量机制</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore  s<span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">:</span>   <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>no op<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>               s<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token function">signal</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token punctuation">&#123;</span>  s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整型信号量的<strong>分类</strong>：</p><p>&#x3D;&#x3D;<strong>二元信号量</strong>&#x3D;&#x3D;：<strong>实现互斥</strong>。s的取值为1和0，初值为1；（mutex：互斥元，如对同一个缓冲区进行操作应采用<strong>互斥元</strong>进行操作）</p><p>&#x3D;&#x3D;<strong>一般信号量</strong>&#x3D;&#x3D;：<strong>描述前趋关系</strong>。用于一般同步，初值为<strong>共享资源初始数量</strong>。</p><p>在实际解决进程同步问题时，可通过<strong>前趋图</strong>表示出各个进程的前趋关系，然后将各个操作封装，封装后的程序可以<strong>并发执行</strong>。如下例：</p><p>描述(a+b)*(c-d)-e&#x2F;f：</p><p>p1:a+b, p2:c-d, p3:e&#x2F;f, p4:p1*p2, p5:p4-p3。画出前趋图：</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/_M5Y5S%7D%7BZ%7DR%5D%60SV6RD$96Q.jpg" alt="img" style="zoom: 33%;" /><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore S1<span class="token punctuation">,</span>S2<span class="token punctuation">,</span>S3<span class="token punctuation">,</span>S4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token punctuation">&#123;</span>P1<span class="token punctuation">;</span><span class="token function">V</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//V表示释放信号</span>    <span class="token punctuation">&#123;</span>P2<span class="token punctuation">;</span><span class="token function">V</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>P3<span class="token punctuation">;</span><span class="token function">V</span><span class="token punctuation">(</span>S4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token function">P</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">P</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">;</span>P4<span class="token punctuation">;</span><span class="token function">V</span><span class="token punctuation">(</span>S3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//P(S1),P(S2)为wait信号</span> <span class="token punctuation">&#123;</span><span class="token function">P</span><span class="token punctuation">(</span>S3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">P</span><span class="token punctuation">(</span>S4<span class="token punctuation">)</span><span class="token punctuation">;</span>P5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[注]–应画在”{“上，<strong>表示并发</strong>。</p><h3 id="4-4-3-记录型信号量机制"><a href="#4-4-3-记录型信号量机制" class="headerlink" title="4.4.3 记录型信号量机制"></a>4.4.3 记录型信号量机制</h3><p>引入目的：克服整型信号量机制存在的“<strong>忙等</strong>”（Busy waiting）现象，提高资源利用率。引入结构体semaphore：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> value<span class="token punctuation">;</span>   <span class="token keyword">struct</span> <span class="token class-name">process</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>   <span class="token comment">//list是进程列表</span><span class="token punctuation">&#125;</span>semaphore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">P</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">insert</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span>s<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">block</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 若s.value&lt;0，表示系统已无该类资源，申请者阻塞，其中|s.value|表示该信号量上阻塞的进程数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">V</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      s<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>list<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wakeup</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若s.value&lt;&#x3D;0，表示尚有进程因等待S代表的资源而处于阻塞状态，所以应唤醒其中之一。</p><h3 id="4-3-4-AND信号量集机制"><a href="#4-3-4-AND信号量集机制" class="headerlink" title="4.3.4 AND信号量集机制"></a>4.3.4 AND信号量集机制</h3><p>称为<strong>同时wait操作</strong>，即<strong>swait</strong>（simultaneous wait），目的是避免<strong>死锁</strong>。在这里，要么把进程在整个运行过程中所请求的资源全部分配到进程（进程使用完成后一起释放），要么一个也不分配。</p><p>死锁原因：</p><p>有两个进程A、B。两个临界资源D、E，互斥信号量(初值为1)分别是Dmutex、Emutex。</p><p>按下面执行次序，A获得了D等待E，B获得了E等待D，就处于了僵持状态，无外界干预，A、B就陷入了死锁状态。共享资源越多，进程死锁可能越大。</p><p>process A: wait(Dmutex)； 于是 Dmutex&#x3D;0 </p><p>process B: wait(Emutex)； 于是 Emutex&#x3D;0 </p><p>process A: wait(Emutex)； 于是 Emutex&#x3D;-1 A 阻塞</p><p>process B: wait(Dmutex)； 于是 Dmutex&#x3D;-1 B 阻塞</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">swait</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> …… <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//访问到资源，全部减1，然后退出，否则等待</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">ssignal</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//唤醒等待s[i]的进程;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-5-一般信号量集机制"><a href="#4-3-5-一般信号量集机制" class="headerlink" title="4.3.5 一般信号量集机制"></a>4.3.5 一般信号量集机制</h3><p>一次可给进程分配多种临界资源，且同类临界资源一次可分配多个。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">swait</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>=</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> …… <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">>=</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>         <span class="token function">insert</span> <span class="token punctuation">(</span>caller<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入到不满足的队列中</span><span class="token punctuation">&#125;</span><span class="token function">ssignal</span><span class="token punctuation">(</span>semaphore s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//唤醒等待s[i]的进程;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特殊情况：</p><ul><li><p>swait(s,d,d): 不设下限，此时在信号量集中只有一个信号量S，但允许它每次申请d个资源，当现有资源少于d时，不予分配；</p></li><li><p>swait(s,1,1)：就是wait(s)；</p></li><li><p>swait(s,1,0): 可控开关（当S≥1时,允许多个进程进入临界区；当S&#x3D;0时禁止任何进程进入临界区）。</p></li></ul><p>[例]设有一个售票厅，可容纳100人购票。如果厅内不足100人则允许进入，进入后购票，购票后退出。如果厅内已有100人，则在厅外等候。试问：</p><p>（1）购票者之间是同步还是互斥；</p><p>（2）用P、V操作表达购票者的工作流程。</p><p>[解]<code>(1)</code>互斥；</p><p><code>(2)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore empty<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    <span class="token function">P</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">P</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进入购票区购票，购票后退出</span><span class="token function">V</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">V</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-经典进程同步问题"><a href="#4-5-经典进程同步问题" class="headerlink" title="4.5 经典进程同步问题"></a>4.5 经典进程同步问题</h2><h3 id="4-5-1-生产者-消费者问题"><a href="#4-5-1-生产者-消费者问题" class="headerlink" title="4.5.1 生产者-消费者问题"></a>4.5.1 生产者-消费者问题</h3><p>特点：一类临界资源，多个，每个临界资源必须互斥使用；</p><p>典型示例：有限缓冲区的使用。</p><p><strong>【问题描述】</strong></p><p>若干生产者、消费者，共享N个缓冲区；</p><p>生产者：每次产生一个数据，放入到一个空缓冲区。若无空缓冲区，则阻塞。</p><p>消费者：每次从有数据的缓冲区取一个数据，进行使用；若无满缓冲区，则阻塞。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312234739770.png" alt="image-20220312234739770"></p><p><strong>【分析】</strong></p><p>&#x3D;&#x3D;<strong>同步</strong>&#x3D;&#x3D;：若所有缓冲区皆空，消费者阻塞等待生产者生产；若所有缓冲区皆满，生产者阻塞等待消费者消费。设置一般信号量：</p><p>empty表示现有空缓冲区数，初值为M;</p><p>full表示现有满缓冲区数，初值为0。</p><p>&#x3D;&#x3D;<strong>互斥</strong>&#x3D;&#x3D;：生产者、消费者<strong>对同一个缓冲区的操作必须互斥</strong>。设置互斥信号量mutex， 初值：</p><p>生产者行为：产生数据，将数据存入到缓冲区；</p><p>消费者行为：从缓冲区取出数据，消费数据；</p><p><strong>定义变量</strong>：buffer[n]、in和out指针。</p><p>【注】由于<strong>循环队列</strong>的特性，实际上会牺牲一个存储单元（必有1个单元为空），队列已满的条件为队尾指针的下一个位置是队头，即<code>(Q.rear + 1) % MaxSize == Q.front</code>。</p><p>伪代码实现方案如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore mutex <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>empty<span class="token operator">=</span>n<span class="token punctuation">,</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token operator">=</span>out<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>Producer<span class="token operator">:</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           produce an item in nextp<span class="token punctuation">;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>           buffer<span class="token punctuation">[</span>in<span class="token punctuation">]</span><span class="token operator">=</span>nextp<span class="token punctuation">;</span>           in<span class="token operator">=</span><span class="token punctuation">(</span>in<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod n<span class="token punctuation">;</span>           <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">signal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>Consumer<span class="token operator">:</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>           nextc<span class="token operator">=</span>buffer<span class="token punctuation">[</span>out<span class="token punctuation">]</span><span class="token punctuation">;</span>           out<span class="token operator">=</span><span class="token punctuation">(</span>out<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod n<span class="token punctuation">;</span>           <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">signal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>           consume the item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【例】假设有3个并发进程P，Q，R，其中P负责从输入设备上读入信息，并传送给Q，Q将信息加工后传送给R，R负责打印输出。进程P，Q共享一个有m 个缓冲区组成的缓冲池；进程Q，R共享一个有n个缓冲区组成的缓冲池（假设缓冲池足够大，进程间每次传输信息的单位均小于等于缓冲区长度），请写出满足上述条件的并发程序。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220312234302310.png" alt="image-20220312234302310"></p><p>【分析】设置六个信号量empty1、full1、mutex1、empty2、full2、mutex2，</p><p>empty1表示P、Q共享的缓冲池中空缓冲区数，初值为m；</p><p>full1表示P、Q共享的缓冲池中中满缓冲区数，初值为0；</p><p>mutex1表示P、Q对同一缓冲区操作的互斥信号量，初值为1；</p><p>empty2表示Q、R共享的缓冲池中空缓冲区数，初值为n；</p><p>full2表示Q、R共享的缓冲池中中满缓冲区数，初值为0；</p><p>mutex2表示Q、R对同一缓冲区操作的互斥信号量，初值为1；</p><p>同步描述为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">empty1<span class="token punctuation">,</span>empty2<span class="token punctuation">,</span>full1<span class="token punctuation">,</span>full2<span class="token punctuation">,</span>mutex1<span class="token punctuation">,</span>mutex2<span class="token operator">:</span>semaphore<span class="token operator">=</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>；P<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        read a message<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>empty1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        store to buffer1<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>full1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Q<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>full1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        get from buffer1<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>empty1<span class="token punctuation">)</span><span class="token punctuation">;</span>        work with massage<span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>empty2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>        store to buffer2<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>full2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>R<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>full2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Get from buffer2<span class="token punctuation">;</span>        print<span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>empty2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-2-读者-写者问题"><a href="#4-5-2-读者-写者问题" class="headerlink" title="4.5.2 读者-写者问题"></a>4.5.2 读者-写者问题</h3><p><strong>【问题描述】</strong></p><p>若干读者、写者，共享文件&#x2F;数据；</p><p>读者：<strong>可以同时读数据，不可修改数据</strong>。</p><p>写者：修改数据，不能同时修改同一份数据，进行修改时读者不能读。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220316165739973.png" alt="image-20220316165739973"></p><p><strong>【分析】</strong></p><p>采用<strong>记录型信号量</strong></p><p>互斥：为保证写者进程与其它进程互斥访问共享对象，设置互斥信号量wmutex，初值：</p><p>互斥：由于允许有多个读者，为了解目前的读者数量，设置一读者计数变量readcount。<strong>多个读者都对readcount进行操作</strong>，须设置对其操作的互斥信号量rmutex。</p><p>**[注]**每当一个读者开始读文件时，必须修改readcount变量。因此需要一个互斥对象rmutex来实现对全局变量readcount修改时的互斥。</p><p>读者行为：读之前readcount加1，读数据，读完，readcount减1；</p><p>写者行为：修改数据。</p><p>&#x3D;&#x3D;<strong>【读者优先方案】</strong>&#x3D;&#x3D;</p><p>要等所有读进程执行完后，使得信号量wmutex为1时，才能访问临界资源。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore rmutex <span class="token operator">=</span> wmutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> readcount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>     reader<span class="token operator">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>readcount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             readcount<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             reading<span class="token punctuation">;</span>          <span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>              readcount<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>readcount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>   writer<span class="token operator">:</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             writting<span class="token punctuation">;</span>             <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>  <span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;<strong>【写者优先方案】</strong>&#x3D;&#x3D;</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore rmutex <span class="token operator">=</span> wmutex<span class="token operator">=</span>wwmutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> readcount<span class="token operator">=</span>writecount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>    reader<span class="token operator">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>writercount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">do</span> nothing<span class="token punctuation">&#125;</span>           <span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>readcount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             readcount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             reading<span class="token punctuation">;</span>          <span class="token function">wait</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>              readcount<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>readcount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">signal</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>writer<span class="token operator">:</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">wait</span><span class="token punctuation">(</span>wwmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             writercount<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token function">signal</span><span class="token punctuation">(</span>wwmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">wait</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             writting<span class="token punctuation">;</span>             <span class="token function">wait</span><span class="token punctuation">(</span>wwmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             writercount<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token function">signal</span><span class="token punctuation">(</span>wwmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">signal</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>  <span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-3-哲学家进餐问题"><a href="#4-5-3-哲学家进餐问题" class="headerlink" title="4.5.3 哲学家进餐问题"></a>4.5.3 哲学家进餐问题</h3><p><strong>【问题描述】</strong></p><p>五个哲学家同座一张圆桌，每人一个碗，左右各一只筷子；</p><p>哲学家的行为：思考-吃饭-思考……。</p><p>前提：只有拿到左右两只筷子才开始吃饭。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">0</span>……<span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>    Pi<span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           eating<span class="token punctuation">;</span>         <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           think<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防止死锁的解决方案：</p><ul><li><p>最多允许4个哲学家同时坐在桌子周围；</p></li><li><p>仅当一个哲学家左右两边的筷子都可用时，才允许他拿筷子；（提高资源利用率）</p></li><li><p>给所有哲学家编号，奇数号的哲学家必须首先拿左边的筷子，偶数号的哲学家则反之；</p></li><li><p>把哲学家分为三种状态，思考，<strong>饥饿</strong>（加一状态），进食，并且一次拿到两只筷子，否则不拿。</p></li></ul><h2 id="4-6-管程机制"><a href="#4-6-管程机制" class="headerlink" title="4.6 管程机制"></a>4.6 管程机制</h2><ul><li><p>信号量机制的不足：</p><ul><li>critical section、entry section和exit section都<strong>由用户编写</strong>；</li><li>信号量原语分散在各程序代码中由进程执行，系统无法有效控制、管理；</li><li>wait和signal操作的错误使用，编译程序和操作系统都无法发现、纠正，可导致死锁。</li></ul></li><li><p>1971年，Dijkstra引入管程机制，即“秘书”进程：</p><ul><li>临界资源的同步操作集中；</li><li>访问需先报告“秘书”；</li><li>“秘书”实现进程同步，从而保证互斥使用；</li><li>管程有<strong>生命周期</strong>（与操作系统相同）。</li></ul></li><li><p><strong>管程组成</strong>：</p><ul><li>局部于管程的<strong>共享变量说明</strong> （数据结构）；</li><li>对该数据结构进行操作的<strong>一组过程</strong>；</li><li>局部于管程数据的<strong>初始化语句</strong>。</li></ul></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> monitor <span class="token punctuation">&#123;</span>    variable declarations<span class="token punctuation">;</span>    condition x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">P1</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">P2</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">Pn</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//initialization code</span><span class="token punctuation">&#125;</span> monitor<span class="token operator">-</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>条件变量</strong>：<ul><li>用条件变量类型condition来定义条件变量，在管程中声明条件变量；</li><li><strong>每个条件变量对应一个等待队列</strong>，进程通过管程请求临界资源未满足时，管程将其入等待队列；</li><li>当进程通过管程请求临界资源未满足时，调用同步原语wait()将其放入等待队列；</li><li>当进程可以访问临界资源时，管程调用同步原语signal()唤醒等待进程。</li></ul></li></ul><p><strong>【例1】</strong>利用管程解决生产者-消费者问题。</p><p>共享变量：缓冲区buffer[n]，指针in、out；对产生的数据进行计数count；</p><p>条件变量：</p><p>若没有空缓冲区，需要阻塞生产者进程 ——notfull（不满条件）</p><p>若全部都是空缓冲区，则需要阻塞消费者进程——notempty（不空条件）</p><p>局限于管程内的操作：</p><p>put(data)：检查是否全满，若不满，放入，数据计数count+1</p><p>get(data)：检查是否全空，若不空，取出，数据计数count-1；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Monitor PC<span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> in<span class="token punctuation">,</span>out<span class="token punctuation">,</span>count<span class="token punctuation">;</span>     item buffer<span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        condition  notfull<span class="token punctuation">,</span>notempty<span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">>=</span>n<span class="token punctuation">)</span> notfull<span class="token punctuation">.</span>wait<span class="token punctuation">;</span><span class="token comment">//阻塞</span>        <span class="token function">buffer</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token operator">=</span>nextp<span class="token punctuation">;</span>        in<span class="token operator">=</span><span class="token punctuation">(</span>in<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod n<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>notempty<span class="token punctuation">.</span>queue<span class="token punctuation">)</span>             notempty<span class="token punctuation">.</span>signal<span class="token punctuation">;</span> <span class="token comment">//唤醒</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>  notempty<span class="token punctuation">.</span>wait<span class="token punctuation">;</span>        nextc<span class="token operator">=</span><span class="token function">buffer</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token operator">=</span><span class="token punctuation">(</span>out<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> mod n<span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>notfull<span class="token punctuation">.</span>queue<span class="token punctuation">)</span>            notfull<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//生产者进程</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            produce an item in nextp<span class="token punctuation">;</span>            PC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//消费者进程</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        PC<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        consume the item in nextc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>管程和进程的比较</strong>：<ul><li>设置目的不同：<ul><li>进程：并发、共享</li><li>管程：管理临界资源</li></ul></li><li>系统管理的结构不同：<ul><li>进程：PCB</li><li>管程：等待队列</li></ul></li><li>管程是OS固有成分，有生命周期（与操作系统相同）</li><li><strong>管程被进程调用</strong>。</li></ul></li></ul><blockquote><p>注：</p><ul><li><p><strong>信号量可以并发</strong>，并发量是取决于s的初始值，而<strong>管程则是在任意时刻都是只能有一个</strong></p></li><li><p>信号量的P操作在操作之前不知道是否会被阻塞，而管程的wait操作则是一定会被阻塞</p></li></ul></blockquote><h2 id="4-7-进程通信"><a href="#4-7-进程通信" class="headerlink" title="4.7 进程通信"></a>4.7 进程通信</h2><p><strong>IPC</strong>(Inter-Process Communication)：协作进程间用来交换数据与信息的机制。</p><h3 id="4-7-1-进程间通信类型"><a href="#4-7-1-进程间通信类型" class="headerlink" title="4.7.1 进程间通信类型"></a>4.7.1 进程间通信类型</h3><p><strong>低级通信</strong></p><ul><li>交换信息量少，仅是数据和状态的变化</li><li>通信由程序员完成</li></ul><p><strong>高级通信</strong></p><ul><li>交换信息量大</li><li>系统提供高效简捷的传输命令</li><li><strong>高级通信类型</strong><ul><li><strong>共享存储器系统</strong>（Shared-Memory System）——共享数据结构、共享存储区</li><li><strong>消息传递系统</strong>（Message Passing System）</li><li><strong>管道通信</strong>（Pipe Communication）</li></ul></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220524134959413.png" alt="image-20220524134959413" style="zoom:50%;" /><h3 id="4-7-2-消息传递系统"><a href="#4-7-2-消息传递系统" class="headerlink" title="4.7.2 消息传递系统"></a>4.7.2 消息传递系统</h3><p>利用系统提供的通信原语，以消息或报文为单位进行信息交换。</p><h4 id="4-7-2-1-直接通信方式"><a href="#4-7-2-1-直接通信方式" class="headerlink" title="4.7.2.1 直接通信方式"></a>4.7.2.1 直接通信方式</h4><ul><li>进程直接把消息发送给目标进程</li><li><strong>通信原语</strong><ul><li><strong>Send</strong>(Receiver, message);</li><li><strong>Receive</strong>(Sender, message);</li></ul></li></ul><p>[例]生产者-消费者问题的直接通信方式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   produce an item in nextp<span class="token punctuation">;</span>   <span class="token function">Send</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> nextp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">Receive</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>   consume the item in nextc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-2-2-间接通信方式-信箱"><a href="#4-7-2-2-间接通信方式-信箱" class="headerlink" title="4.7.2.2 间接通信方式(信箱)"></a>4.7.2.2 间接通信方式(信箱)</h4><ul><li>进程间通过某种共享的数据结构（如<strong>信箱</strong>）进行通信。</li><li>通信原语<ul><li>信箱的创建、撤销；</li><li>消息的发送和接收<ul><li>Send(mailbox,message)</li><li>Receive(mailbox,message)</li></ul></li></ul></li><li><strong>信箱的类型</strong>（根据创建者和共用关系不同进行分类）<ul><li><strong>私用信箱</strong>(Private Mailbox)：一对一，<strong>单向通信链路</strong></li><li><strong>共用信箱</strong>(Public Mailbox)：由操作系统创建</li><li><strong>共享信箱</strong>(Shared Mailbox)：多对多，由某进程创建</li></ul></li></ul><blockquote><p>进程间用信件传递信息时，<strong>信件中应含有信箱名</strong>。</p></blockquote><h4 id="4-7-2-3-消息传递系统其他概念"><a href="#4-7-2-3-消息传递系统其他概念" class="headerlink" title="4.7.2.3 消息传递系统其他概念"></a>4.7.2.3 消息传递系统其他概念</h4><p><strong>通信链路问题</strong>：</p><ul><li>显式建立&#x2F;隐式建立</li><li>点-点&#x2F;多点链接</li><li>单向链路&#x2F;双向链路</li><li>无容量&#x2F;有容量链路（有无缓冲机制）</li></ul><p><strong>消息格式问题</strong>：</p><ul><li><strong>消息头</strong>：发送和接收进程名、消息长度、类型（与所处环境有关）</li><li>消息正文</li></ul><p>&#x3D;&#x3D;<strong>进程的同步方式</strong>&#x3D;&#x3D;（三种）：</p><ul><li><p>发送者、接收者进程阻塞（紧密同步）</p></li><li><p>发送者不阻塞（一直发）、接收者阻塞（反馈信息）</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220316201451654.png" alt="image-20220316201451654"></p><ul><li><p>发送者、接收者都不阻塞</p><p>特点：利用率最高，需<strong>缓存</strong>机制（排序后才可接收）</p></li></ul><p><strong>消息缓冲队列通信机制</strong>：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220524134646185.png" alt="image-20220524134646185"></p><h3 id="4-7-3-管道通信"><a href="#4-7-3-管道通信" class="headerlink" title="4.7.3 管道通信"></a>4.7.3 管道通信</h3><ul><li>管道通信是UNIX系统的重要特色之一。管道是指用于连接一个<strong>读进程</strong>和一个<strong>写进程</strong>，以实现进程间通信的共享文件，又叫<strong>Pipe文件</strong>。</li><li>进程直接把消息发送给目标进程的命令格式为：Command1|Command 2（管道：|）</li><li>功能：Command1进程以<strong>字符流</strong>的形式向管道发送大量的数据，Command2进程则<strong>从管道接收数据</strong>。两进程实现单向、同步、互斥运行。<ul><li>单向：Command1只能发送；…</li><li>同步：管道满时，Command1等待；…</li><li>互斥：同一时刻，只能有一个进程对管道操作。</li></ul></li></ul><h1 id="ch5-死锁"><a href="#ch5-死锁" class="headerlink" title="ch5.死锁"></a>ch5.死锁</h1><h2 id="5-1-死锁-Deadlock-概述"><a href="#5-1-死锁-Deadlock-概述" class="headerlink" title="5.1 死锁(Deadlock)概述"></a>5.1 死锁(Deadlock)概述</h2><h3 id="5-1-1-定义"><a href="#5-1-1-定义" class="headerlink" title="5.1.1 定义"></a>5.1.1 定义</h3><p>多个进程因竞争资源而造成的一种僵局，若无外力作用，这些进程将永远无法推进。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220524140356758.png" alt="image-20220524140356758"></p><h3 id="5-1-2-死锁产生的原因及必要条件"><a href="#5-1-2-死锁产生的原因及必要条件" class="headerlink" title="5.1.2 死锁产生的原因及必要条件"></a>5.1.2 死锁产生的原因及必要条件</h3><p><strong>产生原因</strong>：</p><ul><li>竞争资源</li><li>进程推进顺序不合理</li></ul><p><strong>必要条件</strong>：</p><ul><li><strong>互斥条件</strong>（Mutual exclusion）</li><li><strong>占有并等待</strong>（Hold and wait）</li><li><strong>不可抢占</strong>（No preemption）</li><li><strong>环路等待</strong>（Circular wait）</li></ul><blockquote><p>注：</p><p>出现环路不一定发生死锁。只有在每个资源实体只有一个的情况下，出现环是出现死锁的充要条件。</p></blockquote><h2 id="5-2-资源分配图"><a href="#5-2-资源分配图" class="headerlink" title="5.2 资源分配图"></a>5.2 资源分配图</h2><p>由节点集合$V$和边集合$E$组成的<strong>有向图</strong>$G&#x3D;(N,E)$，用于表示某时刻<strong>系统资源与进程之间的状态</strong>。</p><p><strong>节点集合V</strong>：</p><ul><li>进程集合$P&#x3D;{P_{1},P_{2},…, P_{n}}$ ；</li><li>资源类型集合$R&#x3D;{R_{1}, R_{2},…, R_{m}}$，其中<strong>黑点数表示资源个数</strong>。</li></ul><p><strong>边集合E</strong>：</p><ul><li><strong>申请边</strong>$P_{i} →R_{j}$ ——由<strong>进程</strong>$P_{i}$指向<strong>资源</strong>$R_{j}$的有向边，表示还要请求；</li><li><strong>分配边</strong>$R_{j}→P_{i}$——由<strong>资源</strong>$R_{j}$指向<strong>进程</strong>$P_{i}$的有向边，表示已经分配。</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220524141210360.png" alt="image-20220524141210360" style="zoom:50%;" /><h2 id="5-3-死锁的处理办法"><a href="#5-3-死锁的处理办法" class="headerlink" title="5.3 死锁的处理办法"></a>5.3 死锁的处理办法</h2><ul><li><p>设计无死锁的系统（系统运行前或运行中）</p><ul><li>死锁<strong>预防</strong>（破坏死锁存在的四个必要条件）</li><li>死锁<strong>避免</strong>（保证系统随时处于安全状态）</li></ul></li><li><p>允许系统出现死锁，提供处理方法排除（系统或进程运行后）</p><ul><li>死锁检测（通过化简资源分配图）</li><li>死锁恢复（通过破坏死锁的必要条件）</li></ul></li><li><p>忽视死锁</p></li></ul><h3 id="5-3-1-死锁的预防"><a href="#5-3-1-死锁的预防" class="headerlink" title="5.3.1 死锁的预防"></a>5.3.1 死锁的预防</h3><p>死锁的预防指系统<strong>预先确定一些资源分配策略</strong>，进程按规定申请资源，系统按预先规定的策略进行分配，从而防止死锁的发生。</p><p>&#x3D;&#x3D;<strong>预先静态分配法</strong>&#x3D;&#x3D;：</p><ul><li>破坏“<strong>占有并等待</strong>”条件</li><li>思想：作业调度时，仅将<strong>系统能满足运行所需全部资源的作业</strong>调入内存运行。</li><li>缺点：<ul><li>资源利用率低</li><li>作业周转时间长，不利于“并发”</li></ul></li></ul><p>&#x3D;&#x3D;<strong>有序资源使用法</strong>&#x3D;&#x3D;：</p><ul><li><p>破坏“<strong>环路等待</strong>”条件</p></li><li><p>思想：将系统中所有临界资源<strong>分配唯一的序号</strong>，进程严格按序号递增次序申请使用资源。在任何一个时刻，总有一个进程拥有的资源编写是最大的，那这个进程申请之后的资源必然畅通无阻，因此不可能出现所有进程都阻塞的死锁现象。</p></li><li><p>如果进程需要同一资源类型的多个实例（也就是序号相同的资源），则必须对它们一起进行申请；如果进程后面又想申请序号低的资源（比如5），那就必须把现在拥有的序号为5及其以上的资源全部释放。</p></li><li><p>例如：输入机&#x3D;1，打印机&#x3D;2，穿孔机&#x3D;3，磁带&#x3D;4。</p><p>A：<strong>R2</strong>…R1（在这里A需要重编译，优先调用R1，浪费R2资源【R2不能利用】）</p><p>B：<strong>R1</strong>（已运行）…R2</p></li><li><p>缺点：</p><ul><li><strong>临界资源的顺序定义随时变化（很难定下顺序）</strong></li><li>为资源编号限制新设备的增加</li><li>资源的排序会占用系统开销</li></ul></li></ul><h3 id="5-3-2-死锁的避免-银行家算法"><a href="#5-3-2-死锁的避免-银行家算法" class="headerlink" title="5.3.2 死锁的避免(银行家算法)"></a>5.3.2 死锁的避免(银行家算法)</h3><p>基本思想：在执行过程中，采用一些算法规避<strong>不安全状态</strong>（检查资源的分配情况），确保系统始终处于安全状态。</p><p><strong>系统的安全状态</strong>：</p><ul><li><p>安全状态的定义：系统按某一顺序$&lt;P_{2},P_{1},P_{3}&gt;$(<strong>安全序列</strong>)为每个进程分配所需资源，使每个进程都可顺序完成，则称系统在该时刻处于安全状态。</p></li><li><p>要考虑的因素为：<strong>最大需求、目前已经分配的资源、目前可用的空闲资源</strong>。当一个进程获得了它运行所需的最大资源后，将释放资源供给其他进程使用。</p></li><li><p>m个进程共享n个同类型资源，每个进程至少1个资源，<strong>保证不死锁的条件是</strong>：$\left. {\sum\limits_{i &#x3D; 1}^{m}{\left( {R_{P_{i}} - 1} \right) + 1}} \leq n\rightarrow{\sum\limits_{i &#x3D; 1}^{m}R_{P_{i}}} \leq n + m - 1 \right.$</p><p>例如，5个相同类型资源组成的系统，系统中有3个进程，每个进程最多需要2个资源，该系统不会发生死锁。<strong>为每个进程先分配一个资源</strong>，然后再给其中任意一个进程分配一个资源，则一个进程将得以运行，且运行完毕后将释放这两个资源供给其他进程使用。在这个问题中最少需要4个进程即可保证不死锁。</p></li></ul><p>&#x3D;&#x3D;<strong>银行家算法</strong>&#x3D;&#x3D;：</p><ul><li><p><strong>数据结构</strong>：</p><ul><li>可用资源向量Available[m]：是一个数组，表示现在系统中每个类型的资源还有多少可用的资源</li><li>最大需求矩阵Max[n,m]：表示某进程最多需要多少某资源，一行代表一个进程，一列代表一个资源</li><li>分配矩阵Allocation[n,m]：表示系统中现在某类资源分配给某进程的数量</li><li>需求矩阵Need[n,m]：表示现在进程中尚需的各类资源数</li></ul></li><li><p><strong>资源请求处理</strong>：</p><p>设 request 是进程 P 的请求向量，request[A] &#x3D; K 表示进程 P 需要 A 类资源 K 个。当 P 发出资源请求后，系统按照以下步骤进行检查。</p><ul><li><p>1.如果 request[A] 的值小于 need[P,A]，也就是说<strong>如果现在请求的数量小于 need 矩阵中规定的它所需要的数量</strong>，那么就转到步骤 2 ；否则认为出错，因为他所请求的数量已经超过了他所宣布的最大值。</p></li><li><p>2.如果 request[A] 的值小于 available[A]，也就是说请求的值小于现在系统中有的值，则转向步骤 3 ；否则表示尚足够资源，进程 P 需要等待。</p></li><li><p>3.系统试探着把资源分配给进程 P，并修改下面数据结构中的值：</p><ul><li>更新可用：Available &#x3D; Available - request；</li><li>更新已分配：Allocation[P,A] &#x3D; Allocation[P,A] + request[A]；</li><li>更新所需：Need[P,A] &#x3D; Need[P,A] - request[A];</li></ul></li><li><p>4.系统执行<strong>安全性检测</strong>，检查此次资源分配后，系统是否处于安全状态，若安全才将资源分配给进程 P；否则此次的试探分配作废，恢复原来的资源分配状态，让进程 P 等待。</p></li></ul></li><li><p><strong>安全性检测算法</strong>：</p><ul><li>1.初始时<strong>安全序列为空</strong>；</li><li>2.从 Need 矩阵中找到符合下面条件的行：该行对应的进程不在安全序列中，而且该行小于等于 Available 向量，找到后，把对应的进程加入安全序列；若找不到，则执行步骤 4；</li><li>3.进程 P 进入安全序列后，可顺利执行，直至完成，并释放分配给它的资源，故应执行 **Available &#x3D; Available + Allocation[P]**，其中 Allocation[P] 表示进程 P 在 Allocation 矩阵中对应的行，返回步骤 2 。</li><li>4.若此时安全序列中已有所有进程，则系统处于安全状态，否则处于不安全状态。</li></ul></li><li><p>银行家算法例题如下。</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220316233503672.png" alt="image-20220316233503672"></p><h3 id="5-3-3-死锁的检测"><a href="#5-3-3-死锁的检测" class="headerlink" title="5.3.3 死锁的检测"></a>5.3.3 死锁的检测</h3><p>死锁检测的2个前提：</p><ul><li>保存有关资源的请求和分配信息</li><li>提供一种检测系统是否已进入死锁的算法</li></ul><p>&#x3D;&#x3D;<strong>资源分配图简化算法</strong>&#x3D;&#x3D;：</p><ul><li>由进程指向资源的边是请求边，由资源指向进程的边是分配边。当资源包中的可用资源数大于0，则响应请求，画出分配边（删去请求边），当一个进程没有请求边时，即可<strong>孤立</strong>。</li><li>如果化简后所有的顶点都成了孤立点，则称该图<strong>可完全化简</strong>；否则称该图是不可完全化简的。</li><li>若经过化简后还存在非孤立点，则非孤立点的进程处于死锁状态。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220318103113812.png" alt="image-20220318103113812"></p><h3 id="5-3-4-死锁的恢复与解除"><a href="#5-3-4-死锁的恢复与解除" class="headerlink" title="5.3.4 死锁的恢复与解除"></a>5.3.4 死锁的恢复与解除</h3><ul><li><p>法1：<strong>剥夺资源</strong></p><ul><li>从一部分进程剥夺资源给其他进程，直到死锁解除；</li><li>具体方法：一次终止一个进程直到死锁循环被解除，选择 终止“代价最小”的进程。</li></ul></li><li><p>法2：<strong>撤销进程</strong></p><p>按照不同策略撤销一个或多个进程，回收资源给其他进程，直到死锁解除；具体考虑有以下几种：</p><ul><li>选择一个牺牲品：确定抢占顺序以使代价最小。</li><li>回滚：抢占资源，将进程回滚到某个安全状态。</li><li>饥饿：防止进程饥饿，让进程有限地被选定。</li></ul></li></ul><h1 id="ch6-内存管理"><a href="#ch6-内存管理" class="headerlink" title="ch6.内存管理"></a>ch6.内存管理</h1><h2 id="6-1-内存管理的基本概念"><a href="#6-1-内存管理的基本概念" class="headerlink" title="6.1 内存管理的基本概念"></a>6.1 内存管理的基本概念</h2><h3 id="6-1-1-内存管理的功能"><a href="#6-1-1-内存管理的功能" class="headerlink" title="6.1.1 内存管理的功能"></a>6.1.1 内存管理的功能</h3><ul><li><strong>主存空间的分配与回收</strong></li><li><strong>地址转换与重定位</strong></li><li><strong>存储保护与共享</strong></li><li><strong>存储扩充</strong>：使用虚拟存储器，扩充主存空间。CPU能直接访问的存储设备只有<strong>内存和寄存器</strong>，其中内存访问需要占用几个CPU时钟周期，寄存器则内置在CPU中，访问只需要只用1个CPU时钟周期。</li></ul><h3 id="6-1-2-地址的相关概念"><a href="#6-1-2-地址的相关概念" class="headerlink" title="6.1.2 地址的相关概念"></a>6.1.2 地址的相关概念</h3><ul><li><p><strong>逻辑地址</strong>：虚地址，用户程序中使用的地址</p></li><li><p><strong>物理地址</strong>：系统中<strong>内存单元</strong>的地址</p></li><li><p>&#x3D;&#x3D;<strong>重定位</strong>&#x3D;&#x3D;（Relocation）：将相对地址变为绝对地址的过程，即<strong>将逻辑地址转变为内存的物理地址</strong></p></li><li><p><strong>MMU</strong>：内存管理单元，<strong>实现重定位的硬件设备</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220318110302335.png" alt="image-20220318110302335"></p></li></ul><h2 id="6-2-地址绑定"><a href="#6-2-地址绑定" class="headerlink" title="6.2 地址绑定"></a>6.2 地址绑定</h2><h3 id="6-2-1-地址绑定的时期"><a href="#6-2-1-地址绑定的时期" class="headerlink" title="6.2.1 地址绑定的时期"></a>6.2.1 地址绑定的时期</h3><p>指令和数据绑定到存储器地址可在下面任意时期进行：</p><ul><li><strong>编译时期</strong>：符号绑定，各Obj模块的相对虚拟地址空间 –&gt;<strong>统一的虚拟地址空间</strong></li><li><strong>装入时期</strong>：程序装入内存</li><li><strong>执行时期</strong>：虚拟地址空间 –&gt;物理地址空间， MMU</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220318104416387.png" alt="image-20220318104416387"></p><h3 id="6-2-2-重定位的方式"><a href="#6-2-2-重定位的方式" class="headerlink" title="6.2.2 重定位的方式"></a>6.2.2 重定位的方式</h3><ul><li><p><strong>静态重定位</strong>：程序入主存之前由<strong>编译&#x2F;链接程序</strong>完成重定位，入主存可立即执行。</p><ul><li>场景：管程（系统固有成分，常驻内存）、嵌入式环境（如刷卡）</li><li>优点：操作简单，不需要额外的机构或操作。</li><li>缺点：<ul><li>程序不能进出（程序一旦装入后地址就不可再改变，程序也不可以再移动，不利于内存空间的有效使用）</li><li>需一次加载所有代码</li></ul></li></ul></li><li><p><strong>动态重定位</strong>：程序入主存之前不进行重定位，<strong>入主存执行到与地址相关项时</strong>，再进行重定位。</p><ul><li><p>实现方法：</p><p>​ 当某个进程取得CPU控制权时，操作系统应负责把该作业程序在主存中的起始地址送入<strong>重定位寄存器</strong>中，<strong>每次访问存储器时，重定位寄存器中的内容将被自动加到逻辑地址中去</strong>，经该种变换后执行结果是正确的。</p></li><li><p>优点：</p><ul><li><strong>程序占用的内存空间可变，能提高内存的利用效率</strong></li><li><strong>容易实现不同程序对同一副本的共同使用</strong></li></ul></li><li><p>缺点：</p><ul><li>执行速度变慢，占用CPU时间</li><li>需要额外的硬件支持</li></ul></li></ul></li></ul><blockquote><p>注：</p><ul><li><p>静态重定位是在作业的<strong>装入过程</strong>中进行的，动态重定位是在作业的<strong>执行过程</strong>中进行的；</p></li><li><p>链接可以分为静态链接和动态链接，装入时链接叫<strong>装入时动态链接</strong>（在作业装入时进行重定位，属于静态重定位）；</p></li><li><p>在编译时静态重定位就是已知程序进入内存后的起始地址然后再编译。一般现在的操作系统不会采用这种方式，链接时静态重定位也是在链接的时候就确定了将进入内存的起始地址。</p></li></ul></blockquote><p>装入和链接方式：</p><ul><li><p>动态运行时<strong>装入</strong>方式：</p><ul><li>装入程序按照装入模块中的地址，将程序和数据装入内存，执行时重定位。</li><li>优点：内存利用率高；大规模程序有利；可通过程序设计来实现；无需操作系统的额外支持；</li></ul></li><li><p>运行时<strong>动态链接</strong>方式：</p><ul><li>将编译后的目标模块及库函数，在程序执行时进行链接。</li><li><strong>存根程序stub</strong>：用于指出如何定位适当的内存驻留库程序，或者在程序不在内存时如何加载库</li><li>特点：可节省内存空间；可用于系统类库的更新（如修改bug）；需要操作系统的支持。</li></ul></li></ul><h2 id="6-3-交换技术-Swapping"><a href="#6-3-交换技术-Swapping" class="headerlink" title="6.3 交换技术(Swapping)"></a>6.3 交换技术(Swapping)</h2><h3 id="6-3-1-交换技术与对换空间管理"><a href="#6-3-1-交换技术与对换空间管理" class="headerlink" title="6.3.1 交换技术与对换空间管理"></a>6.3.1 交换技术与对换空间管理</h3><ul><li><p>引入目的：解决由于内存不足而无法同时调入多个作业的问题。</p></li><li><p>多道程序环境下的交换</p><ul><li>实现：中级调度</li><li>类别：进程对换、页&#x2F;段对换；</li></ul></li><li><p><strong>对换空间管理</strong></p><ul><li><strong>外存设置交换区</strong></li><li><strong>设置数据结构记录外存空间使用情况</strong></li></ul></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220318113340700.png" alt="image-20220318113340700" style="zoom:80%;" /><h3 id="6-3-2-覆盖技术-Overlay"><a href="#6-3-2-覆盖技术-Overlay" class="headerlink" title="6.3.2 覆盖技术(Overlay)"></a>6.3.2 覆盖技术(Overlay)</h3><ul><li><p>用于解决<strong>程序大小超过物理内存总和</strong>的问题。</p></li><li><p>将程序分为<strong>多个段</strong>（多个模块）。常用的段常驻内存,不常用的段在需要时调入内存。</p></li><li><p>内存中分为一个“<strong>固定区</strong>”和若干个“<strong>覆盖区</strong>”。需要常驻内存的段放在“固定区”中,调入后就不再调出(除非运行结束)。不常用的段放在“覆盖区”,需要用到时调入内存,用不到时调出内存。</p></li></ul><blockquote><p>[注]覆盖、交换的比较：</p><ul><li><p>目的是一样的；</p></li><li><p>覆盖是发生在一个进程中的<strong>程序内部</strong>没有调用关系的模块之间，代价是程序员手动指定和划分逻辑覆盖结构；交换是<strong>内存中程序与管理程序或OS</strong>之间发生的，以<strong>进程</strong>作为交换的单位，需要把进程的整个地址空间都换进换出，对程序员是透明的，开销相对较大。</p></li></ul></blockquote><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220318113349823.png" alt="image-20220318113349823" style="zoom:80%;" /><h2 id="6-4-连续分配存储管理技术"><a href="#6-4-连续分配存储管理技术" class="headerlink" title="6.4 连续分配存储管理技术"></a>6.4 连续分配存储管理技术</h2><h3 id="6-4-1-单一连续分配"><a href="#6-4-1-单一连续分配" class="headerlink" title="6.4.1 单一连续分配"></a>6.4.1 单一连续分配</h3><p>​在单一连续分配方式中，内存被分为<strong>系统区和用户区</strong>。系统区的低地址存放中断向量、操作系统内核代码，高地址存放设备驱动程序；内存中只能由一道用户程序，用户程序独占整个用户区空间。这种分配方式实现简单，无外部碎片，但有内部碎片，且存储器利用率极低。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220321171318254.png" alt="image-20220321171318254" style="zoom:67%;" /><h3 id="6-4-2-固定分区分配"><a href="#6-4-2-固定分区分配" class="headerlink" title="6.4.2 固定分区分配"></a>6.4.2 固定分区分配</h3><p>​在固定分区分配方式中，操作系统需要建立一个<strong>数据结构</strong>（<strong>分区说明表</strong>），来实现各个分区的分配与回收。每个表项对应一个分区，通常按照分区大小排列。每个表项包括<strong>对应分区的大小、起始地址、状态（是否已分配）</strong>。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220321171647698.png" alt="image-20220321171647698" style="zoom:67%;" /><p>固定分区分配的优缺点如下：</p><ul><li><p>优点：实现简单，无外部碎片。</p></li><li><p>缺点：</p><ul><li>当用户程序太大时，可能所有分区都不能满足需求，此时必须采用覆盖技术解决，但会降低性能</li><li>会产生<strong>内部碎片</strong>（每个分区内部存在空闲空间），内存利用率低</li></ul></li></ul><h3 id="6-4-3-动态分区分配"><a href="#6-4-3-动态分区分配" class="headerlink" title="6.4.3 动态分区分配"></a>6.4.3 动态分区分配</h3><p>动态分区分配使用<strong>空闲分区表</strong>，每个空闲分区对应一个表项。表项中包含<strong>分区号、分区大小、分区起始地址</strong>等信息。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220321172506283.png" alt="image-20220321172506283" style="zoom:67%;" /><h4 id="6-4-3-1-动态分区分配算法"><a href="#6-4-3-1-动态分区分配算法" class="headerlink" title="6.4.3.1 动态分区分配算法"></a>6.4.3.1 动态分区分配算法</h4><ul><li><p><strong>首次适应算法</strong>：每次都从<strong>低地址</strong>以<strong>地址递增</strong>的次序排列，直至找到<strong>第一个</strong>大小能满足要求的空闲分区。该算法倾向于优先使用低地址部分空闲区。</p></li><li><p><strong>循环首次适应算法</strong>：为了解决上一个算法导致低地址部分出现很多小的空闲分区，且每次分配查找由于要经过这些分区而增加查找开销。该算法设定一个<strong>指针</strong>，每次都从指针位置（即上次查找结束的位置）往后查找，直至找到第一个大小能满足要求的空闲分区。该算法能使内存空间中<strong>空闲区分布较均匀</strong>。</p></li><li><p><strong>最佳适应算法</strong>：从头扫到尾，找到能满足要求且大小最小的（即最合适的）空闲分区。</p></li><li><p><strong>最坏适应算法</strong>：为了解决上一个算法导致留下太多难以利用的小碎片，其在每次分配时优先使用<strong>空间最大的空闲分区</strong>，使分配后剩余的空闲区不会太小，更方便使用。</p></li><li><p>空闲分区表变动的两种情况：</p><ul><li>空闲分区大小比申请空间大小大，则分区数量不改变</li></ul><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">20</td><td align="center">8</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><p>​    分区1有进程5申请4MB的内存空间，则空闲分区表变为：</p><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>16</strong></td><td align="center"><strong>12</strong></td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><ul><li>空闲分区大小和申请空间大小相同，则分区数量减一</li></ul><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">20</td><td align="center">8</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><p>​分区3有进程5申请4MB的内存空间，则空闲分区表变为：</p><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">20</td><td align="center">8</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr></tbody></table></li></ul><h4 id="6-4-3-2-回收问题"><a href="#6-4-3-2-回收问题" class="headerlink" title="6.4.3.2 回收问题"></a>6.4.3.2 回收问题</h4><p>有以下四种情况：</p><ul><li>回收区的后面有一个相邻的空闲分区，则将该分区的分区大小和起始地址进行改变</li></ul><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">14</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><p>变为：</p><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>14</strong></td><td align="center"><strong>28</strong></td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">14</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><ul><li>回收区的前面有一个相邻分区（与上面一种情况同理，起始地址不发生变化）</li><li><strong>回收区的前、后各有一个相邻的空闲分区</strong>（造成空闲区间减一）</li></ul><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">20</td><td align="center">8</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">10</td><td align="center">32</td><td align="center">空闲</td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><p>变为：</p><table><thead><tr><th align="center">分区号</th><th align="center">分区大小（MB）</th><th align="center">起始地址（M）</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>34</strong></td><td align="center"><strong>8</strong></td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">4</td><td align="center">60</td><td align="center">空闲</td></tr></tbody></table><ul><li>回收区的前、后都没有相邻的空闲分区，则分区数量加一，然后填充信息即可。</li></ul><h4 id="6-4-3-3-紧凑技术"><a href="#6-4-3-3-紧凑技术" class="headerlink" title="6.4.3.3 紧凑技术"></a>6.4.3.3 紧凑技术</h4><p>动态分区分配无内部碎片，有外部碎片。&#x3D;&#x3D;外部碎片可以通过”<strong>紧凑</strong>”技术来解决&#x3D;&#x3D;。</p><ul><li>紧凑技术是通过移动内存中作业，将分散的多个分区合并成一个大的分区；</li><li>由于紧凑时，作业要在内存中移动位置，故紧凑技术的前提是采用<strong>动态重定位</strong>，这种分区分配方式称为<strong>可重定位分区分配方式</strong>；</li><li>动态重定位分区分配的思想是：当作业需进入主存时，<strong>若主存每一个可用分区都不能满足要求，而可用分区总和又可满足要求时</strong>，首先完成内存的“紧凑”，然后调入。在每个分区都不能满足要求的情况下才紧凑，是因为紧凑操作会耗时，&#x3D;&#x3D;<strong>时间代价较大</strong>&#x3D;&#x3D;。</li></ul><p>分区管理方案算法较简单，实现较容易，内存开销较少，存储保护措施简单，但内存使用不充分，存在较严重的碎片问题。</p><p>下面章节介绍的都是<strong>离散分配存储管理技术</strong>。</p><h2 id="6-5-分页存储管理-Paging"><a href="#6-5-分页存储管理-Paging" class="headerlink" title="6.5 分页存储管理(Paging)"></a>6.5 分页存储管理(Paging)</h2><h3 id="6-5-1-基本内容"><a href="#6-5-1-基本内容" class="headerlink" title="6.5.1 基本内容"></a>6.5.1 基本内容</h3><h4 id="6-5-1-1-概述"><a href="#6-5-1-1-概述" class="headerlink" title="6.5.1.1 概述"></a>6.5.1.1 概述</h4><ul><li><p>基本思想：逻辑地址空间在内存中可以不连续。</p></li><li><p>将内存空间分为一个个大小相等的分区（比如每个分区4KB），每个分区就是一个“&#x3D;&#x3D;<strong>页框</strong>&#x3D;&#x3D;”（Frame，内存物理地址空间按$2^{n}$等分，也即页帧、内存块、<strong>物理页面</strong>），页框的编号称为<strong>页框号</strong>，从0开始编号。</p></li><li><p>将进程的<strong>逻辑地址空间</strong>也分为与页框大小相等的一个个部分，每个部分称为一个“&#x3D;&#x3D;<strong>页</strong>&#x3D;&#x3D;”或“&#x3D;&#x3D;<strong>页面</strong>&#x3D;&#x3D;” 。页面的编号称为<strong>页号</strong>，也从0开始编号。</p></li><li><p>操作系统以<strong>页框</strong>为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中，也就是说，<strong>进程的页面与内存的页框有一一对应的关系</strong>。各个页面不必连续存放，可以放到不相邻的各个页框中。</p></li><li><p><strong>页表（PMT）</strong>(Page Mapping Table)</p><p>通常存在于<strong>PCB</strong>（进程控制块）中，如图：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220321233753978.png" alt="image-20220321233753978"></p></li></ul><p><strong>页表项占用的字节数</strong>的计算：</p><p>[例]假设某系统物理内存大小为4GB，页面大小为4KB，则每个页表项至少应该为多少字节？</p><ul><li><p>页表项连续存放，因此页号可以是隐含的，<strong>不占存储空间</strong>（类比数组）。假设页表中的各页表项从内存地址为X的地方开始连续存放，则页号为i的页表项的存放地址&#x3D;X+3*i。</p></li><li><p><strong>计算机中内存块的数量-&gt;页表项中块号至少占多少字节</strong></p><ul><li>内存块大小&#x3D;页面大小&#x3D;4KB&#x3D;$2^{12}$B，故4GB的内存总共会被分为$2^{32}&#x2F;2^{12}&#x3D;2^{20}$个内存块，故内存块号的范围应是0到$2^{20}-1$</li><li>内存块号至少要用<strong>20bit</strong>来表示，则至少要用<strong>3B</strong>（3*8&#x3D;24bit）</li></ul></li></ul><h4 id="6-5-1-2-实现地址转换的方法"><a href="#6-5-1-2-实现地址转换的方法" class="headerlink" title="6.5.1.2 实现地址转换的方法"></a>6.5.1.2 实现地址转换的方法</h4><p><strong>实现地址转换的思路</strong>：</p><p>​若要访问逻辑地址A，则要先确定逻辑地址A对应的<strong>页号</strong>P，然后找到P号页面在内存中的<strong>起始地址</strong>（查页表），最后确定逻辑地址A的<strong>页内偏移量</strong>W，则<strong>逻辑地址A对应的物理地址&#x3D;P号页面在内存中的起始地址+页内偏移量W</strong>。其中：</p><ul><li><p><strong>页号</strong>&#x3D;逻辑地址&#x2F;页面长度（除法的整数部分），<strong>页内偏移量</strong>&#x3D;逻辑地址%页面长度（除法的余数部分），则逻辑地址可以表示为：**(页号,页内偏移量)**，或写作(P,d)。</p></li><li><p>由于在计算机内部地址是用二进制表示的，故页面大小设定为<strong>2的整数幂</strong>。假设某计算机用32个二进制位表示逻辑地址，则页面大小为4KB&#x3D;$2^{12}$B&#x3D;4096B，则有：（红色20位代表页号，黑色12位代表页内偏移量）</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220322000807501.png" alt="image-20220322000807501"></p><p>​故如果每个页面大小为$2^{k}$B，用二进制数表示逻辑地址，则<strong>末尾k位即为页内偏移量</strong>，其余部分就是页号。即页面大小和页内偏移量位数可以相互转换，互相推出。</p><blockquote><p>&#x3D;&#x3D;<strong>注意</strong>&#x3D;&#x3D;：</p><p><strong>内存地址是以字节编址的</strong>，每个地址的存储单元可以存放8bit的数据。一个字节就是一个房间，然后给这个房间编址。</p></blockquote><p><strong>页表地址寄存器</strong>（PTR）：保存当前执行进程<strong>页表的起始地址和页表长度</strong>，从而计算页表项。</p><ul><li>页表长度可以判断<strong>页号</strong>是否越界，通过比较页号P和页表长度M，若$P\ge M$，则产生越界中断（内中断）。在这里P&#x3D;M也会发生越界，因为页号从0开始，而页表长度至少是1。</li><li>页表中页号P对应的页表项地址&#x3D;<strong>页表起始地址F</strong> + <strong>页号P * 页表项长度</strong>，取出该页表项内容b，即为内存块号。</li><li>计算E &#x3D; b * L + W，用得到的物理地址E去访存。（如果内存块号、页面偏移量是用二进制表示的，那么把二者拼接起来就是最终的物理地址了）</li></ul><p>【注意】<strong>页表长度</strong>指的是这个页表中总共有几个页表项，即总共有几个页；而<strong>页表项长度</strong>指的是每个页表项占多大的存储空间（<strong>存储块号</strong>）；<strong>页面大小</strong>指的是一个页面占多大的存储空间。</p><p><strong>基本地址变换机构</strong>：</p><p>重定位寄存器指明进程在内存中的起始位置。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220322002747322.png" alt="image-20220322002747322"></p><p>【例】若页面大小L为1K字节，页号2对应的内存块号b &#x3D; 8，将逻辑地址A&#x3D;2500转换为物理地址E。</p><p>等价描述：某系统按字节寻址，逻辑地址结构中，页内偏移量占10位，页号2对应的内存块号b &#x3D; 8，将逻辑地址A&#x3D;2500转换为物理地址E。</p><p>①计算页号、页内偏移量：页号P &#x3D; A&#x2F;L &#x3D; 2500&#x2F;1024 &#x3D; 2； 页内偏移量W &#x3D; A%L &#x3D; 2500%1024 &#x3D; 452</p><p>②根据题中条件可知，页号2没有越界，其存放的内存块号b &#x3D; 8</p><p>③物理地址E &#x3D; b * L + W &#x3D; 8 * 1024 + 425 &#x3D; 8644</p><blockquote><p>注：</p><ul><li>在分页存储管理（页式管理）的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了。因此，页式管理中地址是<strong>一维</strong>的。即，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，并不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位。</li><li>地址变换过程总共<strong>需要访问2次内存</strong>。第一次访问内存是<strong>查页表</strong>时进行的，而第二次访问内存是在<strong>访问目标内存单元</strong>时进行的。</li></ul></blockquote><h3 id="6-5-2-具有快表的地址变换机构"><a href="#6-5-2-具有快表的地址变换机构" class="headerlink" title="6.5.2 具有快表的地址变换机构"></a>6.5.2 具有快表的地址变换机构</h3><p>​<strong>快表</strong>，又称<strong>联想寄存器</strong>（<strong>TLB</strong>, Translation Lookaside Buffer），是一种访问速度比内存快很多的<strong>高速缓冲寄存器</strong>，用来存放最近访问的页表项的副本，可以加速地址变换的速度，具有<strong>高速、有并行查询能力</strong>的特征。与此对应，内存中的页表常称为慢表。存储机构从快到慢依次是：寄存器、高速缓存（Cache）、内存（RAM）、外存（硬盘）。</p><ul><li><p><strong>引入快表后的访存变化</strong>：</p><ul><li><p>若快表命中，则访问某个逻辑地址对应的物理地址仅需&#x3D;&#x3D;<strong>一次访存</strong>&#x3D;&#x3D;即可；</p></li><li><p>若没有找到匹配的页号，需访问<strong>内存中的页表</strong>，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后<strong>访问该物理地址对应的内存单元</strong>。故需要访问某个逻辑地址对应的物理地址在未命中情况下需要&#x3D;&#x3D;<strong>两次访存</strong>&#x3D;&#x3D;。</p></li><li><p>注意：在第二种情况下，在找到页表项后，应同时将其存入快表，以便后面可能的再次访问；但若快表已满，则必须按照一定的算法对旧的页表项进行替换。</p></li><li><p>快表的实现依赖于<strong>时间局部性</strong>（同个数据再次被访问）和<strong>空间局部性</strong>（由于很多数据在内存中是连续存放的，附近的存储单元很可能被访问）。</p></li></ul></li><li><p><strong>有效访问时间</strong>（Effective Access Time）：</p><p>联想寄存器访问时间为$\varepsilon$，内存访问时间为$t$，联想寄存器中的命中率为$\alpha$，则有效访问时间EAT为：</p><p>$EAT&#x3D;(t+\varepsilon) \alpha+(2 t+\varepsilon)(1-\alpha)&#x3D;2 t+\varepsilon-t \alpha.$</p><p>若系统支持快表、慢表同时查询，则未命中情况下时间是$2t$（无$$\varepsilon$$），可以参考下面的甘特图：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220322234450577.png" alt="image-20220322234450577"></p></li></ul><h3 id="6-5-3-两级页表与多级页表"><a href="#6-5-3-两级页表与多级页表" class="headerlink" title="6.5.3 两级页表与多级页表"></a>6.5.3 两级页表与多级页表</h3><p><strong>单级页表存在的问题</strong>：</p><ul><li><p>页表必须连续存放，当页表很大时，需要<strong>占用很多个连续的页框</strong>（<strong>引入两级（多级）页表的原因</strong>）</p></li><li><p>进程在一段时间内只需要访问某几个页面就可以正常运行，没有必要让整个页面都常驻内存（引入虚拟存储技术，可以在需要访问页面时才把页面调入内存，在页表项中增加一个标志位，用于表示该页面是否已经调入内存）</p></li></ul><p>由此，为离散分配的页表再建立一张页表，称为<strong>页目录表</strong>（<strong>外层页表</strong>）。</p><p>​<strong>页目录表</strong>（存放外层页号+内层页表存放位置）</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220328165901641.png" alt="image-20220328165901641"></p><p>对于32位逻辑地址空间，页面大小为4KB，则可以设置如下：</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220328163558666.png" alt="image-20220328163558666" style="zoom: 80%;" /><p>将<strong>逻辑地址转换为物理地址</strong>分为以下步骤：</p><ul><li><p>按照地址结构将逻辑地址拆分为三部分</p></li><li><p>从PCB中读出页目录表始址，再根据一级页号查页目录表，找到下一级页表在内存中的存放位置（<strong>每个页表项记录页表页面的物理块号</strong>）</p></li><li><p>根据二级页号查表，找到最终想访问的内存块号</p></li><li><p>结合页内偏移量得到物理地址</p></li><li><p>若采用多级页表机制，则<strong>各级页表的大小不能超过一个页面</strong>。</p></li></ul><p>[例]某系统<strong>按字节编址</strong>，采用40位逻辑地址，页面大小为4KB，页表项大小为4B，假设采用纯页式存储，则要采用____级页表，页内偏移量为____位。</p><p>[解]页面大小&#x3D;4KB&#x3D;$2^{12}$B，按照字节编址，因此页内偏移量为12位，页号为40-12&#x3D;28位。又页表项大小为4B，则每个页面可以存放$2^{12}&#x2F;4&#x3D;2^{10}$个页表项。因此各级页表最多包含$2^{10}$个页表项，需要10位二进制位才能映射到$2^{10}$个页表项，故每一级的页表对应页号应为10位。故28位的页号至少要分为3级。</p><p><strong>两级页表的访存次数分析</strong>（假设没有快表机构）：</p><ul><li>第一次访存：访问内存中的页目录表</li><li>第二次访存：访问内存中的二级页表</li><li>第三次访存：访问目标内存单元</li></ul><p>—–&gt;<strong>n级页表的访存次数是n+1次</strong>。</p><h2 id="6-6-分段存储管理-Segmentation"><a href="#6-6-分段存储管理-Segmentation" class="headerlink" title="6.6 分段存储管理(Segmentation)"></a>6.6 分段存储管理(Segmentation)</h2><h3 id="6-6-1-基本内容"><a href="#6-6-1-基本内容" class="headerlink" title="6.6.1 基本内容"></a>6.6.1 基本内容</h3><ul><li><p><strong>进程地址空间</strong>的概念：按照<strong>程序自身的逻辑关系</strong>划分为若干个段，每个段都有一个段名，每段从0开始编址。</p></li><li><p><strong>内存分配规则</strong>：以段为单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻。</p></li><li><p>优点：用户编程更方便，程序的可读性更高。也可描述为：方便编程；分段共享保护；动态链接；动态增长。</p></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220328172918193.png" alt="image-20220328172918193" style="zoom:67%;" /><ul><li>分段系统的逻辑地址结构由<strong>段号</strong>（段名）和<strong>段内地址</strong>（段内偏移量）组成。<strong>段号的位数决定了每个进程最多可以分几个段；段内地址位数决定了每个段的最大长度是多少。</strong></li></ul><h3 id="6-6-2-段表"><a href="#6-6-2-段表" class="headerlink" title="6.6.2 段表"></a>6.6.2 段表</h3><p>​程序分多个段，各段离散地装入内存，为了保证程序能正常运行，就必须能从<strong>物理内存</strong>中找到<strong>各个逻辑段的存放位置</strong>。为此，需为每个进程建立一张段映射表，简称”<strong>段表</strong>“。段表中包含<strong>段号、段长、基址</strong>。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220329220737771.png" alt="image-20220329220737771"></p><ul><li>段表寄存器：<strong>段表始址F|段表长度M</strong></li><li>作业逻辑地址表示：<strong>段号S|段内地址W</strong></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220329222454079.png" alt="image-20220329222454079"></p><h3 id="6-6-3-分段的保护与共享"><a href="#6-6-3-分段的保护与共享" class="headerlink" title="6.6.3 分段的保护与共享"></a>6.6.3 分段的保护与共享</h3><ul><li><strong>段的保护</strong><ul><li>段表基址寄存器STBR和段表长度寄存器STLR</li><li>与段相关的保护位：<strong>只读、只写、只执行</strong></li><li>与段相关的Validation位：为0表示不合法段</li></ul></li><li><strong>段的共享</strong><ul><li>设置<strong>共享段表</strong></li><li>第一个请求使用共享段的进程申请内存分区，调入，修改共享段表内容</li><li>后续进程使用共享段，在本进程段表填入共享段物理地址；在共享段表中增加表目，将共享段计数count加1</li><li>回收执行count-1；count&#x3D;0时撤销该共享段</li></ul></li></ul><h3 id="6-6-4-分页与分段的对比"><a href="#6-6-4-分页与分段的对比" class="headerlink" title="6.6.4 分页与分段的对比"></a>6.6.4 分页与分段的对比</h3><ul><li>页是信息的<strong>物理单位</strong>，分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，对用户不可见。</li><li>段是信息的<strong>逻辑单位</strong>，分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个<strong>逻辑模块</strong>的信息。分段对用户是可见的，用户编程时需要显式地给出段名。</li><li>页的大小固定且由系统决定，段的长度却不固定，决定于用户编写的程序。</li><li>分页的用户进程地址空间是<strong>一维</strong>的，程序员只需给出一个记忆符即可表示一个地址。</li><li>分段的用户进程地址空间是<strong>二维</strong>的，程序员再表示一个地址时，既要给出<strong>段名</strong>，也要给出<strong>段内地址</strong>。</li><li>分段比分页更容易实现信息的共享和保护。不能被修改的代码称为纯代码或可重入代码（不属于临界资源）。</li></ul><table><thead><tr><th align="center">类型</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">分页管理</td><td align="center">内存空间利用率高，<strong>不会产生外部碎片</strong>，只会有少量的<strong>页内碎片</strong>(分配给进程的最后一个页面不一定100%被利用)</td><td align="center">不方便按照逻辑模块实现信息的共享和保护</td></tr><tr><td align="center">分段管理</td><td align="center">很方便地按照<strong>逻辑模块</strong>实现信息的共享和保护</td><td align="center">如果段长过大，为其分配很大的连续空间会很不方便；另外，段式管理<strong>会产生外部碎片</strong></td></tr></tbody></table><h2 id="6-7-段页式管理方式"><a href="#6-7-段页式管理方式" class="headerlink" title="6.7 段页式管理方式"></a>6.7 段页式管理方式</h2><p>​段页式系统的逻辑地址结构由&#x3D;&#x3D;<strong>段号、页号、页内地址（页内偏移量）</strong>&#x3D;&#x3D;组成；用户只需提供<strong>段号和段内地址</strong>，系统自动将段内地址拆分为页号和页内偏移量，因此段页式管理的地址结构是<strong>二维</strong>的。段页式存储管理<strong>存在内碎片，无外碎片</strong>[因为页表的存放地址可以不连续]。</p><img src="C:\Users\Qian Zeshu\AppData\Roaming\Typora\typora-user-images\image-20220604214034386.png" alt="image-20220604214020524" style="zoom: 25%;" /><ul><li><p>设置<strong>段表地址寄存器</strong>，保存当前执行<strong>进程段表的起始地址和段表的长度</strong>。段表和页表的构成如下：</p><ul><li>每个段对应一个<strong>段表项</strong>。各段表项长度相同，由段号（隐含）、<strong>页表长度、页表存放地址</strong>组成（<strong>与分段存储管理不同</strong>）；</li><li>每个页对应一个<strong>页表项</strong>。各页表项长度相同，由页号（隐含）、页面存放的内存块号组成（与分页存储管理相同）。</li></ul></li><li><p>在不引入快表的情况下，访问一个逻辑地址所需访存次数为<strong>3次</strong>，第一次查段表，第二次查页表，第三次访问目标单元。</p></li></ul><blockquote><p>段页式管理方式的基本思想是用分段方法来分配和管理<strong>用户地址空间</strong>，用分页方法来管理<strong>物理存储空间</strong>。</p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220329233851834.png" alt="image-20220329233851834"></p><h1 id="ch7-虚存管理"><a href="#ch7-虚存管理" class="headerlink" title="ch7.虚存管理"></a>ch7.虚存管理</h1><h2 id="7-1-局部性原理-Locality"><a href="#7-1-局部性原理-Locality" class="headerlink" title="7.1 局部性原理(Locality)"></a>7.1 局部性原理(Locality)</h2><ul><li><p><strong>时间局部性</strong>：刚刚访问过的指令或数据，不久又会被再次访问。</p></li><li><p><strong>空间局部性</strong>：刚刚访问过的指令或数据，其邻近单元不久会被访问。</p></li><li><p><strong>顺序局部性</strong>（程序的顺序执行）：</p><p>通常情况下，CPU跟踪程序的执行是按照在主存中的连续地址进行的。只有在遇到转移指令时，才发生跳转。</p></li></ul><h2 id="7-2-虚拟存储器"><a href="#7-2-虚拟存储器" class="headerlink" title="7.2 虚拟存储器"></a>7.2 虚拟存储器</h2><p>定义：从用户角度，将系统可提供的比实际大很多的内存容量，称为虚拟存储器。</p><p>实现方式：请求分页系统、请求分段系统</p><p>硬件支持：页&#x2F;段表扩充，缺页&#x2F;段中断，地址变换</p><p><strong>特征</strong>：</p><ul><li><strong>虚拟性</strong>：即不是物理上而是逻辑上扩充了内存容量</li><li><strong>离散性</strong>：采用离散分配方式</li><li><strong>多次性</strong>：<strong>一个作业分成多次调入主存运行</strong></li><li><strong>对换性</strong>：将得不到运行的程序、数据调至外存交换区</li></ul><p>虚存的优势：</p><ul><li>比物理内存大的程序可以运行，编程人员<strong>无需考虑内存的限制</strong>；</li><li>可以让更多的程序同时运行，<strong>系统吞吐量提高</strong>；</li><li>更容易实现文件共享；</li><li>加载或交换程序到内存所需的I&#x2F;O更少，程序运行更快。</li></ul><blockquote><p>注：</p><p>虚拟内存的容量受计算机<strong>地址位数</strong>的限制。</p></blockquote><h2 id="7-3-请求分页机制"><a href="#7-3-请求分页机制" class="headerlink" title="7.3 请求分页机制"></a>7.3 请求分页机制</h2><h3 id="7-3-1-概述"><a href="#7-3-1-概述" class="headerlink" title="7.3.1 概述"></a>7.3.1 概述</h3><ul><li><p>请求分页机制的英文名为Demand Paging，页面仅在需要的时候加载进入内存。</p></li><li><p><strong>惰性交换器</strong>Lazy swapper——进程驻留在外存，执行时所需要的页面交换到内存。</p></li><li><p>调页程序：pager</p></li><li><p><strong>为进程分配的最小页框数</strong>（物理块数）：3个</p><ul><li>数据段</li><li>代码段（指令）</li><li>间接寻址</li></ul></li><li><p><strong>页表内容</strong>：</p><table><thead><tr><th align="center">页号</th><th align="center">页框号</th><th align="center">&#x3D;&#x3D;状态位P&#x3D;&#x3D;</th><th align="center">&#x3D;&#x3D;访问位A&#x3D;&#x3D;</th><th align="center">&#x3D;&#x3D;修改位M&#x3D;&#x3D;</th><th align="center">外存地址</th></tr></thead></table><p>访问位表示其<strong>是否被访问过</strong>，修改位表示其<strong>是否被修改过</strong>（多为数据）</p></li><li><p><strong>缺页中断机构</strong>与一般中断的2点区别：</p><ul><li>是在指令执行期间，发现<strong>指令&#x2F;数据不在主存</strong>时产生并处理；</li><li>一条指令在执行期间，可能会产生<strong>多次缺页中断</strong>。要求系统能保存多次中断的状态。</li></ul></li><li><p><strong>基本地址变换</strong>：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220325111644497.png" alt="image-20220325111644497"></p></li></ul><h3 id="7-3-2-页面分配与置换策略"><a href="#7-3-2-页面分配与置换策略" class="headerlink" title="7.3.2 页面分配与置换策略"></a>7.3.2 页面分配与置换策略</h3><p><strong>页面分配策略</strong>：</p><ul><li><p>内存记录空闲页框情况——位示图bitmap</p></li><li><p>固定分配：操作系统为每个进程分配一组固定数目的物理块，在进程运行期间不再改变。即，驻留集大小不变</p><blockquote><p>驻留集指请求分页存储管理中<strong>给进程分配的物理块的集合</strong>。</p></blockquote></li><li><p>可变分配：先为每个进程分配一定数目的物理块，在进程运行期间，可根据情况做适当的增加或减少。即，驻留集大小可变</p></li></ul><p><strong>页面置换策略</strong>：</p><ul><li>局部置换：发生缺页时只能选<strong>进程自己的物理块</strong>进行置换。</li><li>全局置换：可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程。</li><li>与分配策略组合，有以下三种算法：<strong>固定分配局部置换、可变分配全局置换、可变分配局部置换</strong></li></ul><table><thead><tr><th align="center"></th><th align="center">局部置换</th><th align="center">全局置换</th></tr></thead><tbody><tr><td align="center">固定分配</td><td align="center">√</td><td align="center">—</td></tr><tr><td align="center">可变分配</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><blockquote><p>注：</p><p>全局置换意味着一个进程拥有的物理块数量必然会改变，因此不可能是固定分配。</p></blockquote><h2 id="7-4-页面置换算法"><a href="#7-4-页面置换算法" class="headerlink" title="7.4 页面置换算法"></a>7.4 页面置换算法</h2><p>在实际操作中，遇到缺页情况可以在下面标记”+”号。</p><h3 id="7-4-1-先进先出置换算法"><a href="#7-4-1-先进先出置换算法" class="headerlink" title="7.4.1 先进先出置换算法"></a>7.4.1 先进先出置换算法</h3><ul><li><p>First In First Out</p></li><li><p>先进入内存的页面，先置换出内存。</p></li><li><p>缺页率高</p></li><li><p>存在&#x3D;&#x3D;<strong>Belady现象</strong>&#x3D;&#x3D;，即分配页框数多，反而缺页率高。</p></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220526003148388.png" alt="image-20220526003148388" style="zoom:50%;" /><h3 id="7-4-2-最佳置换算法-Optimal"><a href="#7-4-2-最佳置换算法-Optimal" class="headerlink" title="7.4.2 最佳置换算法(Optimal)"></a>7.4.2 最佳置换算法(Optimal)</h3><ul><li><p><strong>以后一段很长时间不用的页面先置换</strong></p></li><li><p>理想算法，不能实际实现</p></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220526003249830.png" alt="image-20220526003249830" style="zoom:50%;" /><h3 id="7-4-3-最近最久未使用算法-LRU"><a href="#7-4-3-最近最久未使用算法-LRU" class="headerlink" title="7.4.3 最近最久未使用算法(LRU)"></a>7.4.3 最近最久未使用算法(LRU)</h3><ul><li><p>英文为<strong>L</strong>east <strong>R</strong>ecently <strong>U</strong>sed，<strong>最近很长时间不用的页面先置换</strong></p></li><li><p>在操作中，<strong>若发现要访问的页面在页框内，需要将其放到最前面</strong>；到要置换页框中某个页面时，将最后的移出页框。</p></li><li><p>计算机中的实现</p><ul><li><p><strong>计数法实现</strong>：</p><p>每个页表项设置一个计数器，若页面被访问，则将当前时间复制到计数器中。</p><p>当需要置换时，查找计数器，离当前时间最远的先淘汰。</p></li><li><p><strong>堆栈法实现</strong>：</p><p>维护一个页号的堆栈，当被访问，就将其移动到top位置；</p><p>淘汰堆栈最bottom的页号。</p></li></ul></li></ul><blockquote><p>注：</p><p>若程序本身没有局部性的特征，LRU算法将退化为FIFO算法。</p></blockquote><h3 id="7-4-4-Clock置换算法"><a href="#7-4-4-Clock置换算法" class="headerlink" title="7.4.4 Clock置换算法"></a>7.4.4 Clock置换算法</h3><ul><li><p><strong>LRU近似算法</strong></p></li><li><p><strong>简单Clock NRU</strong>（Not Recently Used）：</p><ul><li><p>内存中所有页面组成<strong>循环队列</strong>（设置指针），当需要置换时，依次检查<strong>访问位</strong>：</p><p>​    为0， 置换；</p><p>​    为1，重置为0，继续检查下一个页面。</p></li><li><p>如访问序列为123412512345，则：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220325115004772.png" alt="image-20220325115004772" style="zoom: 33%;" /></li></ul></li><li><p><strong>改进型Clock算法</strong>：</p><ul><li>考虑到<strong>仅被淘汰过的页面被修改过，才需写回内存</strong>。故在其他条件相同时，应先淘汰未修改过的页面，避免I&#x2F;O操作。</li><li>设置&#x3D;&#x3D;<strong>(淘汰位A,修改位M)</strong>&#x3D;&#x3D;，A&#x3D;1表示近期访问过，M&#x3D;1表示近期修改过，(0,0)应优先淘汰，淘汰优先级为：**&#x3D;&#x3D;(0,0)&#x3D;&#x3D;,(0,1),(1,0),(1,1)**。</li></ul></li></ul><h3 id="7-4-5-其他算法"><a href="#7-4-5-其他算法" class="headerlink" title="7.4.5 其他算法"></a>7.4.5 其他算法</h3><p><strong>最少使用置换算法</strong>（<strong>L</strong>east <strong>F</strong>requently <strong>U</strong>sed）：选择近期使用次数最少的页面淘汰；类似还有最多使用置换算法。</p><p><strong>页面缓冲算法</strong>（Page Buffering Algorithm）：</p><ul><li><p>思想：采用可变分配、局部置换方式。置换算法FIFO，被置换的页按是否被修改过而入系统设置的两个链表队列：修改页面链表、空闲页面链表。</p></li><li><p>如果再次产生缺页中断，首先检查链表队列：</p><p>​    有，<strong>恢复到进程驻留集中</strong>；</p><p>​    无，取空闲页面链表中第一页分配。</p><p>修改页面链表中页面达到一定数量时，<strong>集中回写</strong>，减少I&#x2F;O次数。</p></li></ul><p>[例1]<strong>分页管理系统计算题</strong>：<a href="https://blog.csdn.net/qq_26816591/article/details/51910518">https://blog.csdn.net/qq_26816591/article/details/51910518</a></p><p>[例2]某虚拟存储器的用户空间共有32个页面，每页1KB，主存16KB。假定某时刻系统为用户的第0、1、2、3页分配的物理块号为5、10、4、7，而该用户作业的长度为6页，试将十六进制的虚拟地址093C转物理地址。</p><p>[解]（1）16进制数据：093C</p><p>0                9                3                C</p><p>0000        1001         0011          1100（C&#x3D;12）</p><p>转成2进制数据：0000-1001-0011-1100</p><p>（2）确定页号和业内地址</p><p>页内地址 看 每页大小：1KB&#x3D;2^10B,</p><p>页号 看 页的数量：32&#x3D;2^5</p><p>取16进制的后10位作为页地址。→01-0011-1100</p><p>取16进制的前5位作为页号。→0000-1</p><p>（3）页号变块号</p><p>2进制转10进制</p><p>页号0000-1 转成 页号1</p><p>页号1查表得块号10</p><p>（4）计算物理地址位数</p><p>主存16KB&#x3D;2^14B，物理地址14位&#x3D;块号+页地址</p><p>块号10        转2进制        1010</p><p>093C转物理地址：</p><p>1010  01-0011-1100</p><h2 id="7-5-请求分页系统性能分析"><a href="#7-5-请求分页系统性能分析" class="headerlink" title="7.5 请求分页系统性能分析"></a>7.5 请求分页系统性能分析</h2><h3 id="7-5-1-缺页率与有效访问时间"><a href="#7-5-1-缺页率与有效访问时间" class="headerlink" title="7.5.1 缺页率与有效访问时间"></a>7.5.1 缺页率与有效访问时间</h3><p>有效访问时间（Effective Access Time）：</p><p>EAT&#x3D;$ (1-p)<em>$内存访问时间 +$p</em>$ 缺页中断时间（缺页中断服务时间<br>                                                                             +页面置换出去的时间（可选，若未被修改，直接覆盖即可）<br>                                                                             +缺页读入时间<br>                                                                             +进程恢复执行时间）</p><p>影响缺页率的因素有：</p><ul><li>分配给程序的主存块数</li><li>页面的大小</li><li>程序编制方法</li><li>页面置换算法</li></ul><h3 id="7-5-2-工作集-x2F-驻留集模型"><a href="#7-5-2-工作集-x2F-驻留集模型" class="headerlink" title="7.5.2 工作集&#x2F;驻留集模型"></a>7.5.2 工作集&#x2F;驻留集模型</h3><p><strong>工作集</strong>：指在某段时间间隔里，进程实际访问页面的集合。英文为Working Set Model，是Denning根据程序的局部性理论提出，以解决<strong>缺页率高</strong>的问题。其可用一个二元函数$W(t, \Delta) $来表示：</p><ul><li><p>$t$是当前的<strong>执行时刻</strong></p></li><li><p>$\Delta$称为工作集窗口（Working-set window），即一个<strong>定长</strong>的页面访问的时间窗口（“<strong>时间段</strong>”）；$\Delta$不应过大或过小，过小会导致频繁缺页。</p></li><li><p>$W(t, \Delta)$&#x3D;进程在当前时刻$t$之前的$\Delta$时间窗口（在$t-\Delta$到$t$时间段）当中的所有页面所组成的集合（随着$t$的变化，该集合也在不断地变化）；$W$是$\Delta$的<strong>非降函数</strong>。</p></li><li><p>$|W(t, \Delta)|$为<strong>工作集中包含的页面数</strong></p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220402153133988.png" alt="image-20220402153133988"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220402161021658.png" alt="image-20220402161021658"></p><blockquote><p>[注]</p><p>工作集大小的变化与<strong>程序的局部性</strong>有关，开始局部性较差，工作集急剧上升。</p></blockquote><p><strong>驻留集</strong>：指请求分页存储管理中给进程分配的<strong>物理块</strong>（物理空间）的集合，即进程实际<strong>驻留在内存</strong>当中的页面集合。</p><p>工作集和驻留集不同，驻留集表示当前要访问的页面在内存中的集合，工作集表示当程序运行过程中要访问的页的集合。</p><p>在采用了虚拟存储技术的系统中，<strong>驻留集大小一般小于进程的总大小</strong>。如果一个进程的整个工作集都在内存中，即<strong>驻留集$\supseteq$工作集</strong>，则进程将很顺利的进行，不会造成太多的缺页中断。</p><p>若驻留集太小，会导致缺页频繁，系统要花大量的时间来处理缺页，实际用于进程推进的时间很少；若驻留集太大，又会导致多道程序并发度下降，资源利用率降低。</p><h3 id="7-5-3-抖动现象"><a href="#7-5-3-抖动现象" class="headerlink" title="7.5.3 抖动现象"></a>7.5.3 抖动现象</h3><p>刚刚被换出的页很快又被访问，需再次调入。使进程花费大部分时间进行页面的置换，称进程发生了“抖动”。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220402154437847.png" alt="image-20220402154437847" style="zoom:80%;" /><p>&#x3D;&#x3D;<strong>预防抖动的方法</strong>&#x3D;&#x3D;：</p><ul><li>采用<strong>局部置换</strong>策略，使抖动控制在局部范围</li><li>在CPU调度程序中<strong>引入工作集算法</strong>，控制道数</li><li><strong>调整道数</strong>，使产生缺页频率的平均时间&#x3D;系统处理缺页的平均时间（<strong>L&#x3D;S准则</strong>）</li><li>挂起若干进程</li><li>增大页面大小（页面大小的选择）</li><li>预调页面</li></ul><h2 id="7-6-请求分段机制"><a href="#7-6-请求分段机制" class="headerlink" title="7.6 请求分段机制"></a>7.6 请求分段机制</h2><ul><li>英文名为Demand Segmentation</li><li>段表机制：</li></ul><table><thead><tr><th align="center">段名</th><th align="center">段长</th><th align="center">内存地址</th><th align="center">状态位（该段在不在内存）</th><th align="center">存取方式（可读&#x2F;可写&#x2F;可执行）</th><th align="center">访问位（是否被访问）</th><th align="center">修改位</th><th align="center">增补位（如该段是否可以动态增长）</th><th align="center">外存地址</th></tr></thead></table><ul><li><strong>缺段中断</strong>：在一条指令的执行期间，产生并处理中断，且可能产生多次缺段中断。可采用紧凑技术&#x2F;淘汰几个段（多为代码段）。</li><li><strong>请求分段的共享和保护</strong>：<ul><li>共享方式为：每个共享进程段表中，在相应共享段表目中，指向共享段在内存的起址即可。系统实现方式为：<ul><li>设置<strong>共享段表</strong>&#x2F;现行分段表</li><li>建立<strong>共享段分配、回收</strong>操作过程</li></ul></li><li>完善分段保护机制，有3种常用措施：<strong>越界检查，存取控制检查，环保护机构</strong>（即软件层次结构设置优先规则，外环访问内环需系统调用，内环可以直接访问外环）。</li></ul></li></ul><h1 id="ch8-文件系统接口"><a href="#ch8-文件系统接口" class="headerlink" title="ch8.文件系统接口"></a>ch8.文件系统接口</h1><h2 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h2><h3 id="8-1-1-文件的概念及逻辑结构"><a href="#8-1-1-文件的概念及逻辑结构" class="headerlink" title="8.1.1 文件的概念及逻辑结构"></a>8.1.1 文件的概念及逻辑结构</h3><p>​     文件是具有文件名的一组相关信息的集合，是一个由操作系统定义和实现的抽象数据类型；其组成的大小关系为<strong>文件—–记录—–数据项（组成文件的原子性数据，如类型、值）</strong>。</p><blockquote><ul><li><strong>数据项</strong>：最低级的数据组织形式</li><li><strong>记录</strong>：一组相关的数据项的集合</li><li><strong>文件</strong>：由创建者所定义的一组相关信息的集合</li></ul></blockquote><p>​  文件逻辑结构是指从用户观点出发，所观察到的文件组织形式。它是用户可以直接处理的数据和结构，独立于物理特性。</p><p>​  <strong>文件逻辑结构</strong>分为以下几种结构：</p><ul><li><strong>无结构</strong>：字或字节的序列（<strong>字符流式文件</strong>，如记事本）</li><li><strong>简单记录结构</strong>：行、<strong>固定长度</strong>记录文件、<strong>可变长度</strong>记录文件</li><li>复杂结构：<ul><li>格式化文档</li><li>可重定位加载文件</li></ul></li></ul><h3 id="8-1-2-有结构文件分类"><a href="#8-1-2-有结构文件分类" class="headerlink" title="8.1.2 有结构文件分类"></a>8.1.2 有结构文件分类</h3><p>​      操作系统、程序决定文件的逻辑结构。有结构文件按记录的组织形式可分为：</p><p><strong>顺序文件</strong>：</p><ul><li>文件记录的排列、存取按顺序进行。</li><li>适用场合：对记录<strong>批量存取</strong>（大量文件的备份）；顺序介质（磁带）</li><li>缺点：增删不方便、读取慢、查找性能差</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401162944282.png" alt="image-20220401162944282"></p><p><strong>索引文件</strong>：</p><ul><li>为变长记录文件建立一张索引表（或多级索引），用户通过关键字访问记录。</li><li>适用场合：对信息处理及时性要求高的场合。</li><li>优点：随机存取</li><li>缺点：索引需要额外开销</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401163021704.png" alt="image-20220401163021704"></p><p><strong>索引顺序文件</strong>：</p><p>顺序文件记录分组，并建立索引表，索引表项为<strong>各组的第一记录指针</strong>。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401163047706.png" alt="image-20220401163047706"></p><h3 id="8-1-3-文件属性及操作"><a href="#8-1-3-文件属性及操作" class="headerlink" title="8.1.3 文件属性及操作"></a>8.1.3 文件属性及操作</h3><p>​文件的属性有：</p><ul><li>名称：人类可读形式保存的唯一信息</li><li>标识符：唯一标记文件系统的文件，通常是数字</li><li>类型：支持不同类型文件的系统所需要的信息</li><li>位置：指向设备与设备上文件位置的指针</li><li>大小：当前文件的尺寸及<strong>最大尺寸</strong><ul><li><strong>总大小</strong>：文件内容的总大小</li><li><strong>总计文件大小</strong>：文件信息和文件内容的总大小</li></ul></li><li><strong>保护</strong>：确定谁能读写执行操作的访问控制信息<ul><li>可读</li><li>可写</li><li>可执行</li></ul></li><li>时间、日期和<strong>用户标识</strong>（谁创建、修改）</li><li>扩展文件属性</li></ul><p>​        文件的操作有：</p><ul><li><p>对<strong>记录</strong>的操作：增、删、改、查；</p></li><li><p>对<strong>文件本身</strong>的操作：</p><ul><li><strong>新建</strong></li><li><strong>读、写</strong></li><li>查找</li><li>删除</li><li>截断（truncate，分成两个文件）</li><li><strong>打开</strong>、<strong>关闭</strong>文件——把文件属性等信息调入内存</li><li>设置读写位置</li></ul></li></ul><h3 id="8-1-4-文件类型"><a href="#8-1-4-文件类型" class="headerlink" title="8.1.4 文件类型"></a>8.1.4 文件类型</h3><p>文件按不同划分方式可以分为：</p><ul><li>按用途分：<strong>系统文件</strong>、<strong>用户文件</strong>、<strong>库文件</strong>（标准子程序、常用例程，.lib）</li><li>按存取控制属性：只读文件、读写文件、只执行文件</li><li>按文件逻辑结构：有结构、无结构文件</li><li>按文件物理结构：顺序、链接、索引文件</li><li>按文件中数据形式：源文件、目标文件、可执行文件</li><li>按信息存储的期限：临时文件、永久文件、档案文件</li></ul><p><strong>UNIX系统内的文件类型</strong>：</p><ul><li><strong>普通文件</strong>（r）</li><li><strong>目录文件</strong>（d）</li><li>特殊文件（s），即<strong>设备文件</strong>，分为<strong>块设备文件和字符型设备文件</strong><ul><li>块设备文件描述的是以随机访问的数据库为单元的设备。在打开一个块设备文件后。可以直接去访问它的某一个数据块，而不用管其文件系统的内部结构，如硬盘。</li><li>字符设备文件指以字符流方式进行操作的设备，如打印机、调制解调器。</li></ul></li></ul><h3 id="8-1-5-文件系统的结构和功能"><a href="#8-1-5-文件系统的结构和功能" class="headerlink" title="8.1.5 文件系统的结构和功能"></a>8.1.5 文件系统的结构和功能</h3><p>​文件系统是用于操纵和管理各种文件，方便用户使用文件的软件集合。</p><p>​<strong>文件系统的功能</strong>有：</p><ul><li><strong>文件管理</strong>（创建&#x2F;删除文件，对文件的各种操作等）</li><li><strong>目录管理</strong>（创建&#x2F;删除目录项，权限验证等）</li><li><strong>文件存储空间的管理</strong></li><li><strong>文件的共享和保护</strong></li><li><strong>提供方便的接口</strong>（如实现按名存取，文件系统调用等）</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401165537144.png" alt="image-20220401165537144"></p><h2 id="8-2-文件访问方法"><a href="#8-2-文件访问方法" class="headerlink" title="8.2 文件访问方法"></a>8.2 文件访问方法</h2><h3 id="8-2-1-顺序访问"><a href="#8-2-1-顺序访问" class="headerlink" title="8.2.1 顺序访问"></a>8.2.1 顺序访问</h3><p>文件信息按顺序（如一条一条记录）进行处理，用于归档等场合。</p><ul><li>Read_next()：读取文件的下一部分</li><li>Write_next()</li><li>reset</li></ul><h3 id="8-2-2-直接访问"><a href="#8-2-2-直接访问" class="headerlink" title="8.2.2 直接访问"></a>8.2.2 直接访问</h3><p>允许程序按任意顺序进行读取和写入，用于磁盘等场合。磁盘上的文件可以通过顺序或直接访问。</p><ul><li>Read(n)：读取文件的第n条记录</li><li>Write(n)</li><li>Position_file(n)：<strong>定位（查找）文件</strong></li></ul><h2 id="8-3-文件目录结构"><a href="#8-3-文件目录结构" class="headerlink" title="8.3 文件目录结构"></a>8.3 文件目录结构</h2><h3 id="8-3-1-概述"><a href="#8-3-1-概述" class="headerlink" title="8.3.1 概述"></a>8.3.1 概述</h3><p>​文件目录结构是用于有效管理和组织文件的结构。借助于文件目录，可将每个文件的符号名与其所在存储空间地址联系起来。目录结构和文件都驻留在外存（如磁盘）上。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401170845668.png" alt="image-20220401170845668" style="zoom:80%;" /><p>​  对目录管理的要求有：</p><ul><li><strong>实现“按名存取”</strong>（目录的主要作用）</li><li><strong>有较高的目录检索速度：合理组织文件目录</strong></li><li><strong>允许文件重名</strong></li><li><strong>提供文件共享功能</strong></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401170902622.png" alt="image-20220401170902622" style="zoom: 80%;" /><ul><li><p>文件的地址以其<strong>磁盘位置</strong>开始。</p></li><li><p>设备目录需要提供以下信息：名称、类型、地址、当前长度、最大长度、最后访问时间、最后更新时间、创建者，保护信息等。</p></li><li><p>对目录的操作有：创建、删除、重命名、查找、列表内容、遍历文件系统（ls）、复制、<strong>设置目录权限</strong>等。</p></li></ul><h3 id="8-3-2-常见目录结构"><a href="#8-3-2-常见目录结构" class="headerlink" title="8.3.2 常见目录结构"></a>8.3.2 常见目录结构</h3><h4 id="8-3-2-1-单级目录结构"><a href="#8-3-2-1-单级目录结构" class="headerlink" title="8.3.2.1 单级目录结构"></a>8.3.2.1 单级目录结构</h4><ul><li>Single Level Directory</li><li>整个系统只建立一张目录表，为每个文件分配一个目录项。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401171502807.png" alt="image-20220401171502807"></p><ul><li><p>优点：</p><ul><li>空间开销小</li><li>可以实现“按名存取”</li></ul></li><li><p>缺点：</p><ul><li>查找速度慢（<strong>线性表需遍历</strong>）： N个目录，平均查找N&#x2F;2个目录项</li><li>不允许重名</li><li>不能实现共享</li></ul></li></ul><h4 id="8-3-2-2-两级目录结构"><a href="#8-3-2-2-两级目录结构" class="headerlink" title="8.3.2.2 两级目录结构"></a>8.3.2.2 两级目录结构</h4><ul><li>Two-Level Directory</li><li>系统建立一张主文件目录MFD，为每个用户建立用户文件目录UFD，每个用户文件目录在MFD中分配一个目录项。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401171849310.png" alt="image-20220401171849310"></p><ul><li><p>优点：</p><ul><li><p><strong>提高了查找速度</strong>：</p><p>设共n个用户，每个用户m个文件，则二级目录需查找$(n+m)&#x2F;2$个目录项（若n&#x3D;m，则共n个）；</p><p>而如果设一级目录，则需查找$n*m&#x2F;2$个目录项（若n&#x3D;m，共$n^{2}&#x2F;2$个）。</p></li><li><p><strong>不同用户文件允许重名</strong></p></li></ul></li><li><p>缺点：不能文件共享。</p></li></ul><h4 id="8-3-2-3-树形目录结构"><a href="#8-3-2-3-树形目录结构" class="headerlink" title="8.3.2.3 树形目录结构"></a>8.3.2.3 树形目录结构</h4><ul><li>Tree-Structured Directories，是目前广泛采用的文件目录结构。</li><li>在两级目录基础上，允许用户创建自己的子目录并组织其文件。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401172443734.png" alt="image-20220401172443734"></p><ul><li>路径名：从根目录到文件之间的通路。</li><li>当前目录：<ul><li><strong>相对路径</strong>：从<strong>当前目录</strong>到文件之间的路径</li><li><strong>绝对路径</strong>：从根目录到文件之间的路径</li></ul></li><li>目录的增加和删除：<ul><li>增加：无重名 <code>mkdir &lt;dir-name&gt;</code></li><li>删除：不删除非空目录&#x2F;可删除非空目录</li></ul></li><li>优点：<ul><li>有效提高对目录的检索速度</li><li>允许文件重名</li><li>便于实现文件共享</li></ul></li></ul><h4 id="8-3-2-4-无环图目录结构"><a href="#8-3-2-4-无环图目录结构" class="headerlink" title="8.3.2.4 无环图目录结构"></a>8.3.2.4 无环图目录结构</h4><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401172903967.png" alt="image-20220401172903967"></p><ul><li><p>Acyclic-Graph Directories</p></li><li><p>目录结构中有共享的子目录和文件，如“快捷方式”。</p></li><li><p>优点：</p><ul><li>可共享：链接方式实现、复制文件信息</li><li>更灵活</li><li>遍历图相对简单</li></ul></li><li><p>其他需要考虑的问题：</p><ul><li>多个绝对路径名？——<strong>别名问题</strong></li><li>删除——<strong>悬挂指针问题</strong></li></ul></li></ul><h4 id="8-3-2-5-通用文件结构"><a href="#8-3-2-5-通用文件结构" class="headerlink" title="8.3.2.5 通用文件结构"></a>8.3.2.5 通用文件结构</h4><ul><li>General Graph Directory</li><li><strong>允许系统中存在环</strong>。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401173005616.png" alt="image-20220401173005616"></p><ul><li>如何保证无环结构：<ul><li>仅可link到文件，不能link到目录</li><li>增加新链接时，采用检测算法</li></ul></li><li>缺点：<ul><li>查找时对环要进行必要处理</li><li>删除：garbage collection</li></ul></li></ul><h2 id="8-4-文件共享"><a href="#8-4-文件共享" class="headerlink" title="8.4 文件共享"></a>8.4 文件共享</h2><p>文件共享是指多个用户（进程）共享同一份文件，系统只保存文件的一个副本。</p><h3 id="8-4-1-早期文件共享方法"><a href="#8-4-1-早期文件共享方法" class="headerlink" title="8.4.1 早期文件共享方法"></a>8.4.1 早期文件共享方法</h3><p><strong>基本文件目录</strong>：</p><ul><li>实现：将源文件目录分为<strong>基本文件目录BFD和符号文件目录SFD</strong></li><li>BFD：每个文件&#x2F;目录有一个目录项，文件标识数、其他信息</li><li>SFD：每个用户一个，目录项只是其文件名和文件标识数</li><li><strong>提高文件访问速度</strong>：系统设置活动文件表AFT，用户设置活动名字表ANT；用户执行OPEN操作时，将SFD内容入ANT，BFD内容入AFT。</li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220401230941768.png" alt="image-20220401230941768" style="zoom:80%;" /><p><strong>连访法</strong>：</p><ul><li>建立目录间的链接，使目录项直接指向另一个目录项</li><li>在文件说明中增设“连访”属性，标识文件说明中的<strong>物理地址</strong>是一文件或目录项的指针</li><li><strong>增设“用户计数”标识共享文件的用户数</strong>（当用户计数count&#x3D;0时，才能删除文件内容）</li></ul><p><strong>绕弯路法</strong>：</p><p>实现：系统设置当前目录指针，用户对当前目录下的文件直接访问，当需访问其它目录下文件时，通过指定路径完成。</p><h3 id="8-4-2-现今常用文件共享方式"><a href="#8-4-2-现今常用文件共享方式" class="headerlink" title="8.4.2 现今常用文件共享方式"></a>8.4.2 现今常用文件共享方式</h3><p>多个用户（进程）共享同一份文件，系统只保存文件的一个副本。</p><p><strong>基于索引节点的共享方式</strong>：</p><ul><li>实现：设置索引结点，存储文件的物理地址、链接计数（共享计数）及其它文件属性；文件目录只包括文件名和该文件<strong>对应索引结点的指针</strong>。</li><li>优点：任何对索引结点内容的修改对其它共享用户都是透明的。</li></ul><p><img src="https://img-blog.csdn.net/20180213170350528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGllcm1pbmdfXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>利用符号链实现文件共享</strong>：</p><ul><li>实现：设B为了共享C的文件F，在B中创建一个<strong>Link类型的新文件</strong>，新文件目录中只包含被链接文件F的路径名，称这种链接方法为<strong>符号链接</strong>(symbolic Linking)。</li><li>说明：只有文件主人的目录中有文件索引结点的指针，其它用户目录中只有路径名。</li></ul><blockquote><p>试比较维护文件单一副本提供文件共享和为每个共享文件的用户维护一个文件副本两种方式的优缺点。</p><p>对于单个副本的情况，对同一文件的并行更新可能导致用户获得不正确的信息，并使文件处于错误状态；</p><p>对于多个副本的情况，会带来一些存储浪费，不同副本之间还存在一致性问题。</p></blockquote><h2 id="8-5-文件保护"><a href="#8-5-文件保护" class="headerlink" title="8.5 文件保护"></a>8.5 文件保护</h2><h3 id="8-5-1-概述"><a href="#8-5-1-概述" class="headerlink" title="8.5.1 概述"></a>8.5.1 概述</h3><ul><li><strong>影响文件系统安全性的主要因素</strong><ul><li>人为因素</li><li>系统因素：系统部分软件、介质故障</li><li>自然因素：存放在磁盘中的数据，随时间变化发生溢出或消失</li></ul></li><li><strong>文件保护功能</strong>：<ul><li>防止未核准用户存取文件（<strong>文件保密</strong>）</li><li>防止一个用户冒充另一个用户存取文件</li><li>防止核准用户误用文件</li></ul></li><li><strong>保护措施</strong>：<ul><li><strong>存取控制机制</strong></li><li><strong>容错技术</strong></li><li><strong>后备系统</strong></li></ul></li></ul><h3 id="8-5-2-存取控制机制的概念及实现"><a href="#8-5-2-存取控制机制的概念及实现" class="headerlink" title="8.5.2 存取控制机制的概念及实现"></a>8.5.2 存取控制机制的概念及实现</h3><h4 id="8-5-2-1-保护域"><a href="#8-5-2-1-保护域" class="headerlink" title="8.5.2.1 保护域"></a>8.5.2.1 保护域</h4><p>指<strong>进程可访问的对象</strong>。</p><ul><li><strong>访问权</strong>：一个进程对某对象可执行操作的权限，表示为**有序对&#x3D;&#x3D;(对象名,权集)&#x3D;&#x3D;**，权限有R（可读）、W（可写）、E（可执行）</li><li><strong>域</strong>：一组对象访问权的集合</li><li><strong>进程与域的联系方式</strong>：<ul><li><strong>静态联系</strong>：进程可用资源集是固定的</li><li><strong>动态联系</strong>：进程可用资源集是可变的，需提供<strong>域转换机制</strong>、<strong>read to know须知原则</strong>。</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220405220946203.png" alt="image-20220405220946203"></p><h4 id="8-5-2-2-访问矩阵-Access-Matrix"><a href="#8-5-2-2-访问矩阵-Access-Matrix" class="headerlink" title="8.5.2.2 访问矩阵(Access Matrix)"></a>8.5.2.2 访问矩阵(Access Matrix)</h4><p>描述域及所属对象的矩阵（<strong>Lampson矩阵</strong>）。</p><ul><li>访问矩阵中对象访问权<strong>由资源拥有者或管理者确定</strong>。</li><li>通过设置<strong>域间切换开关</strong>实现进程与域的动态联系。</li><li>为满足修改的需要，增设：<ul><li><strong>拷贝权</strong>（权限copy）</li><li><strong>所有权</strong>（标明owner）</li><li><strong>控制权</strong></li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220405221959274.png" alt="image-20220405221959274"></p><p><strong>拷贝权的应用</strong>：将具有拷贝权的对象访问权拷贝到其他域中，使其他域中进程对同一对象<strong>具有相同访问权</strong>。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220405222619975.png" alt="image-20220405222619975"></p><ul><li><p>访问矩阵为稀疏矩阵，所以实现上可以采用：</p><ul><li><strong>访问控制表</strong>(Access Control List)——按列划分，用**(域,权集)<strong>表示，设置到</strong>文件对象<strong>中（文件[属性]控制块</strong>FCB**）</li><li><strong>权能表</strong>(Access Capability List)——按行划分，用**(对象,权集)<strong>表示，设置到</strong>进程控制块PCB**中</li></ul><p>对一个文件的访问，常由用户访问权限和文件属性共同限制。</p></li><li><p><strong>文件拥有者对文件进行保护</strong>：</p><ul><li>访问模式：读、写、执行</li><li>用户分类：文件拥有者（owner）、和文件同属于一组的用户（group）、其他用户（other）</li><li><strong>构成9位权限位</strong></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406000243394.png" alt="image-20220406000243394" style="zoom:67%;" /></li></ul><p>​        文件系统是所有文件、目录的集合，操作系统一般采用<strong>层次型模型</strong>对文件系统进行管理。<strong>分级安全管理</strong>有如下几个层次：</p><ul><li><strong>系统级</strong>安全管理：注册、登录</li><li><strong>用户级</strong>安全管理：用户分类、文件访问权限</li><li><strong>目录级</strong>安全管理：文件目录访问权限、用户分别设置</li><li><strong>文件级</strong>安全管理：每个文件访问存取控制权限机制</li></ul><h1 id="ch9-文件系统实现"><a href="#ch9-文件系统实现" class="headerlink" title="ch9.文件系统实现"></a>ch9.文件系统实现</h1><h2 id="9-1-磁盘的结构及功能实现"><a href="#9-1-磁盘的结构及功能实现" class="headerlink" title="9.1 磁盘的结构及功能实现"></a>9.1 磁盘的结构及功能实现</h2><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220404181723340.png" alt="image-20220404181723340"></p><ul><li>磁盘的表面被划分成一个个<strong>磁道</strong>（track），一个磁道又被划分成一个个<strong>扇区</strong>（sector），可以给每个扇区进行编号，各个扇区存放的数据量相同（如1KB）。由于最内侧磁道上的扇区面积最小，因此<strong>数据密度最大</strong>。</li><li>一个盘片可能有两个<strong>盘面</strong>；所有的磁头都是连在同一个磁臂上的，所有磁头“共进退”。所有盘面中相对位置相同的磁道（如上图的三个蓝色磁道）组成<strong>柱面</strong>。</li><li>可用**(柱面号,盘面号,扇区号)**来定位任意一个“磁盘块”。根据该地址可以读取一个”块“：<ul><li>根据”柱面号“移动磁臂，让磁头指向指定柱面</li><li>激活指定盘面对应的磁头</li><li>磁盘旋转的过程中，指定的扇区会从磁头下面划过，由此完成对指定扇区的读&#x2F;写。</li></ul></li></ul><h2 id="9-2-磁盘访问时间"><a href="#9-2-磁盘访问时间" class="headerlink" title="9.2 磁盘访问时间"></a>9.2 磁盘访问时间</h2><ul><li><strong>寻道时间$Ts$</strong>(主导磁盘读写时间的因素)</li></ul><p>移动<strong>磁臂</strong>到预期读取的柱面（磁道）所需要的时间。假设移动（<strong>跨越</strong>）一个柱面（磁道）所需时间为t，需要移动n个磁道，则$Ts&#x3D;nt$。</p><ul><li><strong>旋转延迟时间</strong>$Tr$</li></ul><p>磁盘<strong>旋转</strong>使<strong>磁头</strong>定位到<strong>目标扇区</strong>所需要的时间，设磁盘转速为$r$（单位：转&#x2F;秒 或 转&#x2F;分），$1&#x2F;r$为转一圈需要的时间，找到目标扇区平均需要<strong>转半圈</strong>，故$Tr&#x3D;(1&#x2F;2)<em>(1&#x2F;r)&#x3D;1&#x2F;2r$。若前面单位为分，后面单位为秒，则需要$Tr&#x3D;30&#x2F;r(s)$（如转换成ms还需要再</em>1000）。</p><ul><li><strong>数据传输时间$Tt$</strong></li></ul><p>从磁盘读出或向磁盘写入数据所经过的时间，设传输的字节总数$Total$，磁盘转速为$r$转&#x2F;分，一转的字节数（每个磁道上的字节数）为$b$；则有：每个磁道可以存$b$个字节，则$Total$字节的数据需要$Total&#x2F;b$个磁道才能存储。而<strong>读&#x2F;写一个磁道所需时间刚好是转一圈所需要的时间</strong>$1&#x2F;r$，则$Tt&#x3D;读写一个磁道时间*磁道数&#x3D;Total&#x2F;rb$。</p><p>总平均存取时间为三个时间之和。</p><p>**[例]**设某磁盘平均寻道时间为10ms，转速为10000r&#x2F;m，每个磁道有320个扇区，每个扇区512字节。求读取一个包含2560个扇区、大小为1.2MB的文件所需的时间。</p><ul><li>假设文件<strong>顺序存储</strong>：</li></ul><p>$Ts&#x3D;10ms$，$Tr&#x3D;3ms$，读取320个扇区的时间$Tt1&#x3D;1&#x2F;r*60000&#x3D;6ms$ ，则$T_{总}&#x3D;19+7×9&#x3D;82ms$；（每次换道还需旋转找到该磁道的第一号扇区）</p><ul><li>假设文件<strong>随机存储</strong>：</li></ul><p>$T_{总}&#x3D;2560×(10+3+60000&#x2F;10000&#x2F;320)&#x3D;33328ms$（每个扇区中的数据传输时间为：1&#x2F;r(读一磁道) * 1&#x2F;320(读一扇区)[*<strong>60000是分与微秒的单位换算</strong>]）。</p><blockquote><p>[注]</p><p>文件内容所占用的空间要比真实的文件所占用空间要小，<strong>扇区是磁盘读写的最小单位</strong>。</p></blockquote><h2 id="9-3-磁盘调度算法"><a href="#9-3-磁盘调度算法" class="headerlink" title="9.3 磁盘调度算法"></a>9.3 磁盘调度算法</h2><p>目标：<strong>最小化寻道时间</strong>。</p><h3 id="9-3-1-先来先服务FCFS"><a href="#9-3-1-先来先服务FCFS" class="headerlink" title="9.3.1 先来先服务FCFS"></a>9.3.1 先来先服务FCFS</h3><p>英文为First Come First Served</p><p>思想：选择等待队列中最先到达的访问请求，作为下一次的访问对象。</p><p>假设磁盘请求序列为55, 58, 39, 18, 90, 160, 150, 38, 184 （柱面号），总的柱面号为0-199，当前磁头位置在100号柱面。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406103231369.png" alt="image-20220406103231369"></p><h3 id="9-3-2-最短寻道时间优先SSTF"><a href="#9-3-2-最短寻道时间优先SSTF" class="headerlink" title="9.3.2 最短寻道时间优先SSTF"></a>9.3.2 最短寻道时间优先SSTF</h3><p>英文为Shortest Seek Time First</p><p>思想：选择等待队列中离当前磁道最近的访问请求，作为下一次的访问对象。注意此算法是<strong>局部优</strong>，最终不一定是最优的。</p><p>假设磁盘请求序列为55, 58, 39, 18, 90, 160, 150, 38, 184 （柱面号），总的柱面号为0-199，当前磁头位置在100号柱面。</p><p>优点：吞吐量大，任务平均响应时间更快；</p><p>缺点：任务响应机会不均等（<strong>低磁道、高磁道两边的请求无限滞后</strong>）。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406103401411.png" alt="image-20220406103401411"></p><h3 id="9-3-3-扫描算法"><a href="#9-3-3-扫描算法" class="headerlink" title="9.3.3 扫描算法"></a>9.3.3 扫描算法</h3><ul><li><strong>扫描算法SCAN</strong>（也称电梯调度法）：</li></ul><p>思想：选择等待队列中离当前磁头<strong>移动方向最近</strong>的访问请求，作为下一次的访问对象。</p><p>假设磁盘请求序列为55, 58, 39, 18, 90, 160, 150, 38, 184 （柱面号），总的柱面号为0-199，当前磁头位置在100号柱面，设磁头向磁道增加的方向移动。</p><p>原始算法需到最高磁道才会返回，改进LOOK则到<strong>序列中最高的磁道</strong>后即返回。题目中扫描算法默认是改进LOOK算法。</p><p>缺点：存在<strong>armstickiness（磁臂黏着）现象</strong>，一个或多个进程反复请求某个磁道，从而垄断整个磁道，导致”饥饿“。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406104403905.png" alt="image-20220406104403905"></p><ul><li><strong>扫描算法C-SCAN</strong>：</li></ul><p>思想：单向扫描，选择等待队列中离当前磁头移动方向最近的访问请求，作为下一次的访问对象，直到该方向最后一个请求，<strong>反向</strong>。</p><p>假设磁盘请求序列为55, 58, 39, 18, 90, 160, 150, 38, 184 （柱面号），总的柱面号为0-199，当前磁头位置在100号柱面，设磁头向磁道增加的方向移动。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406105333227.png" alt="image-20220406105333227"></p><ul><li><strong>N步扫描算法N-SCAN</strong>：</li></ul><p>思想：将磁盘请求队列分为若干长度为N的子队列，并按FCFS算法依次处理这些队列，在处理每一个队列时，采用SCAN算法。(当N&#x3D;1时等价于先来先服务算法，N为无穷时等价于SCAN算法)</p><p>假设磁盘请求序列为55, 58, 39, 18, 90, 160, 150, 38, 184 （柱面号），当前磁头位置在100号柱面，设磁头向磁道增加的方向移动，采用N&#x3D;3的N步扫描算法。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220406105830973.png" alt="image-20220406105830973"></p><ul><li><strong>FSCAN扫描算法</strong>：</li></ul><p>思想：将磁盘请求队列分为2个子队列，其中一个为当前所有请求构成的队列，另一个为扫描期间新到达的请求构成的队列，并按N步扫描处理。</p><p>[总结]<strong>各种算法比较</strong>：</p><ul><li>SSTF较为常用</li><li>SCAN和C-SCAN在<strong>负载较重的情况</strong>（输入&#x2F;输出任务较多）下性能更好</li><li>性能的取得一般依赖请求序列，而请求序列与文件分配方式相关</li><li>SSTF和LOOK常会选为缺省算法</li></ul><h2 id="9-4-文件物理结构"><a href="#9-4-文件物理结构" class="headerlink" title="9.4 文件物理结构"></a>9.4 文件物理结构</h2><p>分为<strong>顺序结构、链接结构、索引结构</strong>。</p><h3 id="9-4-1-连续分配"><a href="#9-4-1-连续分配" class="headerlink" title="9.4.1 连续分配"></a>9.4.1 连续分配</h3><p>文件在外存分配连续的磁盘块。</p><p>优点：支持顺序访问、直接访问；磁头定位时间短，顺序访问速度快。</p><p>缺点：要求连续盘块，易产生碎片（<strong>外碎片</strong>）；需预知文件长度。</p><p>顺序文件中的<strong>逻辑记录</strong>依次存储在连续的磁盘块。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220409173108133.png" alt="image-20220409173108133" style="zoom:67%;" /><h3 id="9-4-2-链接分配"><a href="#9-4-2-链接分配" class="headerlink" title="9.4.2 链接分配"></a>9.4.2 链接分配</h3><h4 id="9-4-2-1-单向链表"><a href="#9-4-2-1-单向链表" class="headerlink" title="9.4.2.1 单向链表"></a>9.4.2.1 单向链表</h4><p>通过磁盘块中的链接指针，将文件所属盘块链成链表。</p><p>隐式链接的实现：文件目录中只给出文件第一、最后一个盘块的指针，其余由链接指针给出。</p><p>显式链接的实现：系统设置一张<strong>链接表（FAT）</strong>，对每个物理块，存放的是<strong>与该物理块链接的下一个物理块号</strong>，文件目录中保存第一块的盘块号。</p><blockquote><p>文件分配表<strong>FAT</strong>(<strong>F</strong>ile <strong>A</strong>llocation <strong>T</strong>able)是用来描述文件系统内存储单元的分配状态及文件内容的前后链接关系的表格</p></blockquote><p>缺点：不支持直接访问，FAT需要磁盘空间。</p><p><strong>串联&#x2F;链接文件</strong>中的逻辑记录存储的磁盘块中设指针指向下一条记录所在物理块号。</p><p>优点：简单、记录数可任意增减；</p><p>缺点：查找只能<strong>单向查找</strong>，不能直接找某个磁盘块；可靠性差（1个出错整个文件的存储均会出现问题）；磁盘块中会少一个<strong>链接指针对应的空间</strong>（链接指针占用的空间）。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220409173441607.png" alt="image-20220409173441607" style="zoom: 80%;" /><h4 id="9-4-2-2-异或双向链表"><a href="#9-4-2-2-异或双向链表" class="headerlink" title="9.4.2.2 异或双向链表"></a>9.4.2.2 异或双向链表</h4><p>设文件A有三个记录，存储在4，12，8三个物理块中。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220410104450361.png" alt="image-20220410104450361" style="zoom:67%;" /><p>查找过程：</p><ul><li><p><strong>向下查找</strong>：本记录链表指针值与上记录块号“异或”</p></li><li><p><strong>向上查找</strong>：本记录链表指针值与下记录块号“异或”</p></li></ul><p>付出时间（计算）代价。</p><h3 id="9-4-3-索引分配"><a href="#9-4-3-索引分配" class="headerlink" title="9.4.3 索引分配"></a>9.4.3 索引分配</h3><p>建立索引表保存文件所分配的磁盘块号。</p><ul><li><p><strong>单级索引分配</strong>：只有一个磁盘块存放索引表</p></li><li><p><strong>多级索引分配</strong>：<strong>多个磁盘块存放索引表</strong></p></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220410104735236.png" alt="image-20220410104735236" style="zoom: 80%;" /><ul><li><strong>混合索引分配</strong>：结合直接地址和多级索引分配的方式</li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220410104743229.png" alt="image-20220410104743229" style="zoom: 80%;" /><ul><li><strong>索引文件</strong>：每个索引文件建立一张索引表，每一个表目指向记录所在的物理块号。</li></ul><p>​优点：可支持直接访问、顺序访问；无外部碎片；</p><p>​缺点：索引表需要额外开销。</p><p><strong>【例】</strong>某文件有1000条记录，文件采用索引分配，设每一个盘块存放一个记录，每一盘块可以存放10个索引表目。</p><p>（1）保存该文件需要建立几级索引？（2）共需要多少磁盘块？</p><p><strong>【解】</strong>（1）三级索引；（2）共需要1+10+100+1000&#x3D;1111块。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220410105313224.png" alt="image-20220410105313224"></p><ul><li><strong>索引顺序文件</strong>是索引文件和顺序文件思想的结合。索引顺序文件中，同样会为文件建立一张索引表，但不同的是：并不是每个记录对应一个索引表项，而是<strong>一组记录对应一个索引表项</strong>。</li></ul><h2 id="9-5-空闲空间管理方法"><a href="#9-5-空闲空间管理方法" class="headerlink" title="9.5 空闲空间管理方法"></a>9.5 空闲空间管理方法</h2><p>主要功能：</p><ul><li>设置相应数据结构，记录空闲存储空间的分配情况</li><li>实现存储空间的分配与回收</li></ul><h3 id="9-5-1-空闲表法"><a href="#9-5-1-空闲表法" class="headerlink" title="9.5.1 空闲表法"></a>9.5.1 空闲表法</h3><p>设定<strong>空白文件目录</strong></p><ul><li>管理：系统为每一个空白文件（一个连续未分配的区域）建立一个目录，每个空闲区有一个表目。</li><li>数据结构：<strong>第一个空白块地址，空白块数</strong></li><li>分配：系统依次扫描空白文件目录，找到一个合适的空白文件分配（方法可用首次适应、最佳适应、最坏适应等算法）</li><li>回收：动态修改空白文件表（合并）</li><li>特点：<ul><li>适用于建立<strong>顺序文件</strong>（连续分配方式）</li><li>当有大量小的空白文件时，效率降低</li></ul></li></ul><h3 id="9-5-2-空闲块链"><a href="#9-5-2-空闲块链" class="headerlink" title="9.5.2 空闲块链"></a>9.5.2 空闲块链</h3><ul><li><p>管理：将所有空闲块链接在一起，组成队列。</p></li><li><p>数据结构：链表</p></li><li><p>分配：从<strong>链首</strong>依次摘取1块或n块；</p></li><li><p>回收：回收块入<strong>链尾</strong>，并修改空闲链的链尾指针。</p></li><li><p>特点：</p><ul><li>操作简单</li><li>当链较长时，效率较低</li></ul></li><li><p>改进：<strong>空闲盘区链</strong></p><ul><li>操作系统保存着链头、链尾指针。</li><li>如何分配：若某文件申请K个盘块，则可以采用首次适应、最佳适应等算法，从链头开始检索，按照算法规则找到一个大小符合要求的空闲盘区，分配给文件。若没有<strong>合适的连续空闲块</strong>，也可以将不同盘区的盘块同时分配给一个文件，注意分配后可能要修改相应的<strong>链指针、盘区大小</strong>等数据。</li><li>如何回收：若回收区和某个空闲盘区相邻，则需要将回收区合并到空闲盘区中。若回收区没有和任何空闲区相邻，<strong>将回收区作为单独的一个空闲盘区挂到链尾</strong>。</li></ul></li></ul><blockquote><p>注：</p><p>空闲块链法以<strong>盘块</strong>为单位组成一条空闲链；空闲盘区链法以<strong>盘区</strong>为单位组成一条空闲链。</p></blockquote><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220411164642361.png" alt="image-20220411164642361" style="zoom:67%;" /><blockquote><p>假设指向空闲空间链表的指针丢失，系统将搜索整个目录结构以确定哪些页面已分配给作业，<strong>剩下的未分配的页面将重新链接起来组成空闲链表</strong>。</p></blockquote><h3 id="9-5-3-位示图"><a href="#9-5-3-位示图" class="headerlink" title="9.5.3 位示图"></a>9.5.3 位示图</h3><ul><li>管理：系统专设几个字，字中每一位对应一个磁盘块。</li><li>数据结构：字；位——1：表示已分配；0表示空闲</li><li>分配：找到0所指示的空闲块进行分配；每位对应的盘块号$b&#x3D;i*n+j$（$b,i,j$从0开始计数；$i,j$分别为<strong>行列值</strong>，$n$表示每行位数）</li><li>特点：位示图尺寸固定；可常驻内存，分配回收块</li><li>注意：第x块&#x3D;块号+1</li></ul><h3 id="9-5-4-成组链接法"><a href="#9-5-4-成组链接法" class="headerlink" title="9.5.4 成组链接法"></a>9.5.4 成组链接法</h3><ul><li><p><strong>Unix采用</strong></p></li><li><p>文件卷的目录区中专门用一个磁盘块作为”<strong>超级块</strong>“，当系统启动时需要将超级块读取内存，并要保证内存与外存中的”超级块“数据一致。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220411165554009.png" alt="image-20220411165554009" style="zoom:67%;" /></li><li><p>管理：设置空闲盘块号栈，存放当前可用的一组空闲盘块的盘块号（最多存放100个号），以及堆栈中尚有的空闲块数。</p></li><li><p>数据结构：<strong>堆栈</strong></p></li><li><p>说明：</p><ul><li>栈属于临界资源，应互斥使用</li><li><strong>S.free(0)<strong>是栈底，堆栈的首空间记录</strong>该组空闲盘块数</strong>，”超级块“充当<strong>链头</strong>的作用。最后一组记录的盘块数要少一块，因为要有一块用于标记已经是最后一组。</li><li>栈满时，栈顶为S.free(99)。</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220411171119230.png" alt="image-20220411171119230"></p><ul><li><strong>分配方式</strong>：需要100个空闲块：<ul><li>检查第一个分组的块数是否足够。100&#x3D;100，是足够的。</li><li>分配第一个分组中的100个空闲块。但是由于300号块内存放了再下一组的信息，因此300号块的数据需要复制到超级块中。</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220411171830380.png" alt="image-20220411171830380"></p><ul><li><p><strong>回收方式</strong>：</p><p>假设每个分组最多为100个空闲块，此时第一个分组已有100个块，还要再回收一块。需要将超级块中的数据复制到新回收的块中，并修改超级块的内容，让新回收的块成为第一个分组。</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220411172610247.png" alt="image-20220411172610247"></p><h2 id="9-6-文件及目录的实现"><a href="#9-6-文件及目录的实现" class="headerlink" title="9.6 文件及目录的实现"></a>9.6 文件及目录的实现</h2><h3 id="9-6-1-文件的实现"><a href="#9-6-1-文件的实现" class="headerlink" title="9.6.1 文件的实现"></a>9.6.1 文件的实现</h3><p>一个文件的信息用<strong>文件控制块FCB</strong>(File Control Block)来存储。为提高查找速度，可将FCB分为两部分：<strong>文件名</strong>和<strong>文件描述</strong>。</p><ul><li><p><strong>文件控制块</strong>：一个文件目录项。其包含的内容有：</p><ul><li>基本信息：文件名、外存物理位置、逻辑结构、物理结构</li><li>存取控制信息：文件主、核准用户、一般用户的存取权限</li><li>管理信息：创建日期&#x2F;时间、上次修改的日期&#x2F;时间、要求保留的时间等</li></ul></li><li><p><strong>索引节点</strong>：记录文件描述信息的数据结构，称为<strong>inode</strong>。</p><ul><li>减少磁盘I&#x2F;O，提高目录查找速度而引入。</li><li><strong>磁盘索引结点</strong>：存放在磁盘上的索引结点，系统中每个文件都由唯一的磁盘索引结点及编号（外存inode区的顺序号）。其内容有：<ul><li>文件主标识&#x2F;组标识</li><li>文件类型：普通文件&#x2F;目录文件&#x2F;块设备文件&#x2F;字符设备文件</li><li>文件存取权限</li><li>文件物理地址：数据文件的盘块号</li><li>文件长度</li><li>文件连接计数：文件在目录中具有的路径名数</li><li>文件存取时间：文件最近被存取、修改时间，索引结点修改时间。</li></ul></li><li><strong>内存索引结点</strong>：存放在内存的索引结点。当文件被打开时，将磁盘索引结点的内容复制到内存索引结点中。其在磁盘索引结点基础上，增加部分内容：<ul><li>外存索引结点编号</li><li>状态：指示结点是否被修改、上锁</li><li>访问计数：共享该结点的进程数</li><li>文件所在设备的逻辑设备号</li><li><strong>链接指针：空闲&#x2F;散列队列指针</strong></li></ul></li></ul></li></ul><blockquote><p>[例]</p><p>在UNIX系统中，设一个FCB为64B，一个Block为1KB，则磁盘块中可存放16个目录项，若共有3200个FCB，则查找一个文件平均启动磁盘100次；若FCB内容分开，<strong>一个文件名14B，2B存放inode结点指针</strong>，在1KB的盘块中可存放64个目录项，则可将平均启动磁盘次数减少到1&#x2F;4。</p></blockquote><h3 id="9-6-2-目录的实现"><a href="#9-6-2-目录的实现" class="headerlink" title="9.6.2 目录的实现"></a>9.6.2 目录的实现</h3><ul><li><p>考虑目录分配和目录管理算法的选择——目录文件</p></li><li><p><strong>线性列表</strong>：</p><ul><li>包含内容：文件名列表，指向数据块的指针</li><li>优点：简单</li><li>缺点：<ul><li>执行时时间开销较大</li><li>线性搜索</li></ul></li><li>改进：cache存储最近使用的目录项内容；</li></ul></li><li><p><strong>哈希表</strong>：</p><ul><li>包含内容：从文件名计算的哈希值，指向文件名的指针</li><li>优点：搜索时间减少；但要处理冲突问题</li><li>缺点：<ul><li>哈希表的大小与哈希函数有关，即可管理的文件数与哈希函数有关</li><li>搜索需要计算时间</li></ul></li></ul></li></ul><h2 id="9-7-容错技术"><a href="#9-7-容错技术" class="headerlink" title="9.7 容错技术"></a>9.7 容错技术</h2><h3 id="9-7-1-容错技术的概念"><a href="#9-7-1-容错技术的概念" class="headerlink" title="9.7.1 容错技术的概念"></a>9.7.1 容错技术的概念</h3><p>用于提高磁盘系统可靠性的技术。</p><ul><li>物理格式化（formatting）：<ul><li>将硬盘空间分区，分区控制读写操作；</li><li>分区组成：<strong>头部Header</strong>（引导代码、分区表信息、C盘位置），<strong>数据区和Trailer</strong>（包含ECC）；</li><li>ECC（error-correcting code）<ul><li>写和更新时</li><li>读、计算和检查时</li></ul></li></ul></li><li>磁盘容错技术&#x2F;系统容错技术SFT（System Fault Tolerance）的三个级别：<ul><li>SFT-1：低级，防止磁盘表面缺陷而引起的数据丢失。</li><li>SFT-2：中级，防止驱动器、控制器故障引起的不正常。</li><li>SFT-3：高级，利用冗余的存储信息作错误校正。</li></ul></li></ul><h3 id="9-7-2-SFT的三个级别"><a href="#9-7-2-SFT的三个级别" class="headerlink" title="9.7.2 SFT的三个级别"></a>9.7.2 SFT的三个级别</h3><p>&#x3D;&#x3D;<strong>SFT-1</strong>&#x3D;&#x3D;</p><p><strong>写后读校验</strong>（Read After Write Verfication）：</p><ul><li><p>实现：将写入磁盘的数据立即读入内存另一缓冲区，并与原数据比较是否一致。</p></li><li><p>防止将数据写入有缺陷的盘块中。</p></li></ul><p><strong>热修复重定向</strong>（Hex-Fix Redirection）：</p><ul><li>实现：磁盘设置热修复重定向区，存放发现盘块有缺陷时的待写数据，并登记。</li><li>防止将数据写入有缺陷的盘块中。</li></ul><p><strong>双目录和双FAT</strong>：</p><ul><li><p>实现：在不同盘或同一盘的不同区域，建立2份目录和FAT。</p></li><li><p>系统初启时验证一致性。</p></li></ul><p>&#x3D;&#x3D;<strong>STF-2</strong>&#x3D;&#x3D;</p><p><strong>磁盘镜像</strong>（Disk Mirroring）：</p><ul><li>实现：用同一磁盘控制器来控制2个完全相同的驱动器，每次对主磁盘写入数据后，采用写后读校验方式，写入备份盘。</li><li>缺点：<ul><li>磁盘利用率低</li><li>无法处理控制器故障</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220412173345429.png" alt="image-20220412173345429"></p><p><strong>磁盘双工</strong>（Disk Duplexing）：</p><ul><li>实现：将2台磁盘驱动器分别连到2个磁盘控制器、通道上，并镜像成对。</li><li>优缺点：<ul><li>2个独立通道，可并行写操作</li><li>读数据时，可采用<strong>分离搜索技术</strong>，从响应快的通道取数据。</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220412173500074.png" alt="image-20220412173500074"></p><p>&#x3D;&#x3D;<strong>STF-3</strong>&#x3D;&#x3D;</p><p><strong>廉价磁盘冗余阵列RAID</strong>（Redundant Array of Inexpensive Disk）</p><ul><li><p>思想：用1台磁盘阵列控制器，管理、控制一组磁盘驱动器，组成高度可靠、快速的大容量磁盘系统。</p></li><li><p>基础：<strong>并行交叉存取</strong>，提高速度</p></li></ul><blockquote><p>为提高磁盘的访问速度，在多磁盘驱动器系统中，将每一盘块中的数据分成若干部分，分别存储到各个不同磁盘的相同位置，达到并行存取的目的。</p></blockquote><ul><li><strong>RAID分级</strong>——8级</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220412173944902.png" alt="image-20220412173944902"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220412174010208.png" alt="image-20220412174010208"></p><ul><li><p>RAID优点：</p><ul><li>高可靠性。除RAID0外，都采用了冗错技术。</li><li>采用磁盘并行交叉存取，I&#x2F;O速度快。</li><li>与大型磁盘系统相比，有较高的性能&#x2F;价格（Performance &#x2F;Cost）比。</li></ul></li></ul><p><strong>后备系统</strong>：</p><ul><li><p>&#x3D;&#x3D;三种类型&#x3D;&#x3D;：</p><ul><li><p>磁带机：适用于存储顺序文件</p><blockquote><p>优缺点：容量大；价格低；速度慢。</p></blockquote></li><li><p>磁盘机：</p><blockquote><p>利用活动盘，速度快，费用高；</p><p>大容量磁盘兼做后备系统。</p></blockquote></li><li><p>光盘：</p><blockquote><p>优缺点：容量大，保存期长，费用适中；速度较慢；</p></blockquote></li></ul></li><li><p>&#x3D;&#x3D;二种后备方法&#x3D;&#x3D;：</p><ul><li><strong>全量转储</strong></li><li><strong>增量转储</strong>：设置转储时间表，记录每个文件最后一次的转储时间。每次转储时，判断在最后一次转储后是否发生变化</li></ul></li></ul><h2 id="9-8-性能改善"><a href="#9-8-性能改善" class="headerlink" title="9.8 性能改善"></a>9.8 性能改善</h2><p>改善性能，提高文件访问的快速性和数据一致性等指标。</p><ul><li><p><strong>衡量文件系统性能的主要指标</strong>：</p><ul><li>文件访问的<strong>快速性</strong></li><li>文件数据的可共享性</li><li>文件系统使用的方便性</li><li>数据的安全性</li><li>数据的一致性</li></ul></li><li><p><strong>快速性的3个层次</strong>：</p><ul><li>改进文件的目录结构及目录检索算法，减少对文件的查找时间</li><li>选择<strong>好的文件存储结构</strong>，提高访问速度</li><li>提高磁盘I&#x2F;O速度，以提高数据传输速度</li></ul></li><li><p>方法：</p><ul><li><strong>设置磁盘高速缓冲</strong>（Disk Cache）</li><li><strong>优化磁盘的数据分布</strong></li><li><strong>预读&#x2F;延迟写</strong></li></ul></li></ul><h1 id="ch10-I-x2F-O设备管理"><a href="#ch10-I-x2F-O设备管理" class="headerlink" title="ch10.I&#x2F;O设备管理"></a>ch10.I&#x2F;O设备管理</h1><h2 id="10-1-I-x2F-O设备管理概述"><a href="#10-1-I-x2F-O设备管理概述" class="headerlink" title="10.1 I&#x2F;O设备管理概述"></a>10.1 I&#x2F;O设备管理概述</h2><p>设备管理的目的是为了合理地利用<strong>外部设备</strong>和实现<strong>虚拟设备</strong>。</p><h3 id="10-1-1-I-x2F-O设备类型"><a href="#10-1-1-I-x2F-O设备类型" class="headerlink" title="10.1.1 I&#x2F;O设备类型"></a>10.1.1 I&#x2F;O设备类型</h3><p>&#x3D;&#x3D;<strong>按信息组织特征分</strong>&#x3D;&#x3D;：</p><ul><li><strong>块设备</strong>：硬盘、U盘</li><li><strong>字符设备</strong>：键盘、鼠标</li><li><strong>网络设备</strong>：网卡（以包(packet)为基本单位）</li></ul><p>&#x3D;&#x3D;<strong>按使用特性分</strong>&#x3D;&#x3D;：</p><ul><li><strong>输入设备</strong></li><li><strong>输出设备</strong></li><li><strong>存储设备</strong>：硬盘、网卡</li></ul><p>&#x3D;&#x3D;<strong>按交互对象分</strong>&#x3D;&#x3D;：</p><ul><li><strong>人机交互设备</strong></li><li><strong>与CPU交互的设备</strong>：硬盘、控制器、时钟（Timer&#x2F;Clock）</li><li><strong>计算机间交互的设备</strong>：网卡、路由器、交换机</li></ul><p>&#x3D;&#x3D;<strong>按共享属性分</strong>&#x3D;&#x3D;：</p><ul><li><strong>独占设备</strong>【程序独占】：人机交互设备、输出设备</li><li><strong>共享设备</strong>：硬盘</li><li><strong>虚拟设备</strong>：虚拟网卡、虚拟键盘</li></ul><p>&#x3D;&#x3D;<strong>按传输速率分</strong>&#x3D;&#x3D;：</p><ul><li><strong>低速设备</strong>：键盘、鼠标（几~几百KB）</li><li><strong>中速设备</strong>：打印机（几千KB）</li><li><strong>高速设备</strong>：硬盘（<strong>ms级</strong>）</li></ul><blockquote><p>注：</p><p>在Linux系统中，文件的类型包含普通文件、目录文件、特殊文件。通常把设备作为<strong>特殊文件</strong>来处理。</p></blockquote><h3 id="10-1-2-设备管理器（DC）"><a href="#10-1-2-设备管理器（DC）" class="headerlink" title="10.1.2 设备管理器（DC）"></a>10.1.2 设备管理器（DC）</h3><p>Device Controller，能操作端口、总线或设备的电子设备，是CPU与I&#x2F;O设备间的接口，属于<strong>可编址设备</strong>，可具有多个设备地址，分为<strong>字符设备控制器</strong>和<strong>块设备控制器</strong>。</p><p><strong>功能</strong>：</p><ul><li><strong>接收</strong>和<strong>识别</strong>CPU发出的命令（通过I&#x2F;O逻辑）</li><li>完成数据的存储转发</li><li>记录连接设备的状态</li><li>识别所连接设备的地址</li></ul><p><strong>组成</strong>：</p><ul><li>与CPU的接口</li><li>与设备的接口</li><li>I&#x2F;O逻辑</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220413163322500.png" alt="image-20220413163322500"></p><h3 id="10-1-3-I-x2F-O端口及通道"><a href="#10-1-3-I-x2F-O端口及通道" class="headerlink" title="10.1.3 I&#x2F;O端口及通道"></a>10.1.3 I&#x2F;O端口及通道</h3><p>&#x3D;&#x3D;<strong>I&#x2F;O端口</strong>&#x3D;&#x3D;（port）：</p><p>是可编址设备的另外一种。</p><p><strong>功能</strong>：</p><ul><li>完成数据的存储转发；</li><li>记录连接设备的状态；</li><li>识别所连接设备的地址。</li></ul><p><strong>组成——四个寄存器</strong>：</p><ul><li>Data-in 寄存器：主机程序获取输入</li><li>Data-out 寄存器：主机程序输出数据</li><li>状态寄存器</li><li>控制寄存器</li></ul><p>&#x3D;&#x3D;<strong>通道</strong>&#x3D;&#x3D;：</p><p>虽然在CPU与I&#x2F;O设备之间增加了设备控制器后，可以大大减少CPU对I&#x2F;O的干预，但是当主机所配置的外设很多时，CPU的负担仍然很重，因此，在CPU和设备控制器之间又增设了通道。I&#x2F;O通道是一种<strong>输入输出处理机</strong>，是为了提高CPU利用率而引入的。</p><blockquote><p>有题库说法：</p><p>通道是独立于CPU的，专门负责数据<strong>输入输出</strong>传输工作的<strong>处理单元</strong>。</p></blockquote><p><strong>与CPU的区别</strong>：</p><ul><li><strong>仅能执行与I&#x2F;O有关指令</strong></li><li><strong>无独立主存</strong>，与CPU共享</li></ul><p><strong>类型</strong>：</p><ul><li><strong>字节多路通道</strong>（Byte Multiplexor Channel）</li><li><strong>数组选择通道</strong>（Block Selector Channel）</li><li><strong>数组多路通道</strong>（Block Multiplexor Channel）</li></ul><p>由于通道成本较高，并非每一个I&#x2F;O设备都由自己的独立控制器和通道，会造成系统吞吐量下降，带来I&#x2F;O的<strong>瓶颈问题</strong>。</p><h3 id="10-1-4-I-x2F-O系统的结构与功能"><a href="#10-1-4-I-x2F-O系统的结构与功能" class="headerlink" title="10.1.4 I&#x2F;O系统的结构与功能"></a>10.1.4 I&#x2F;O系统的结构与功能</h3><p>&#x3D;&#x3D;<strong>I&#x2F;O系统的结构</strong>&#x3D;&#x3D;：</p><ul><li><p><strong>微型机I&#x2F;O系统</strong></p><ul><li>无通道的I&#x2F;O系统</li><li>以CPU为中心</li></ul><p>下图bus指<strong>总线</strong>。</p></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220413164410733.png" alt="image-20220413164410733" style="zoom:67%;" /><p>​串行端口                     并行端口</p><ul><li><strong>主机I&#x2F;O系统</strong><ul><li>有通道的I&#x2F;O系统</li><li>以主存为中心</li><li>属于<strong>四级结构</strong></li></ul></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220413164739782.png" alt="image-20220413164739782" style="zoom:67%;" /><p>&#x3D;&#x3D;<strong>I&#x2F;O系统的功能</strong>&#x3D;&#x3D;：</p><ul><li><p><strong>设备分配</strong>：按照一定策略，为申请设备的进程分配设备；</p></li><li><p>&#x3D;&#x3D;<strong>设备映射</strong>&#x3D;&#x3D;：（如用户程序所写的打印机—–&gt;Epson&#x2F;Hp，<strong>方便用户使用</strong>）</p><ul><li><p><strong>隐藏物理设备的细节</strong></p><p>对设备进行抽象，隐藏物理设备的实现细节，向上层提供少量、抽象的读&#x2F;写命令</p></li><li><p><strong>实现设备的无关性</strong></p><p>用户不仅可以使用抽象的I&#x2F;O命令，还可以使用抽象的逻辑设备名来使用设备</p></li></ul></li><li><p><strong>提高处理机和I&#x2F;O设备的利用率</strong>：I&#x2F;O设备之间（<strong>缓冲</strong>）、I&#x2F;O设备与处理机之间应该能够<strong>并行操作</strong></p></li><li><p>对I&#x2F;O设备进行控制</p></li><li><p>确保对设备的正确共享：<strong>独占设备&#x2F;共享设备</strong></p></li><li><p>错误处理</p></li></ul><h3 id="10-1-5-I-x2F-O系统软件结构"><a href="#10-1-5-I-x2F-O系统软件结构" class="headerlink" title="10.1.5 I&#x2F;O系统软件结构"></a>10.1.5 I&#x2F;O系统软件结构</h3><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220413165544240.png"></p><ul><li>设备独立性软件可以<strong>提供统一接口</strong></li><li>中断处理程序直接与I&#x2F;O硬件进行交互</li><li>设备驱动程序是进程和设备控制器之间的通信程序，实现上次抽象I&#x2F;O请求到I&#x2F;O设备具体命令和参数的转换，由设备制造厂商提供</li><li>设备独立性软件：现代OS中的I&#x2F;O系统基本上都实现了与设备无关性；I&#x2F;O软件独立于具体使用的物理设备，包括设备命名、设备分配、数据缓冲和数据高速缓冲等软件</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220413165800230.png" alt="image-20220413165800230"></p><h2 id="10-2-I-x2F-O控制方式"><a href="#10-2-I-x2F-O控制方式" class="headerlink" title="10.2 I&#x2F;O控制方式"></a>10.2 I&#x2F;O控制方式</h2><p>I&#x2F;O控制方式发展宗旨：尽量<strong>减少CPU对I&#x2F;O的干预</strong>，提高CPU利用率。</p><h3 id="10-2-1-早期I-x2F-O控制方式（轮询）"><a href="#10-2-1-早期I-x2F-O控制方式（轮询）" class="headerlink" title="10.2.1 早期I&#x2F;O控制方式（轮询）"></a>10.2.1 早期I&#x2F;O控制方式（轮询）</h3><p>早期无中断系统，CPU对I&#x2F;O设备的控制采取轮询（polling）的可编程I&#x2F;O方式，<strong>每次传输一个字（符）</strong></p><p><strong>&#x3D;&#x3D;“忙测试”&#x3D;&#x3D;过程</strong>：</p><ul><li>CPU向I&#x2F;O控制器发一条I&#x2F;O命令，启动I&#x2F;O设备</li><li>置设备状态寄存器中busy为1</li><li><strong>循环测试</strong>busy，直到busy&#x3D;0</li></ul><p>缺点：CPU的绝大部分时间都处于等待I&#x2F;O设备完成数据I&#x2F;O的循环测试中。</p><h3 id="10-2-2-中断驱动I-x2F-O控制方式"><a href="#10-2-2-中断驱动I-x2F-O控制方式" class="headerlink" title="10.2.2 中断驱动I&#x2F;O控制方式"></a>10.2.2 中断驱动I&#x2F;O控制方式</h3><ul><li>有中断系统</li><li>工作过程：<ul><li>CPU向设备控制器DC发一条I&#x2F;O命令，并继续执行</li><li>DC接到命令，<strong>控制设备I&#x2F;O</strong></li><li>I&#x2F;O完成，DC向CPU发中断信号</li><li>CPU检查I&#x2F;O中是否有错：有：处理；无：继续</li></ul></li><li>每次传输<strong>一个字（符）</strong></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416104929122.png" alt="image-20220416104929122" style="zoom:50%;" /><h3 id="10-2-3-DMA控制方式"><a href="#10-2-3-DMA控制方式" class="headerlink" title="10.2.3 DMA控制方式"></a>10.2.3 DMA控制方式</h3><p>DMA即<strong>D</strong>irect <strong>M</strong>emory <strong>A</strong>ccess(<strong>直接存储器访问</strong>)，DMA方式中，传输将数据从一个地址空间复制到另一个地址空间。DMA方式每次传输一个块或几个连续块，常用于<strong>块设备的I&#x2F;O控制</strong>。</p><p>DMA控制器的组成：</p><ul><li><p>DR：数据寄存器</p></li><li><p>MAR：内存地址寄存器</p></li><li><p>DC：数据计数器（count），存放多少字节</p></li><li><p>CR：命令寄存器</p></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416105643595.png" alt="image-20220416105643595" style="zoom:50%;" /><p>特点：</p><ul><li>I&#x2F;O基本单位是<strong>数据块(Block)</strong></li><li>I&#x2F;O是直接从设备入内存，或相反</li><li>一块&#x2F;多块完成后，CPU才干预</li></ul><p>工作过程：</p><ul><li>进程I&#x2F;O，CPU给控制器发送：I&#x2F;O命令、内存&#x2F;外存起址、传输字节数</li><li><strong>CPU启动控制器进行数据I&#x2F;O</strong></li><li>I&#x2F;O完成，DMA向CPU发送中断信号</li></ul><p>DMA控制方式采用的是<strong>cycle steeling</strong>（周期窃取）技术【周期指CPU周期】。</p><h3 id="10-2-4-通道控制方式"><a href="#10-2-4-通道控制方式" class="headerlink" title="10.2.4 通道控制方式"></a>10.2.4 通道控制方式</h3><p>工作过程：</p><ul><li>进程I&#x2F;O，CPU向通道发送I&#x2F;O命令，给出通道程序的起址、需访问的设备等；</li><li>通道执行通道程序，完成I&#x2F;O，并中断通知CPU。</li><li>每次传输一组数据块</li></ul><p>与DMA相比：</p><ul><li>通道所需要CPU干预更少；</li><li>多个不连续块的传递和存储；</li><li>减轻CPU的负载。</li></ul><blockquote><p>注：</p><p>该方式数据传送的效率最高。</p></blockquote><p>通道程序：由一系列通道指令组成，包括有关操作码、内存地址、计数、结束位P等</p><table><thead><tr><th align="center">操作</th><th align="center">P</th><th align="center">R</th><th align="center">计数</th><th align="center">内存地址</th></tr></thead><tbody><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">0</td><td align="center">80</td><td align="center">813</td></tr><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">0</td><td align="center">140</td><td align="center">1034</td></tr><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">1</td><td align="center">60</td><td align="center">5830</td></tr><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">1</td><td align="center">300</td><td align="center">2000</td></tr><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">0</td><td align="center">50</td><td align="center">1650</td></tr><tr><td align="center">WRITE</td><td align="center">0</td><td align="center">1</td><td align="center">250</td><td align="center">2720</td></tr></tbody></table><h2 id="10-3-缓冲管理"><a href="#10-3-缓冲管理" class="headerlink" title="10.3 缓冲管理"></a>10.3 缓冲管理</h2><p><strong>缓冲引入的原因</strong>：</p><ul><li>缓和CPU与I&#x2F;O设备间<strong>速度不匹配</strong>的矛盾</li><li>减少CPU对I&#x2F;O的干预</li><li><strong>提高CPU和I&#x2F;O设备之间的并行程度</strong>（主要目的）</li></ul><p><strong>缓冲的种类</strong>：</p><ul><li><p>单缓冲</p></li><li><p>双缓冲</p></li><li><p>循环缓冲</p></li><li><p>缓冲池</p></li></ul><h3 id="10-3-1-单缓冲-Single-Buffer"><a href="#10-3-1-单缓冲-Single-Buffer" class="headerlink" title="10.3.1 单缓冲(Single Buffer)"></a>10.3.1 单缓冲(Single Buffer)</h3><p>工作方式：进程发出I&#x2F;O请求时，操作系统在主存分配一个缓冲区，通过缓冲区完成I&#x2F;O。</p><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416110603623.png" alt="image-20220416110603623" style="zoom:67%;" /><ul><li>将一块输入数据输入缓冲区，时间T</li><li>系统将缓冲区数据复制到用户区，时间M</li><li>CPU对输入的数据处理，时间C</li></ul><p>[例]<strong>从块设备输入处理</strong></p><p>性能分析：</p><ul><li><p>无缓冲区时，每一块数据的处理时间为： T+C</p></li><li><p>单缓冲区时，每一块数据的处理时间为：MAX(C,T)+M</p><p>由于M&lt;&lt;T或C，所以上式近似为：<strong>MAX(C,T)</strong></p></li></ul><img src=" https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416110922495.png" alt="image-20220416110922495" style="zoom: 67%;" /><h3 id="10-3-2-双缓冲-Double-Buffer"><a href="#10-3-2-双缓冲-Double-Buffer" class="headerlink" title="10.3.2 双缓冲(Double Buffer)"></a>10.3.2 双缓冲(Double Buffer)</h3><p>为了加快输入和输出速度，提高设备利用率，引入了双缓冲机制，也称为<strong>缓冲对换</strong>（Buffer Swapping）。</p><p>每一块数据的处理时间为：MAX(C,T)。</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416111254815.png" alt="image-20220416111254815" style="zoom:67%;" /><h3 id="10-3-3-循环缓冲"><a href="#10-3-3-循环缓冲" class="headerlink" title="10.3.3 循环缓冲"></a>10.3.3 循环缓冲</h3><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220416111801680.png" alt="image-20220416111801680"></p><p>循环缓冲区中包含多个大小相同的缓冲区，可分为三类：</p><ul><li>装输入数据的空缓冲区R</li><li>已装满数据的缓冲区G</li><li>计算进程正在使用的现行工作缓冲区C</li></ul><p>循环缓冲区的使用：</p><ul><li>Getbuf过程</li><li>Releasebuf过程</li></ul><p><strong>存在P-C问题</strong>（生产者Producer-消费者Consumer问题）。</p><h3 id="10-3-4-缓冲池"><a href="#10-3-4-缓冲池" class="headerlink" title="10.3.4 缓冲池"></a>10.3.4 缓冲池</h3><p>单、双、循环缓冲都属<strong>专用缓冲</strong>。<strong>缓冲池是公用缓冲</strong>，包含了一个管理的数据结构及一组操作函数的管理机制，用于管理多个缓冲区</p><p><strong>目的</strong>：提高缓冲区的利用率，供<strong>多个进程</strong>共享</p><p>循环池的组成：</p><ul><li>用户管理缓冲区的队列：&#x3D;&#x3D;<strong>空缓冲队列</strong>emq、<strong>输入队列</strong>inq、<strong>输出队列</strong>outq（CPU—&gt;输出设备）&#x3D;&#x3D;</li><li>用于标识缓冲池中各缓冲区动态过程的工作缓冲区<ul><li>用于收容输入数据的工作缓冲区<strong>hin</strong></li><li>用于收容输出数据的工作缓冲区<strong>hout</strong></li><li>用于提取输入数据的工作缓冲区<strong>sin</strong></li><li>用于提取输出数据的工作缓冲区<strong>sout</strong></li></ul></li></ul><p>两个过程：</p><ul><li>Getbuf(type)过程：用于从type指定的队列中得到一个缓冲区</li><li>Putbuf(type,number)： 用于将参数number所指示的缓冲区，挂在type所指队列的队尾</li><li>每个队列type设置2个信号量：资源信号量RS(type)和互斥信号量MS(type)——用于出入队列的控制</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Getbuf</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token function">RS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//RS是用来线程同步信号量，初始值是缓冲区的大小</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token function">MS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">B</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">Takebuf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//number是指缓冲队列对应的位置，获得缓冲队列的缓冲区</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token function">MS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Putbuf</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token function">MS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Addbuf</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放后归还缓冲区</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token function">MS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token function">RS</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工作方式</strong>：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220417145242482.png" alt="image-20220417145242482" style="zoom:67%;" /><p><strong>收容输入</strong>（从I&#x2F;O设备输入到缓冲）：</p><ul><li>进程需输入数据时，调用<strong>Getbuf(emq)<strong>【emq—empty-queue】，得到一个空缓冲作为收容输入的工作缓冲区</strong>hin</strong></li><li>将数据输入到<strong>hin</strong>中</li><li>调用**Putbuf(inq,hin)**，将hin入inq的队尾</li></ul><p><strong>提取输入</strong>（从inq提取所需数据）：</p><ul><li>计算进程需输入数据时，调用**Getbuf(inq)**，取得一个缓冲区作为提取输入工作缓冲区sin</li><li>sin—&gt;计算进程</li><li>计算进程使用完成后，调用**Putbuf(emq,sin)**，将缓冲区挂到emq队尾</li></ul><p>类似地，有：</p><p><strong>收容输出</strong>：</p><ul><li>hout&lt;—Getbuf(emq)</li><li>将data存在到hout中</li><li>putbuf(outq,hout)</li></ul><p><strong>提取输出</strong>：</p><ul><li>sout&lt;—Getbuf(outq)</li><li>sout—&gt;输出设备</li><li>putbuf(emq,sout)</li></ul><h2 id="10-4-设备分配"><a href="#10-4-设备分配" class="headerlink" title="10.4 设备分配"></a>10.4 设备分配</h2><p>功能：进程发出I&#x2F;O请求时，按照一定的策略将I&#x2F;O所需设备分配给进程。</p><h3 id="10-4-1-设备分配的过程"><a href="#10-4-1-设备分配的过程" class="headerlink" title="10.4.1 设备分配的过程"></a>10.4.1 设备分配的过程</h3><p><strong>设备分配中的数据结构</strong>：</p><ul><li>设备控制表DCT(Device Control Table)：系统为每个设备配置一张DCT,用于记录该设备的相关参数。</li><li>控制器控制表COCT(Controller Control Table)</li><li>通道控制表CHCT(Channel Control Table)</li><li>系统设备表SDT(System Device Table)</li></ul><p>进程需要使用设备时，若忙，会<strong>挂起进程</strong>（挂在设备的等待队列）。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220417153701169.png" alt="image-20220417153701169"></p><p><strong>设备分配应考虑的因素</strong>：</p><ul><li><strong>设备的固有属性</strong><ul><li>独占设备：设备一旦分配，进程独占直至完成</li><li>共享设备：分配给多个进程，合理调度</li><li>虚拟设备：虚拟设备属于可共享设备，分配给多个进程</li></ul></li><li><strong>设备分配算法</strong><ul><li>先来先服务</li><li>优先级高者优先</li></ul></li><li><strong>设备分配中的安全性</strong>———-&gt;即&#x3D;&#x3D;<strong>不能出现死锁</strong>&#x3D;&#x3D;<ul><li>安全分配方式：进程发出I&#x2F;O请求后就进入阻塞状态，直至I&#x2F;O操作完成，CPU与I&#x2F;O设备顺序工作</li><li>不安全分配方式：进程发出I&#x2F;O请求后继续运行，可以继续发出其他I&#x2F;O请求，直到因<strong>等待设备</strong>而进入阻塞状态；为了避免死锁，进行设备分配之前要进行安全性计算</li></ul></li></ul><p><strong>设备分配的过程</strong>：</p><ul><li><strong>分配设备</strong><ul><li>根据I&#x2F;O请求中的物理设备名查找<strong>系统设备表SDT</strong>，找到该设备的DCT，判断DCT的状态</li><li>若忙，将请求I&#x2F;O进程的PCB挂在设备队列上；否则计算设备分配的安全性，保证安全的前提下分配给进程</li></ul></li><li><strong>分配控制器</strong><ul><li>给请求I&#x2F;O的进程分配设备后，在DCT中找到<strong>与该设备连接的控制器的COCT</strong>（控制器控制表,Controller Control Table），判断COCT的状态</li><li>若忙，将请求I&#x2F;O进程的PCB挂在控制器等待队列上，否则将控制器分配给进程</li></ul></li><li><strong>分配通道</strong><ul><li>在COCT中找到与控制器连接的通道的CHCT，判断CHCT的状态</li><li>若忙，将请求I&#x2F;O进程的PCB挂在通道等待队列上，否则将通道分配给进程</li></ul></li></ul><p>只有<strong>在&#x3D;&#x3D;设备、控制器、通道&#x3D;&#x3D;都分配成功</strong>时，设备分配才成功，可启动I&#x2F;O设备进行数据传送。</p><h3 id="10-4-2-设备独立性"><a href="#10-4-2-设备独立性" class="headerlink" title="10.4.2 设备独立性"></a>10.4.2 设备独立性</h3><p>也称为<strong>设备无关性</strong>：应用程序独立于具体使用的物理设备。</p><p><strong>引入设备独立性的好处</strong>：</p><ul><li><p><strong>增加设备分配时的灵活性</strong></p><ul><li>某设备被占用，可分配其它同类空闲设备；</li><li>系统增加同类外设时，无需修改源程序即可使用；</li><li>进程使用设备故障时，系统可分配其它同类设备给进程；</li></ul></li><li><p>易于实现I&#x2F;O重定向</p><p>重定向(redirection)：I&#x2F;O进程，不改变应用程序即可改变设备完成数据的I&#x2F;O，例：dir&gt;prn（输出至打印机）</p></li></ul><p><strong>设备独立性的实现</strong>：</p><p>&#x3D;&#x3D;逻辑设备&#x3D;&#x3D;：用户程序中使用某类设备名称（PRN）来使用该类设备；</p><p>&#x3D;&#x3D;物理设备&#x3D;&#x3D;：系统I&#x2F;O进程实际执行I&#x2F;O操作时，使用的设备名称（整数编码），物理设备直接指向某台具体设备。</p><p>逻辑设备到物理设备的映射采用<strong>逻辑设备表LUT</strong>（Logical Unit Table）。</p><table><thead><tr><th align="center">逻辑设备名</th><th align="center">物理设备名</th><th align="center">驱动程序入口地址</th></tr></thead><tbody><tr><td align="center">&#x2F;dev&#x2F;sdb1</td><td align="center">8，17</td><td align="center">1024</td></tr></tbody></table><p><strong>LUT设置方式</strong>：</p><ul><li><p>整个系统设置一张</p><p>特点：</p><ul><li>统一管理，维护方便</li><li>每个进程都要去查，会产生“读者-写者”问题（即数据更新、数据查找同时进行会产生瓶颈，光是查找可以同时查找，只要一份数据copy多份即可）</li><li>整个系统仅设置一张，查找时间长</li></ul></li><li><p>每个<strong>用户进程</strong>设置一张，置于进程PCB中</p></li><li><p>设置到<strong>用户</strong>中（目前操作系统采用的方式）</p></li></ul><h3 id="10-4-3-SPOOLing系统"><a href="#10-4-3-SPOOLing系统" class="headerlink" title="10.4.3 SPOOLing系统"></a>10.4.3 SPOOLing系统</h3><h4 id="10-4-3-1-脱机技术的概念"><a href="#10-4-3-1-脱机技术的概念" class="headerlink" title="10.4.3.1 脱机技术的概念"></a>10.4.3.1 脱机技术的概念</h4><p>引入脱机技术后，缓解了CPU与慢速I&#x2F;O设备的<strong>速度矛盾</strong>。另一方面，即使CPU在忙碌，也可以<strong>提前将数据输入到磁带</strong>（通过外围控制机）；即使慢速的输出设备正在忙碌，也可以提前将数据输出到磁带。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220420233427641.png" alt="image-20220420233427641"></p><h4 id="10-4-3-2-假脱机技术"><a href="#10-4-3-2-假脱机技术" class="headerlink" title="10.4.3.2 假脱机技术"></a>10.4.3.2 假脱机技术</h4><p>通过在高速外存设置I&#x2F;O缓冲，将<strong>独占型设备</strong>改造成为<strong>可共享的虚设备</strong>。</p><blockquote><p>注：</p><ul><li><p>独占型设备：只允许各个进程串行使用的设备，一段时间内只能满足一个进程的请求。</p></li><li><p>可共享的虚设备：允许多个进程”同时“使用的设备（宏观上同时使用，微观上可能是”交替使用”），可以同时满足多个进程的使用请求。</p></li></ul></blockquote><p>SPOOLing系统即<strong>在线同时外围操作</strong>（<strong>假脱机技术</strong>），英文是Simultaneous Peripheral Operation On-Line。</p><blockquote><p>注：</p><ul><li><p>”输出进程“模拟脱机输出时的<strong>输出设备</strong>；</p></li><li><p>SPOOLing技术是操作系统中采用的<strong>以空间换取时间</strong>的技术，通过预输入及缓输出来减少CPU等待慢速设备的时间，将独享设备改造成共享设备。</p></li></ul></blockquote><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220419113640794.png" alt="image-20220419113640794" style="zoom:67%;" /><ul><li><strong>输入井&#x2F;输出井</strong><ul><li>磁盘上开辟的存储区域，分别容纳输入&#x2F;输出数据</li><li><strong>井文件：数据一般以&#x3D;&#x3D;文件形式&#x3D;&#x3D;组织管理</strong></li><li>所有进程的数据文件链接成为队列</li></ul></li><li><strong>输入缓冲区&#x2F;输出缓冲区</strong><ul><li><strong>内存</strong>设置缓冲区，用于缓和CPU和磁盘之间速度不匹配的矛盾</li><li>分别作为输入设备输入或输出井到输出设备之间的<strong>缓冲</strong></li></ul></li><li>输入进程&#x2F;输出进程</li><li><strong>井管理程序</strong>：控制作业与磁盘井之间的信息交换</li></ul><p><strong>SPOOLing系统的工作过程</strong>：</p><ul><li><p>输入过程：SPOOLing输入程序Spi主要工作是负责将输入设备上的作业以作业为单位通过内存缓冲区传输至输入井，并建立JCB，同时维持后备队列。</p></li><li><p>Spi是系统中一个独立的进程，无任务时，处于等待状态（睡眠状态）。Spi被唤醒的时机有3个， Spi被唤醒后，根据收到的信号作相应的工作 ：</p><ul><li><p>当输入设备上有<strong>作业输入请求</strong>时：Spi启动相应通道，将作业输入到内存输入缓冲区，自身进入等待；</p></li><li><p>当输入设备<strong>工作结束</strong>时： Spi根据输入缓冲区中的内容，建立<strong>JCB</strong>（<strong>J</strong>ob <strong>C</strong>ontrol <strong>B</strong>lock，<strong>记录作业的有关信息</strong>），并在输入井中为作业分配空间，启动磁盘通道将输入缓冲区中作业输到输入井，自身进入等待；</p></li><li><p>向磁盘输入井传输一道作业结束时：Spi将作业JCB加入后备队列，并向作业调度程序发信号，引起作业调度，自身进入等待。</p></li></ul></li></ul><p><strong>利用SPOOLing系统完成打印工作</strong>（共享打印机原理分析）：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220420234503249.png" alt="image-20220420234503249" style="zoom:80%;" /><ul><li><p>利用假脱机技术将独占型的打印机改造成为了一台供多个用户共享的打印设备</p><blockquote><p>注：</p><p>虽然系统中只有一个台打印机，但每个进程提出打印请求时，系统都会为在输出井中为其分配一个存储区（<strong>相当于分配了一个逻辑设备</strong>），使每个用户进程都觉得自己在独占一台打印机，从而实现对打印机的共享。</p></blockquote></li><li><p>系统组成：<strong>磁盘缓冲区、打印缓冲区、工作进程</strong></p></li><li><p>当用户进程请求打印时， SPOOLing系统（存在spo）为它做两件事：</p><ul><li>在输出井中为之申请一个<strong>空闲磁盘分区</strong>， 并将要打印的数据送入其中；</li><li>再为用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入其中， 再将该表挂到<strong>打印请求队列</strong>上。</li></ul></li><li><p>打印机空闲时：输出进程取出一张<strong>打印请求表</strong>，再从输出井中取出打印数据到输出缓冲区，通过打印机进行打印（会发出信号是否还要继续打印）。</p></li></ul><h4 id="10-4-3-3-SPOOLing系统及守护进程"><a href="#10-4-3-3-SPOOLing系统及守护进程" class="headerlink" title="10.4.3.3 SPOOLing系统及守护进程"></a>10.4.3.3 SPOOLing系统及守护进程</h4><p><strong>SPOOLing系统的特点</strong>：</p><ul><li>提高了I&#x2F;O速度：由对低速设备的I&#x2F;O改为对输入&#x2F;输出井的存取，缓和了CPU与低速设备的矛盾</li><li>将独占型设备改造为<strong>共享设备</strong>（变为硬盘空间）</li><li>实现了虚拟设备功能：多个进程同时（并发）地从输入&#x2F;输出井存取数据</li></ul><p><strong>守护进程（Daemon）</strong>：</p><ul><li>守护进程取代假脱机管理进程，是允许使用打印机的唯一进程</li><li>所有需要使用打印机进行打印的进程都需要将一份要求打印的文件放在假脱机文件队列（目录）中</li><li>如果守护进程正在睡眠，则将它唤醒，由它按照目录逐个打印，直到完成所有打印作业，然后继续睡眠</li></ul><h2 id="10-5-设备处理"><a href="#10-5-设备处理" class="headerlink" title="10.5 设备处理"></a>10.5 设备处理</h2><h3 id="10-5-1-设备驱动程序"><a href="#10-5-1-设备驱动程序" class="headerlink" title="10.5.1 设备驱动程序"></a>10.5.1 设备驱动程序</h3><p><strong>设备驱动程序的功能</strong>：</p><ul><li>接收上层软件的I&#x2F;O命令，转化为具体的I&#x2F;O要求，控制设备完成I&#x2F;O操作</li><li>完成I&#x2F;O操作的初始化工作：检查用户I&#x2F;O请求的合法性，了解I&#x2F;O设备的状态，<strong>传递有关参数，设置设备的工作方式</strong></li><li>发出I&#x2F;O命令，启动I&#x2F;O设备</li><li>及时响应由控制器或通道发来的中断请求</li><li>根据用户的I&#x2F;O请求，自动地<strong>构成通道程序</strong></li></ul><p><strong>设备驱动程序的处理过程</strong>：</p><ul><li>将抽象要求转换为具体要求；即将I&#x2F;O命令转换为控制器可接受的命令格式；例如磁盘块号转换为盘面、道号、扇区</li><li>检查I&#x2F;O请求的合法性</li><li>读出和检查设备状态</li><li>传送必要的参数；如传输字节数、<strong>内存地址</strong>（块设备的DMA方式）</li><li>设置工作方式（进程和设备控制器之间的<strong>异步&#x2F;同步通信</strong>）</li><li>启动I&#x2F;O设备，完成I&#x2F;O</li></ul><p><strong>设备驱动程序的特点</strong>：</p><ul><li>设备驱动程序与硬件密切相关</li><li>每类设备都要配置<strong>特定的驱动程序</strong>（如块设备、字符设备）</li><li>驱动程序一般由设备厂商根据操作系统要求编写</li><li>操作系统仅对设备驱动的接口提出要求</li></ul><h3 id="10-5-2-用户层I-x2F-O软件"><a href="#10-5-2-用户层I-x2F-O软件" class="headerlink" title="10.5.2 用户层I&#x2F;O软件"></a>10.5.2 用户层I&#x2F;O软件</h3><ul><li><p><strong>系统调用</strong>：应用程序通过系统调用间接调用OS中的I&#x2F;O过程，对I&#x2F;O设备进行操作</p></li><li><p><strong>库函数</strong>：用户程序通过调用对应的库函数使用系统调用</p><p>C语言中的提供的I&#x2F;O方面的库函数也是I&#x2F;O系统的组成部分，主要包括对文件和设备进行读&#x2F;写的库函数、控制&#x2F;检查设备状态的库函数等</p></li><li><p><strong>假脱机系统</strong>（Simultaneous Peripheral Operation On-Line）：将一台物理I&#x2F;O设备虚拟为多台逻辑I&#x2F;O设备</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220421000426820.png" alt="image-20220421000426820"></p><blockquote><p>注：</p><p>Posix规范：Posix规范定义了操作系统(很多时候针对的是类Unix操作系统)应该为应用程序提供的接口标准,从而保证了应用程序在源码层次的可移植性。</p></blockquote><h1 id="ch11-操作系统的安全机制"><a href="#ch11-操作系统的安全机制" class="headerlink" title="ch11.操作系统的安全机制"></a>ch11.操作系统的安全机制</h1><h2 id="11-1-安全威胁及现状"><a href="#11-1-安全威胁及现状" class="headerlink" title="11.1 安全威胁及现状"></a>11.1 安全威胁及现状</h2><p><strong>操作系统面临的攻击方法</strong>：</p><ul><li><strong>伪装</strong>（masquerading）：指参与通信的一方假装是合法用户，获得通常不被允许的访问权限或特权。</li><li><strong>重放攻击</strong>（replay attack）：恶意或欺诈的有效数据重播。重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</li><li><strong>消息篡改</strong>（message modification）：替换授权用户所传递的消息。</li><li><strong>中间人攻击</strong>（man-in-middle attack）：攻击者伪装成接收者的发送者，反之亦然</li></ul><p><strong>威胁手段</strong>：</p><ul><li><p>蠕虫、计算机病毒、特洛伊木马、后门&#x2F;天窗、逻辑炸弹、内部&#x2F;外部泄密</p></li><li><p><strong>堆栈和缓冲区溢出</strong></p><ul><li>利用程序中的bug来获得目标系统的未经授权访问或特权升级</li><li>对目标系统是致命的攻击，难检测和防止</li></ul></li><li><p><strong>隐蔽通道</strong>（covert channel）：</p><ul><li>不受安全策略控制、违反安全策略的信息泄露路径</li><li>分为隐蔽存储通道、隐蔽定时通道</li></ul></li><li><p><strong>拒绝服务攻击</strong>：</p><ul><li>破坏系统或设施的合法使用的手段，常基于网络</li><li>不可能防止和解决，难以确定造成系统减速的原因</li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220421214043139.png" alt="image-20220421214043139"></p><p><strong>操作系统安全基础</strong>：</p><p><strong>Lampson访问矩阵</strong>：</p><ul><li>保护域Protection domain</li><li>访问控制列表Access Control list(ACL)</li><li>权能列表Capability list(C_list)</li></ul><p><strong>强制保护系统</strong>(Mandatory Protection System)：</p><ul><li>访问矩阵——不信任的进程能篡改保护系统——未授权访问的安全问题</li><li>仅由可信管理员通过可信软件来修改状态的保护系统</li><li>包含状态：强制保护状态、标记状态、Transition state</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220421214158437.png" alt="image-20220421214158437"></p><p><strong>引用监视器</strong>（Reference Monitor）：</p><ul><li>解决用户程序的<strong>运行控制问题</strong>引入的，目的是<strong>在用户与系统资源之间实施一种授权访问关系</strong></li><li>J.P. Anderson的定义：以主体（用户等）所获得的引用权限为基准，验证运行中的程序（对程序、数据、设备等）的所有引用</li><li>监控主体和客体之间授权访问关系的部件：<ul><li>引用监视器接口Reference Monitor Interface</li><li>授权模块Authorization Module</li><li>策略存储Policy Store</li></ul></li></ul><p><strong>可信计算基</strong>（Trust Computing Base）：</p><ul><li><strong>计算机系统内保护装置的总体</strong>，包括硬件、固件、软件和负责执行安全策略的组合体。</li><li>组成：<ul><li>操作系统安全内核</li><li>具有特权的程序和命令</li><li>处理敏感信息的程序</li><li>与TCB实施安全策略有关的文件，如：进程创建、进程切换、内存页面管理、部分的文件、I&#x2F;O管理</li></ul></li><li>特点：尽可能小、尽可能trustworthy</li></ul><h2 id="11-2-安全机制概述"><a href="#11-2-安全机制概述" class="headerlink" title="11.2 安全机制概述"></a>11.2 安全机制概述</h2><p>ISO：是一种技术、一些软件或实施一个或更多安全服务的过程。</p><ul><li><p>普通的安全机制</p><ul><li>信任的功能性</li><li>事件检测</li><li>审计跟踪</li><li>安全恢复</li></ul><p>[注]<strong>操作系统安全目标</strong>：</p><ul><li>依据系统安全策略对用户的操作进行<strong>存取控制</strong>，防止用户对计算机资源的非法存取</li><li><strong>标识系统中的用户并进行身份鉴别</strong></li><li>监督系统运行的安全性</li><li>保证系统自身的安全性和完整性</li></ul></li><li><p>特殊的安全机制</p><ul><li><strong>硬件安全机制</strong><ul><li><strong>存储保护：保护存储器中的数据</strong></li><li><strong>运行保护：分层保护环</strong></li><li><strong>I&#x2F;O保护：I&#x2F;O读写操作保护</strong></li></ul></li><li>标识与鉴别</li><li>访问控制</li><li>最小特权管理</li><li>可信通路</li><li>安全审计</li></ul></li></ul><h2 id="11-3-标识与鉴别"><a href="#11-3-标识与鉴别" class="headerlink" title="11.3 标识与鉴别"></a>11.3 标识与鉴别</h2><ul><li><p><strong>标识</strong>（identify）：<strong>用户向系统表明身份</strong></p><ul><li>系统可以识别的用户内部名称：用户名、登录ID</li><li>具有唯一性、不可伪造</li></ul></li><li><p><strong>鉴别</strong>：<strong>对用户宣称的身份标识有效性进行校验和测试的过程</strong>。</p><ul><li><p>鉴别方法：</p><ul><li><p><strong>口令</strong>——账号、密码——所知</p><p>存在的问题：弱口令、缺省密码、简单密码、密码的存储——sniffer、keylogger、爆破</p></li><li><p><strong>密码验证</strong>：PKI、磁卡、认证令牌等——所有</p></li><li><p><strong>生物鉴别方法</strong>：面部、指纹、虹膜、声音等特征——所是</p></li><li><p><strong>IP地址、地理位置</strong>——所在</p></li><li><p><strong>可信计算基</strong>：与鉴别相关的认证机制</p></li></ul></li><li><p>防止假冒攻击的重要技术</p></li></ul></li><li><p>UNIX&#x2F;Linux系统标识：</p></li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422103405315.png" alt="image-20220422103405315" style="zoom:67%;" /><p>​存放在&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow中</p><ul><li><p>基于口令的鉴别方法</p><ul><li><p>UNIX的密码系统：</p><ul><li>Hash密码——one way、计算代价大</li><li>所存在的问题：密码不是真正意义上的随机——52个大小写字母+10个数字+32个特殊字符&#x3D;94——<strong>字典攻击</strong>（人类大约有1，000，000通用的密码）</li></ul></li><li><p><strong>口令空间大小</strong>：字母表规模和口令长度的函数</p><p>设S：口令空间，L：口令的最大有效期，R：单位时间内可能的口令猜测数，P：口令有效期内被猜出的可能性，则：</p><p>$P＝(L×R)&#x2F;S$。</p></li><li><p><strong>口令长度计算</strong>：</p><p>设S：口令空间，A：字母表大小，M：口令长度，则：$M&#x3D;\left\lfloor\log _{A} S\right\rfloor$。</p></li><li><p>破解口令的方法：</p><ul><li>社会工程学方法</li><li>字典程序</li><li>口令文件窃取</li><li>暴力破解</li></ul></li><li><p>口令安全性的维护：系统管理员和用户</p><ul><li>系统管理员：初始化系统口令、初始口令分配、口令更改认证、用户ID、使用户ID重新生效、培训用户</li><li>用户：安全意识、更改口令</li></ul></li><li><p><strong>基于PKI的鉴别方法</strong></p><ul><li>PKI：Public Key Infrastructure，公开密钥基础设施</li><li>用于保证网上传递信息的安全、真实、完整和不可抵赖</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422104114887.png" alt="image-20220422104114887"></p></li></ul></li><li><p>Windows系统身份鉴别过程：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422104419517.png" alt="image-20220422104419517"></p></li><li><p>在网络环境中实现用户身份鉴别，要求同一合法用户可以在不同主机上执行身份鉴别。分三步走：</p><ul><li>身份认证信息管理</li><li>客户机软件功能</li><li>服务器软件功能</li></ul></li></ul><h2 id="11-4-访问控制"><a href="#11-4-访问控制" class="headerlink" title="11.4 访问控制"></a>11.4 访问控制</h2><p>基本任务：<strong>防止用户对系统资源的非法使用</strong>，保证对客体的所有直接访问都是被认可的。</p><ul><li>保护存储在计算机上的个人信息</li><li>保护重要信息的机密性</li><li>维护计算机内信息的完整性</li><li>减少病毒感染机会，从而延缓这种感染的传播</li><li>保证系统的安全性和有效性，以免受到偶然的和蓄意的侵犯</li></ul><p>措施：</p><ul><li>确定要保护的资源</li><li>授权</li><li>确定访问权限</li><li>实施访问权限</li></ul><p>访问控制技术：</p><ul><li><p><strong>自主访问控制</strong>（Discretionary Access Control）</p><p>允许对象的属主制定对该对象的保护策略。</p></li><li><p><strong>强制访问控制</strong>（Mandatory Access Control）</p><p>用于保护系统确定的对象，对此对象，用户不能进行更改。</p></li><li><p><strong>基于角色的访问控制</strong>（Role Based Access Control）</p><p>引入角色，通过对角色设置权限来规范用户和权限之间的关系。</p></li><li><p><strong>基于属性的访问控制</strong>（Attribute Based Access Control）</p><ul><li>通过动态计算一个或一组属性是否满足某种条件来进行授权判断</li><li>可实现不同粒度的权限控制</li><li>规则复杂，给管理员带来维护和追查方面的代价</li></ul></li></ul><h3 id="11-4-1-自主访问控制-DAC"><a href="#11-4-1-自主访问控制-DAC" class="headerlink" title="11.4.1 自主访问控制(DAC)"></a>11.4.1 自主访问控制(DAC)</h3><ul><li>基于对主体(<strong>属主</strong>)或主体所属组(<strong>属组</strong>)的识别来限制对客体的访问。</li><li><strong>基于行的自主访问控制机制</strong>（跟着主体[用户]走）<ul><li>能力表：权限字</li><li>前缀表：包括受保护的客体名和主体对它的访问权限</li><li>口令：每个客体有一个</li></ul></li><li><strong>基于列的自主访问控制机制</strong>（跟着客体[文件、资源]走）<ul><li>保护位：对客体的拥有者及其他主体、主体组，规定的对该客体访问模式的集合</li><li><strong>访问控制表</strong>：对某个特定资源制定任意用户的访问权限</li></ul></li><li><strong>基于权限位的访问控制</strong></li></ul><p>&#x3D;&#x3D;实现——基于权限位的访问控制&#x3D;&#x3D;</p><ul><li>访问权限的定义与表示：读、写、执行——三位二进制</li><li>用户划分为<strong>组</strong>，文件由<strong>属主（owner）、属组（group）、其他（others）</strong>控制。</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422105347988.png" alt="image-20220422105347988" style="zoom:67%;" /><p><strong>基本访问控制判断算法</strong>：判断用户U是否可对文件F执行a（r、w、x或-）操作。</p><ul><li>设：F的属主和属组分别为Uo和Go。</li><li>当U等于Uo时，如果F的左3权限位串中与a对应的位为1，则允许U对F执行a操作，否则，不允许U对F执行a操作，判定结束。</li><li>当Go是U的属组时，如果F的中3权限位串中与a对应的位为1，则允许U对F执行a操作，否则，不允许U对F进行a操作，判定结束。</li><li>如果F的右3权限位串中与a对应的位为1，则允许U对F执行a操作，否则，不允许U对F进行a操作。</li></ul><p>&#x3D;&#x3D;<strong>进程与用户和文件的关系</strong>&#x3D;&#x3D;：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422105529626.png" alt="image-20220422105529626" style="zoom:67%;" /><ul><li>进程p是用户Up的化身；</li><li>进程P的行为逻辑由文件F来确定</li><li>真实用户属性：RUID+RGID</li><li>有效用户属性：EUID+EGID</li><li>进程访问判定时：g(进程) —&gt; EUID+EGID</li></ul><p>&#x3D;&#x3D;<strong>执行过程</strong>&#x3D;&#x3D;：</p><ul><li>用户U启动进程P时：<ul><li>进程P的RUID和EUID &lt;— 用户U的ID</li><li>进程P的RGID和EGID &lt;— 用户U的属组ID</li></ul></li><li>进程P变身且映像文件F允许时：<ul><li>进程P的EUID &lt;— 文件F的属主ID——（1）<strong>【条件：文件F有SETUID标记】</strong></li><li>进程P的EGID &lt;— 文件F的属组ID——（2）<strong>【条件：文件F有SETGID标记】</strong></li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422105959027.png" alt="image-20220422105959027"></p><p><strong>进程的有效身份变化</strong>：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422110030469.png" alt="image-20220422110030469"></p><p>[例]（1）假设用户启动进程proc1，执行程序progf1。进程proc1的运行将显示什么信息？<br><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422110042914.png" alt="image-20220422110042914"></p><p>结果：China – England – Australia– Canada – America。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220422110112446.png" alt="image-20220422110112446"></p><p>&#x3D;&#x3D;（2）&#x3D;&#x3D;进程P显示England时，对文件filex的权限？</p><p>进程P执行到程序progf2时，文件progf2的属组ID变为grp2，对文件filex拥有<strong>读、执行（rx）权限</strong>。</p><p><strong>自主访问控制的缺陷</strong>：</p><ul><li>合法用户的修改授权，操作系统无法却分是用户的正常行为还是恶意攻击者的非法操作</li><li>攻击者可以利用DAC完成秘密信息的窃取</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220426163122522.png" alt="image-20220426163122522"></p><h3 id="11-4-2-强制访问控制-MAC"><a href="#11-4-2-强制访问控制-MAC" class="headerlink" title="11.4.2 强制访问控制(MAC)"></a>11.4.2 强制访问控制(MAC)</h3><p>​  对系统中的每个进程、文件、IPC客体赋予相应安全属性，当进程访问客体时，调用其安全属性和访问方法，比较进程的安全属性与客体的<strong>安全属性</strong>，确定是否允许访问（大于则允许访问）。</p><p>三种方法：</p><ul><li><strong>限制访问控制</strong>：限制用户程序修改其拥有的访问控制权限</li><li><strong>过程控制</strong>：对系统用户编程过程采取措施</li><li><strong>系统限制</strong>：通过系统自动完成对系统功能实时的一些限制</li></ul><p>强制访问控制对<strong>用户</strong>和<strong>文件</strong>两个方面：BLP—–&gt;<strong>MLS层级安全</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220426163822391.png" alt="image-20220426163822391"></p><p>用户下级对上级具有汇报权限。</p><p>实例：<strong>Multics方案</strong></p><ul><li>用户和文件（包括目录文件）都有相应的安全级</li><li>用户对文件的访问遵循下述安全策略：<ul><li>仅当用户的安全级别不低于文件的安全级别时，用户才可以读文件；</li><li>仅当用户的安全级别不高于文件的安全级别时，用于才可以写文件；</li></ul></li><li>常用于政府部门、军事和金融等领域，一般和自主访问控制结合使用</li></ul><h3 id="11-4-3-其他访问控制方法"><a href="#11-4-3-其他访问控制方法" class="headerlink" title="11.4.3 其他访问控制方法"></a>11.4.3 其他访问控制方法</h3><p><strong>基于角色的访问控制（RBAC）</strong>：</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220426164515485.png" alt="image-20220426164515485" style="zoom:50%;" /><p>基于任务的访问控制——93～97年R.K.Thomas等人提出的（TBAC）</p><ul><li>基本思想：从任务角度进行授权控制，在任务执行前授予权限，在任务完成后回收权限。</li><li>主动安全模型</li></ul><p>基于角色-任务的访问控制——98年G.Coulouria等人提出的T-RBAC</p><p>基于规则策略的访问控制E.Bertino等人提出的</p><p>面向服务的工作流访问控制（SOWAC）</p><p>基于状态的访问控制</p><p>基于行为属性的访问控制（ABAC）</p><h2 id="11-5-最小特权管理"><a href="#11-5-最小特权管理" class="headerlink" title="11.5 最小特权管理"></a>11.5 最小特权管理</h2><p>特权（Privilege）是进程执行一些安全相关操作所必须具备的权限。</p><p>滥用特权将导致非常严重的后果。特权进程的可信性面临巨大的挑战：</p><ul><li>漏洞</li><li>恶意代码</li><li>缓冲区溢出</li></ul><p>解决方法：有效支持<strong>最小特权原则</strong>（Principle of Least Privilege）</p><h3 id="11-5-1-最小特权原则概述"><a href="#11-5-1-最小特权原则概述" class="headerlink" title="11.5.1 最小特权原则概述"></a>11.5.1 最小特权原则概述</h3><p>是系统安全中最基本的原则之一，要求赋予系统中每个使用者执行授权任务所需的限制性最强的一组特权，即最低许可。其常见的形式有：</p><ul><li>基于<strong>文件</strong>的特权机制<ul><li><strong>固定特权集</strong></li><li><strong>可继承特权集</strong></li></ul></li><li>基于<strong>进程</strong>的特权机制</li></ul><p><strong>三大特权集</strong>：</p><ul><li><strong>最大特权集</strong></li><li><strong>可继承特权集</strong></li><li><strong>有效特权集</strong></li></ul><p>要较好地支持最小特权原则，应遵循以下原则：</p><ul><li>以进程（程序）逻辑为中心进行特权控制；</li><li>以进程特权相关属性为依据对进程生命周期进行划分，进程在各个阶段中根据进程逻辑分配不同的特权；</li><li>用户特权属性仅作为一种全局性的约束；</li><li>在部分特权中引入特权参数提供更细粒度的特权控制；</li><li>与原有机制的尽量兼容，对应用程序透明。</li></ul><h3 id="11-5-2-特权管理职责"><a href="#11-5-2-特权管理职责" class="headerlink" title="11.5.2 特权管理职责"></a>11.5.2 特权管理职责</h3><ul><li><strong>系统安全管理员SSO</strong>：对系统资源和应用定义安全级、定义用户组、为所有用户赋予安全级、限制隐蔽通道活动的机制</li><li><strong>审计员AUD</strong>：设置审计参数、修改和删除审计信息</li><li><strong>操作员OP</strong>：启动或停止系统、设置终端参数、允许或不允许登录</li><li><strong>网络管理员NET</strong>：管理网络软件，配置网络协议</li></ul><h2 id="11-6-可信通路和审计机制"><a href="#11-6-可信通路和审计机制" class="headerlink" title="11.6 可信通路和审计机制"></a>11.6 可信通路和审计机制</h2><p><strong>可信通路</strong>：</p><ul><li>是用户能借以直接<strong>同可信计算基（TCB）通信</strong>的一种机制</li><li>建立可信通路的方法：<strong>安全注意键</strong>（在Windows中是Ctrl+Alt+System Request）</li></ul><p><strong>审计机制</strong>：</p><ul><li>日志：记录的事件或统计数据</li><li>安全审计：对日志记录的分析并以清晰的、能理解的方式表述系统信息，即对系统中有关安全的活动进行记录、检查及审核</li><li>作用：<strong>审计事件：主体、客体</strong></li><li>类型：<ul><li><strong>系统级审计</strong>：登录情况、登录识别号、每次登录尝试的日期和具体时间、每次退出的日期和时间、所使用的设备、登录后运行的内容</li><li><strong>应用级审计</strong>：打开和关闭数据文件、读取、编辑和删除记录或字段的特定操作、打印报告等用户活动</li><li><strong>用户级审计</strong>：用户直接启动的所有命令、用户所有鉴别和认证尝试、用户所访问的文件和资源等方面</li></ul></li></ul><p><strong>组成</strong>：</p><ul><li><strong>日志记录器</strong>：收集数据——系统日志、应用程序日志、安全日志</li><li><strong>分析器</strong>：分析数据</li><li><strong>通告器</strong>：通报结果</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220426172544872.png" alt="image-20220426172544872" style="zoom:67%;" /><p><strong>审计日志格式</strong>：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220426180736027.png" alt="image-20220426180736027"></p><h1 id="ch12-操作系统的安全模型"><a href="#ch12-操作系统的安全模型" class="headerlink" title="ch12.操作系统的安全模型"></a>ch12.操作系统的安全模型</h1><h2 id="12-1-安全模型概述"><a href="#12-1-安全模型概述" class="headerlink" title="12.1 安全模型概述"></a>12.1 安全模型概述</h2><p>安全模型的定义：</p><ul><li>对安全策略所表达的安全需求进行简单、抽象和无歧义的描述</li></ul><blockquote><p>安全策略即有关管理、保护和发布敏感信息的法律、规定和实施细则。</p></blockquote><ul><li>即描述对某个安全策略需要用哪种<strong>机制</strong>来满足</li><li>描述安全策略和它实现机制之间关联的框架</li></ul><p>安全策略的目标：</p><ul><li>明确表达安全需求</li><li>为设计开发安全系统提供方针</li></ul><p>安全策略的分类：</p><ul><li><strong>形式化安全模型</strong>（例：BLP模型）</li><li>非形式化安全模型</li></ul><p>安全策略的特点：</p><ul><li>精确、无歧义</li><li>易理解</li><li>一般性</li><li>安全策略的显式表示</li></ul><p>开发安全模型的一般性步骤：</p><ul><li>确定<strong>外部接口需求</strong>（用户）</li><li>确定<strong>内部安全需求</strong>（内部安全策略、机制）</li><li>设计策略执行的操作规则</li><li>确定<strong>已知元素</strong>（保护内容）</li><li>论述一致性和正确性：<strong>形式化验证</strong><ul><li><strong>归纳验证</strong></li><li><strong>模型检验</strong></li></ul></li><li>论述关联性</li></ul><p><strong>安全模型的分类</strong>：</p><ul><li>按<strong>实现策略</strong>分：<strong>保密性模型、完整性模型、混合性模型</strong></li><li>按<strong>实现方式</strong>分：<strong>访问控制模型、信息流模型</strong></li></ul><h2 id="12-2-访问控制模型"><a href="#12-2-访问控制模型" class="headerlink" title="12.2 访问控制模型"></a>12.2 访问控制模型</h2><h3 id="12-2-1-组成元素及操作"><a href="#12-2-1-组成元素及操作" class="headerlink" title="12.2.1 组成元素及操作"></a>12.2.1 组成元素及操作</h3><p>&#x3D;&#x3D;<strong>组成元素</strong>&#x3D;&#x3D;：</p><ul><li>对象集$O$，主体集$S$。</li><li>实体间的关系——存放在矩阵$A$中，用$a[s,o]$表示。</li><li>系统的保护状态集是三元关系$(S,O,A)$</li><li>操作集$T_{1},T_{2}$</li><li>原始状态$X_{0}&#x3D;(S_{0},O_{0},A_{0})$，连续状态：$X_{1},X_{2},……$</li></ul><p>&#x3D;&#x3D;<strong>操作指令及结果的形式化表达</strong>&#x3D;&#x3D;：</p><p><strong>创建一个新主体</strong>$s$：$s$不属于$S$</p><ul><li><p>指令：createsubjects</p></li><li><p>结果：$S^{\prime}&#x3D;S \cup{s}$，$O^{\prime}&#x3D;O \cup{s}$，（<strong>进程属于主体、客体</strong>）</p><p>$(∀y∈O’)[a’[s，y]&#x3D;\varnothing],(∀x∈S’)[a’[x，s]&#x3D;\varnothing],(∀x∈S)(∀y∈O)[a’[x,y]&#x3D;a[x,y]]$</p></li></ul><p><strong>创建一个新对象</strong>$o$：</p><ul><li>$O^{\prime}&#x3D;O \cup{o}$，</li><li>$(∀x∈S)(∀y∈O)[a’[x，y]&#x3D;a[x，y]],(∀x∈S)[a’[x，{o}]&#x3D;\varnothing]]$</li></ul><p><strong>向$a[s,o]$中加入权限</strong>$r$：</p><ul><li>$(∀x∈S)(∀y∈O)[a’[x,y]&#x3D;a[x,y]]$</li><li>对$x&#x3D;s,y&#x3D;o,[a’[x,y]&#x3D;a[x,y]\cup{r}]$</li></ul><p><strong>删除主体</strong>$s$：</p><ul><li><p>$S^{\prime}&#x3D;S -{s}$，$O^{\prime}&#x3D;O -{s}$</p></li><li><p>对$(∀x∈S’)(∀y∈O’)[a’[x，y]&#x3D;a[x，y]]$</p></li></ul><h3 id="12-2-2-模型总结"><a href="#12-2-2-模型总结" class="headerlink" title="12.2.2 模型总结"></a>12.2.2 模型总结</h3><ul><li><p>访问控制矩阵是计算机安全中的原始抽象机制，可以表达任何可以表达的安全规则</p></li><li><p>可以采用命令形式<strong>改变、转换系统的状态</strong></p></li><li><p><strong>特权弱化法</strong>可以产生条件，规定如果主体不拥有权限，就不能把这个权力授予任何人</p></li></ul><blockquote><p>注：</p><p>特权包括switch、copy、owner等；</p><p>特权弱化法指主体不把自己不拥有的特权给其他主体。</p></blockquote><p><strong>BLP模型：机密性模型</strong></p><p>包括有两部分安全策略：自主安全策略和强制安全策略；</p><p><strong>Biba模型：完整性模型</strong></p><p>实现：对系统每个主体和每个客体分配一个完整级别（包含两部分——密级和范畴）；安全策略分为非自主策略与自主策略；</p><p><strong>Clark-Wilson模型：完整性模型</strong></p><p>核心：良构事务（well-formal transaction）和任务分离机制</p><ul><li>良构事务：指一个用户不能任意操作数据，只能用一种能够确保数据完整性的受控方式操作数据；</li><li>良构事务处理机制：用户不能任意处理数据，而必须以确保数据完整性的受限方式来对数据进行处理</li><li>任务分离机制：将任务分成多个子集，不同的子集由不同的人来完成。</li></ul><p><strong>中国墙模型：混合性模型</strong></p><p>非形式化描述：层次结构</p><ul><li>最底层：标识单个企业的数据项</li><li>中间层：企业数据集，客体按所属的企业分组</li><li>最高层：利益冲突类，由具有竞争关系的企业数据集组成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机学科理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络理论</title>
      <link href="/2022/08/13/li-lun-02-ji-suan-ji-wang-luo-li-lun/"/>
      <url>/2022/08/13/li-lun-02-ji-suan-ji-wang-luo-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-计算机网络概述"><a href="#第1章-计算机网络概述" class="headerlink" title="第1章 计算机网络概述"></a>第1章 计算机网络概述</h1><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614184545924.png" alt="image-20220614184545924"></p><h2 id="1-各种网络"><a href="#1-各种网络" class="headerlink" title="1. 各种网络"></a>1. 各种网络</h2><ul><li>网络(<code>Network</code>)由若干**结点(Node)<strong>和连接这些结点的</strong>链路(Link)**组成</li><li>多个网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网(互连网)。因此，互联网是”<strong>网络的网络(Network of Networks)</strong>“</li><li>**因特网(Internet)**是世界上最大的互连网络【小写<code>i</code>的<code>internet</code>是通用名词，互连的网络都叫<code>internet</code>】</li></ul><h2 id="2-ISP"><a href="#2-ISP" class="headerlink" title="2.  ISP"></a>2.  ISP</h2><blockquote><p>因特网服务提供者(<code>Internet Service Provider</code>)</p></blockquote><p><strong>普通用户如何接入因特网？</strong></p><blockquote><p>通过<code>ISP</code>接入因特网。<code>ISP</code>可以从因特网管理机构申请到成块的<code>IP</code>地址，同时拥有通信线路以及路由器等连网设备，任何机构和个人只要向<code>ISP</code>交纳规定的费用，就可以从<code>ISP</code>得到所需要的<code>IP</code>地址。互联网上的主机都必须有<code>IP</code>地址才能通信</p></blockquote><img src="https://s2.loli.net/2022/03/29/uBXlYmagVoEebrt.png" alt="image-20210121200820943" style="zoom:50%;" /><p><strong>基于ISP的三层结构的因特网</strong></p><blockquote><p>层数越小覆盖越多</p></blockquote><img src="https://s2.loli.net/2022/03/29/zfahAlT81LQHOYn.png" alt="image-20210121201046211" style="zoom: 50%;" /><h2 id="3-因特网的组成"><a href="#3-因特网的组成" class="headerlink" title="3. 因特网的组成"></a>3. 因特网的组成</h2><ul><li><strong>边缘部分</strong>：由所有连接在因特网上的<strong>主机</strong>组成，这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>(传送数据、音频或视频)和资源共享</li><li><strong>核心部分</strong>：由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的(提供连通性和交换)</li></ul><img src="https://s2.loli.net/2022/03/29/NMniLF9d7OqTXHa.png" alt="image-20210121201647987" style="zoom:50%;" /><h2 id="4-三种交换方式"><a href="#4-三种交换方式" class="headerlink" title="4. 三种交换方式"></a>4. 三种交换方式</h2><h3 id="①电路交换-Circuit-Switching"><a href="#①电路交换-Circuit-Switching" class="headerlink" title="①电路交换(Circuit Switching)"></a>①电路交换(Circuit Switching)</h3><h4 id="1-电路交换怎么出现的？"><a href="#1-电路交换怎么出现的？" class="headerlink" title="1. 电路交换怎么出现的？"></a>1. 电路交换怎么出现的？</h4><blockquote><p>电话问世后，人们发现所有电话之间都两两相连是不现实的。因此可以用一个中间设备将讲话接入，根据需要进行转发</p></blockquote><p><img src="https://s2.loli.net/2022/03/29/9nkTpqEL6cMPrNR.png" alt="image-20210121203128307"></p><h4 id="2-什么是电路交换？"><a href="#2-什么是电路交换？" class="headerlink" title="2. 什么是电路交换？"></a>2. 什么是电路交换？</h4><blockquote><p>电话交换机接通电话线的方式称为电路交换<br>从通信资源分配角度来看，交换(<code>Switch</code>)就是按照某种方式动态地分配传输线路的资源</p></blockquote><h4 id="3-电路交换三个步骤"><a href="#3-电路交换三个步骤" class="headerlink" title="3. 电路交换三个步骤"></a>3. 电路交换三个步骤</h4><ol><li><strong>建立连接(分配通信资源)<strong>：例如在使用电路交换打电话前，必须先拨号请求建立连接，当被叫用户听到电话交换机送来的拨号音并拿起电话后，从主叫端到被叫端就建立了一条连接，也就是一条</strong>专用的</strong>物理通路。这条连接保证了双方通话时所需的通信资源，而这些资源在双方通信中<strong>不会被其他用户占用</strong></li><li>**通话(一直占用通信资源)**：分配的资源始终被占用</li><li><strong>释放连接(归还通信资源)</strong></li></ol><img src="https://s2.loli.net/2022/03/29/jfiQKBsqvL4AG3d.png" alt="image-20210121204047141" style="zoom:50%;" /><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>通信时延小</strong>：通信线路为通信双方专用的，数据直达</li><li><strong>有序传输</strong>：通信双方只有一条专用通信线路，数据只在这一线路上传输，不存在失序问题</li><li><strong>没有冲突</strong>：不同的通信双方拥有不同的信道，不会出现争用物理通道的问题</li><li><strong>适用范围广</strong>：适用于传输模拟信号，也适用于传输数字信号</li><li><strong>实时性强</strong>：时延小所以实时性强</li><li><strong>控制简单</strong></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>建立连接时间长</strong></li><li><strong>线路独占，适用效率低</strong></li><li><strong>灵活性差</strong>：只要连接所建立的物理通路中的任何一点出现了故障，就必须重新拨号建立新的连接</li><li><strong>难以规格化</strong>：不同类型、不同规格、不同速率的终端很难互相进行通信，也难以差错控制</li></ol><h3 id="②★分组交换-Packet-Switching"><a href="#②★分组交换-Packet-Switching" class="headerlink" title="②★分组交换(Packet Switching)"></a>②★分组交换(Packet Switching)</h3><ul><li><strong>发送方</strong>：①构建分组 ②发送分组</li><li><strong>路由器</strong>：①缓存分组 ②转发分组</li><li><strong>接收方</strong>：①接收分组 ②还原报文</li></ul><img src="https://s2.loli.net/2022/03/29/wtgb3n1AkM7pS8Y.png" alt="image-20210121205942542" style="zoom: 50%;" /><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>无需建立连接</strong></li><li><strong>线路利用率高</strong></li><li><strong>简化存储管理</strong>：因为分组大小固定，管理起来就容易一些</li><li><strong>加速传输</strong>：因为分组是逐个传输，这样前一个交换机的转发操作与后一个交换机的存储操作可同时进行</li><li><strong>减少出错率和重复数据量</strong>：分组比报文小，因此出错概率也会比较小，即使出错也只需要重传出错的这一小部分即可</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>引起了<strong>转发时延</strong></li><li>需要传输<strong>额外信息量</strong>(分组头部信息)</li><li>当<strong>分组交换采用数据报服务时，可能会出现失序、丢失、重复分组</strong>。分组到达目的结点时，需要<strong>重新还原成原始报文，比较麻烦</strong>。若分组交换采用<strong>虚电路服务</strong>，虽然没有分组失序问题，但<strong>有呼叫建立，数据传输和虚电路释放三个过程</strong></li></ol><h3 id="③报文交换-Message-Switching"><a href="#③报文交换-Message-Switching" class="headerlink" title="③报文交换(Message Switching)"></a>③报文交换(Message Switching)</h3><blockquote><p>报文交换与分组交换类似，不过对报文没有限制大小，现如今多使用分组交换。</p></blockquote><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>无需建立连接</strong></li><li><strong>动态分配线路</strong></li><li><strong>提高线路可靠性</strong>：如果某条线路出现故障，会重新选择另一条线路</li><li><strong>提高线路利用率</strong>：通信双方在不同的时间分段占用物理线路</li><li><strong>提供多目标服务</strong>：一个报文可以同时发送给多个目的地址</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li><strong>引起转发时延</strong>：报文在节点交换机上要经历存储转发的过程</li><li><strong>需要较大的存储转发空间</strong>：因为报文大小没有限制</li><li><strong>需要传输额外信息量</strong>：有头部等信息</li></ol><h3 id="三种交换对比"><a href="#三种交换对比" class="headerlink" title="三种交换对比"></a>三种交换对比</h3><blockquote><p>纵坐标为时间，分组交换相对报文交换分的更小，可以减少时延，防止过长时间占用线路以及方便排错</p></blockquote><h2 id="5-计算机网络"><a href="#5-计算机网络" class="headerlink" title="5. 计算机网络"></a>5. 计算机网络</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>一些<strong>互相连接</strong>的、<strong>自治</strong>的计算机的<strong>集合</strong></p></blockquote><ul><li><strong>互连</strong>：指计算机之间可以通过有线或无线的方式进行数据通信</li><li><strong>自治</strong>：指独立的计算机，它有自己的硬件和软件，可以单独运行使用</li><li><strong>集合</strong>：指至少需要两台计算机</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>按交换技术</strong>：①电路交换网络 ②报文交换网络 ③分组交换网络</p><p><strong>按使用者</strong>：①公用网 ②专用网</p><p><strong>按传输介质</strong>：①有线网络 ②无线网络</p><p><strong>按覆盖范围：&#x3D;&#x3D;①广域网WAN ②城域网MAN ③局域网LAN ④个域网PAN&#x3D;&#x3D;</strong></p><p><strong>按拓扑结构</strong>：①总线型网络 ②星型网络 ③环型网络 ④网状型网络</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><blockquote><p>性能指标可以从不同的方面来度量计算机网络的性能</p></blockquote><h4 id="1-速率"><a href="#1-速率" class="headerlink" title="1. 速率"></a>1. 速率</h4><blockquote><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称为比特率或数据率</p></blockquote><p><strong>常用数据率单位</strong><br>$$<br>bit&#x2F;s可缩写为b&#x2F;s或bps\1\ kb&#x2F;s&#x3D;10^{3}\ b&#x2F;s\1\ Mb&#x2F;s&#x3D;10^{6}\ b&#x2F;s\1\ Gb&#x2F;s&#x3D;10^{9}\ b&#x2F;s\1\ Tb&#x2F;s&#x3D;10^{12}\ b&#x2F;s\<br>$$</p><h5 id="比特"><a href="#比特" class="headerlink" title="比特"></a><strong>比特</strong></h5><blockquote><p>计算机中的数据量单位，也是信息论中信息量的单位。一个比特就是二进制数字中的一个<code>1</code>或<code>0</code>.</p></blockquote><p><strong>常用数据量</strong></p><img src="https://s2.loli.net/2022/03/29/dDJP5qT3y1WC26B.png" alt="image-20220329154706248" style="zoom:67%;" /><h4 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2. 带宽"></a>2. 带宽</h4><p><strong>带宽在模拟信号系统中的意义</strong></p><blockquote><p>信号所包含的各种不同频率成分所占据的频率范围</p><p>单位：<code>Hz（kHz，MHz，GHz）</code></p></blockquote><p><strong>带宽在计算机网络中的意义</strong></p><blockquote><p>用来表示网络的<strong>通信线路</strong>所能传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的”最高数据率”</p><p>单位：<code>b/s（kb/s，Mb/s，Gb/s，Tb/s）</code></p></blockquote><p><strong>一条通信线路的”频带宽度”越宽，其所传输数据的”最高数据率”也越高</strong></p><h4 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3. 吞吐量"></a>3. 吞吐量</h4><blockquote><p>吞吐量表示在<strong>单位时间内通过某个网络(或信道、接口)的数据量。<br><strong>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。<br>吞吐量</strong>受网络的带宽或额定速率的限制</strong></p></blockquote><h4 id="4-★时延"><a href="#4-★时延" class="headerlink" title="4. ★时延"></a>4. ★时延</h4><blockquote><p>在处理过程中所需要的时间</p></blockquote><img src="https://s2.loli.net/2022/03/29/aVo5qz8T2ALPpsm.png" alt="image-20210122211654475" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/Obtw1ysZp9aHWfR.png" alt="image-20210201213615002" style="zoom: 50%;" /><h4 id="5-时延带宽积"><a href="#5-时延带宽积" class="headerlink" title="5. 时延带宽积"></a>5. 时延带宽积</h4><img src="https://s2.loli.net/2022/03/29/lHseOxXwYITAuLz.png" alt="image-20210122211936217" style="zoom:50%;" /><h4 id="6-往返时间"><a href="#6-往返时间" class="headerlink" title="6. 往返时间"></a>6. 往返时间</h4><blockquote><p>在许多情况下，因特网上的信息不仅仅单方向传输，而是双向交互<br>我们有时很需要知道双向交互一次所需要的时间<br>因此，往返时间<code>RTT(Round-Trip Time)</code>也是一个重要的性能指标</p></blockquote><h4 id="7-★利用率"><a href="#7-★利用率" class="headerlink" title="7. ★利用率"></a>7. ★利用率</h4><blockquote><p><strong>信道利用率</strong>：用来表示某信道有百分之几的时间是被利用的(有数据通过)<br><strong>网络利用率</strong>：全网络的信道利用率的加权平均</p></blockquote><ul><li><p>根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加。因此<strong>信道利用率不是越高越好</strong></p></li><li><p>如果令**$D_0$表示网络空闲时的时延<strong>，</strong>D表示网络当前的时延<strong>，那么在适当的假定条件下，可以用下面的简单公式来表示<code>D</code>、$D_0$和</strong>利用率U**之间的关系：</p><p>​$D&#x3D;\dfrac{D_0}{1-U}$</p><img src="https://s2.loli.net/2022/03/29/KyvCpe8fkm9IoG1.png" alt="image-20210122213806619" style="zoom:50%;" /><p>当网络利用率<code>U</code>到<code>50%</code>时，时延急剧增大。</p><p>当网络利用率接近<code>100%</code>时，时延趋于无穷大</p><p>但是也不能使信道利用率过低，这回使宝贵的通信资源被浪费</p></li></ul><p>因此一些拥有较大主干网的<code>ISP</code>通常会控制它们的信道利用率不超过<code>50%</code>。如果超过了，就要准备扩容，增大线路带宽</p><h4 id="8-丢包率"><a href="#8-丢包率" class="headerlink" title="8. 丢包率"></a>8. 丢包率</h4><blockquote><p>丢包率即分组丢失率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong><br>具体可分为：接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等</p></blockquote><p><strong><code>丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标，因为他们意识不到丢包</code></strong></p><p><strong>分组丢失的两种情况</strong></p><ul><li>分组在传输过程中出现误码，被结点丢弃</li><li>分组到达一台队列已满的分组交换机时被丢弃，在通信量较大时就可能造成网络拥塞</li></ul><p><strong>丢包率反映了网络的拥塞情况</strong></p><ul><li><strong>无拥塞</strong>时路径丢包率为<code>0</code></li><li>轻度拥塞时路径丢包率为<code>1%~4%</code></li><li><strong>严重拥塞</strong>时路径丢包率为<code>5%~15%</code></li></ul><h3 id="★体系结构"><a href="#★体系结构" class="headerlink" title="★体系结构"></a>★体系结构</h3><img src="https://s2.loli.net/2022/03/29/PlZ4cFQSUz5iytE.png" alt="image-20210123205428269" style="zoom: 50%;" /><h4 id="1-分层的必要性"><a href="#1-分层的必要性" class="headerlink" title="1. 分层的必要性"></a>1. 分层的必要性</h4><blockquote><p>在平常编程时，我们总是喜欢利用不同的类实现不同的功能，最后进行整合实现真正的功能。这样的好处是让结构更加清晰，维护也更加简单。计算机网络分层同理，在计算机网络上实现不同进程的通信需要解决众多问题，分层便于维护与管理。</p></blockquote><img src="https://s2.loli.net/2022/03/29/XAubROFtQ4nKPwv.png" alt="image-20210123210720665" style="zoom:67%;" /><h4 id="2-分层举例"><a href="#2-分层举例" class="headerlink" title="2. 分层举例"></a>2. 分层举例</h4><blockquote><p>当我们利用浏览器发送网页请求到服务器并发生响应的过程中，数据会怎么变化呢？</p></blockquote><img src="https://s2.loli.net/2022/03/29/1oX4vO6nHZElzks.png" alt="image-20210123211632255" style="zoom:50%;" /><p><strong>浏览器发送</strong></p><ul><li>应用层按照<code>HTTP协议</code>的规定构建一个**HTTP请求报文(请求要干什么)**。应用层将<code>HTTP请求</code>的报文交给传输层处理</li><li>传输层给<code>HTTP请求</code>报文添加一个**TCP首部(区分应用进程)**，使之成为<code>TCP报文段</code>。传输层将<code>TCP报文段</code>交给网络层处理</li><li>网络层给<code>TCP报文段</code>添加一个**IP首部(使之可以在互联网上传输)**，使之成为<code>IP数据报</code>。网络层将<code>IP数据报</code>交付给数据链路层处理</li><li>数据链路层给<code>IP数据报</code>添加一个<strong>首部(让其能在一段链路上传输，能被相应主机接收)<strong>和一个</strong>尾部(让目的主机检查所接收到的帧是否有误码)<strong>，使之成为</strong>帧</strong>。数据链路层将帧交给物理层</li><li>物理层将帧看作比特流，如果网络是以太网，它还会在帧上加**前导码(让目的主机做好接收帧的准备)**。接着将比特流变成相应信号发送到传输媒体</li></ul><p><strong>路由器转发</strong></p><ul><li>物理层收到<strong>信号</strong>将其变<strong>为比特流</strong>，去掉前导码后，将其交付给数据链路层**(交付的实际是帧)**</li><li>数据链路层将帧去掉首部和尾部后，将其交付给网络层**(交付的实际是IP数据报)**</li><li>网络层解析<code>IP数据报</code>首部，从中提取目的网络地址，然后查找自身路由表，确定转发端口。接着数据链路层封装，物理层再封装，将比特流变成信号发送出去。</li></ul><p><strong>服务器接收</strong></p><ul><li>物理层<strong>收到信号将其变为比特流</strong>，去掉前导码后，将其交付给数据链路层**(交付的实际是帧)**</li><li>数据链路层收到帧后，去除首部和尾部，将其交付给网络层**(交付的实际是IP数据报)**</li><li>网络层收到<code>IP数据报</code>后，去除<code>IP首部</code>，将其交付给传输层**(交付的实际是TCP报文)**</li><li>传输层收到<code>TCP报文</code>后，从中得知是与哪个端口上的进程通信，去除<code>TCP头部</code>后，交付给应用层**(交付的实际是HTTP请求报文)**</li><li>应用层收到<code>HTTP请求</code>报文后，将其解析给对应进程，并执行相关操作，<strong>返回HTTP响应报文</strong></li></ul><h3 id="专用术语"><a href="#专用术语" class="headerlink" title="专用术语"></a>专用术语</h3><h4 id="①实体"><a href="#①实体" class="headerlink" title="①实体"></a>①实体</h4><blockquote><p>任何可发送或接收信息的<strong>硬件</strong>或者<strong>软件进程</strong></p></blockquote><p><strong>对等实体</strong>：收发双方<strong>相同层次</strong>中的实体</p><img src="https://s2.loli.net/2022/03/29/6EOl7rsHQGqkvp5.png" alt="image-20210124104043684" style="zoom:50%;" /><h4 id="②协议"><a href="#②协议" class="headerlink" title="②协议"></a>②协议</h4><blockquote><p>控制两个对等实体进行**逻辑通信(这种通信实际上不存在，只是便于我们考虑问题)**的规则的集合</p></blockquote><img src="https://s2.loli.net/2022/03/29/Kb92fcNAVI6QRUk.png" alt="image-20210124104347393" style="zoom:67%;" /><p><strong>三要素</strong></p><ul><li><strong>语法</strong>：定义所交换<strong>信息的格式</strong>(即报文格式)</li><li><strong>语义</strong>：定义收发双方所要完成的操作(即收，发任务需要各自定义)</li><li><strong>同步</strong>：定义收发双方的时序关系(如先建立侦听才可以通信是有先后顺序的)</li></ul><h4 id="③服务"><a href="#③服务" class="headerlink" title="③服务"></a>③服务</h4><ul><li>在协议控制下，两个对等实体间的逻辑通信使得本层能够<strong>向上一层提供服务(也就是说通过协议完成本层的内容后就可以向上提供服务)</strong></li><li>要实现本层协议，还需要使用下面一层所提供的服务</li><li>协议是**”水平的”<strong>，服务是</strong>“垂直的”**</li><li>实体看得见相邻下层所提供的的服务，但是并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是**”透明”**的<code>(就像手机为我们提供服务，但是我们并不知道具体是如何实现的)</code></li></ul><p><strong>服务访问点</strong>：在同一系统中**相邻两层的实体交换信息的逻辑接口(就像Web里的request域，后端前端都能取到)**，用于区分不同的服务类型</p><ul><li>数据链路层的服务访问点为帧的”类型”字段</li><li>网络层的服务访问点位IP数据报首部中的”协议字段”</li><li>传输层的服务访问点为”端口号”</li></ul><p><strong>服务原语：</strong>上层使用下层所提供的服务必须通过与下层<strong>交换一些命令</strong>，这些命令称为服务原语</p><img src="https://s2.loli.net/2022/03/29/LhkZ2SMQCam1VPz.png" alt="image-20210124112759316" style="zoom:50%;" /><p>**协议数据单元PDU(横向)**：对等层次之间传送的数据包称为该层的协议数据单元</p><ul><li>物理层是比特流；数据链路层是帧；网络层是IP数据报或分组……</li></ul><p>**服务数据单元SDU(竖向)**：同一系统内，层与层之间交换的数据报称为服务数据单元</p><ul><li>物理层往上送是比特流；数据链路层往下送是帧……</li></ul><p><strong>多个SDU可用合成为一个PDU；一个SDU页可以划分为几个PDU</strong></p><h1 id="第2章-物理层"><a href="#第2章-物理层" class="headerlink" title="第2章 物理层"></a>第2章 物理层</h1><blockquote><p>考虑怎样才能在连接各种计算机的传输媒体上传输数据比特流<br>物理层为数据链路层<strong>屏蔽了各种传输媒体的差异</strong>，使数据链路层只需要考虑如何完成本层的协议和服务，而不必考虑网络具体的传输媒体是什么</p></blockquote><h2 id="1-★物理层协议主要任务"><a href="#1-★物理层协议主要任务" class="headerlink" title="1. ★物理层协议主要任务"></a>1. ★物理层协议主要任务</h2><ul><li>&#x3D;&#x3D;<strong>机械特性</strong>&#x3D;&#x3D;：指明接口所用接线器的<strong>形状</strong>和<strong>尺寸</strong>、<strong>引脚数目</strong>和<strong>排列</strong>、<strong>固定</strong>和<strong>锁定</strong>装置</li><li>&#x3D;&#x3D;<strong>电气特性</strong>&#x3D;&#x3D;：指明在接口电缆的各条线上出现的<strong>电压范围</strong></li><li>&#x3D;&#x3D;<strong>功能特性</strong>&#x3D;&#x3D;：指明某条线上出现的某一电平的<strong>电压表示何种意义</strong></li><li>&#x3D;&#x3D;<strong>过程特性</strong>&#x3D;&#x3D;：指明对于不同功能的各种可能<strong>事件的出现顺序</strong></li></ul><h2 id="2-传输媒体"><a href="#2-传输媒体" class="headerlink" title="2. 传输媒体"></a>2. 传输媒体</h2><h3 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h3><blockquote><p>有摸得到的实物进行传导信号的方式</p></blockquote><h4 id="①同轴电缆"><a href="#①同轴电缆" class="headerlink" title="①同轴电缆"></a>①同轴电缆</h4><blockquote><p>电缆各层都是同轴心的，因此称同轴电缆</p></blockquote><img src="https://s2.loli.net/2022/03/29/mMQScoy1V4vj75R.png" alt="image-20210126184247727" style="zoom:50%;" /><p>**基带同轴电缆(50$\Omega$)**：数字传输，过去用于局域网<br>**宽带同轴电缆(75$\Omega$)**：模拟传输，目前主要用于有线电视</p><p>同轴电缆<strong>价格较贵且布线不够灵活和方便</strong>，随着集线器的出现，在局域网领域基本上都是采用双绞线作为传输媒体</p><h4 id="②★双绞线"><a href="#②★双绞线" class="headerlink" title="②★双绞线"></a>②★双绞线</h4><blockquote><p>把两根互相绝缘的铜导线并排放在一起，然后按照一定规则绞合起来就构成了双绞线，这是一种古老且常用的传输媒体</p></blockquote><p><strong>常用绞合线类别、带宽和典型应用</strong></p><img src="https://s2.loli.net/2022/03/29/KuZjRHWXC7PDMq5.png" alt="image-20210126194014016" style="zoom:50%;" /><h5 id="UTP"><a href="#UTP" class="headerlink" title="UTP"></a>UTP</h5><blockquote><p><strong>无屏蔽</strong>双绞线<code>UTP</code>电缆</p></blockquote><ul><li>蓝线和蓝白线绞合</li><li>橙线和橙白线绞合</li><li>绿线和绿白线绞合</li><li>棕线和棕白线绞合</li></ul><p><strong>作用</strong>：①抵御部分来自外界的电磁波干扰   ②减少相邻导线的电磁干扰</p><h5 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h5><blockquote><p><strong>屏蔽</strong>双绞线<code>STP</code>电缆，其与<code>UTP</code>相比增加了金属丝编织的屏蔽层，提高了抗电磁干扰能力</p></blockquote><h4 id="③★光纤"><a href="#③★光纤" class="headerlink" title="③★光纤"></a>③★光纤</h4><blockquote><p>光纤很细，因此必须将其做成结实的光缆。一根光缆少则一根光纤，多则可包括数百根</p></blockquote><img src="https://s2.loli.net/2022/03/29/9OGYnzCNe2T4ykH.png" alt="image-20210126194452262" style="zoom: 67%;" /><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><img src="https://s2.loli.net/2022/03/29/k7hcjmXlfpzDW3n.png" alt="image-20210126195712317" style="zoom:50%;" /><p>如果全反射一直进行，则光就会沿着光纤一直传输下去。</p><p>实际上只要入射角大于某个临界角度就可以发生全反射，因此多条不同角度的光可以在光线里一起传输，这种光纤称作<strong>多模光纤</strong></p><img src="https://s2.loli.net/2022/03/29/E2oiLS9O3Wu8mrx.png" alt="image-20210126201453955" style="zoom:50%;" /><ul><li><strong>由于色散</strong>(模式、材料、波导色散)，光在多模光纤中传输一定距离后必然产生<strong>失真(脉冲展宽)</strong></li><li>因此<strong>多模光纤只适合&#x3D;&#x3D;近距离&#x3D;&#x3D;传输</strong>(建筑物内)</li><li>发送光源可使用**发光二极管(便宜)**；接收检测可用光电二极管</li></ul><p>若光纤直径减小到只有一个光的波长，则光纤就像一根波导一样，可使光线一直向前传播，而不会产生多次反射，这样的光纤称作<strong>单模光纤</strong></p><img src="https://s2.loli.net/2022/03/29/npm65EGOLWMHzbx.png" alt="image-20210126201737274" style="zoom:50%;" /><ul><li>没有模式色散，在<code>1.31</code>微米波长附近，材料色散和波导色散大小相等符号相反，两者正好抵消</li><li>单模光纤适合长距离传输且衰减小，但其制造成本高，对光源要求高</li><li>发送光源需要使用**激光发生器(贵)**；接收检测用激光检波器</li></ul><h5 id="纤芯直径"><a href="#纤芯直径" class="headerlink" title="纤芯直径"></a>纤芯直径</h5><ul><li><strong>多模光纤：</strong><code>50</code>微米，<code>62.5</code>微米</li><li><strong>单模光纤：</strong><code>9</code>微米</li><li><strong>纤芯外包层</strong>：<code>125</code>微米</li></ul><h5 id="工作波长"><a href="#工作波长" class="headerlink" title="工作波长"></a>工作波长</h5><ul><li><strong>0.85微米(衰减较大)</strong></li><li><strong>1.30微米(衰减较小)</strong></li><li><strong>1.55微米(衰减较小)</strong></li></ul><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>通信容量大</strong>(<code>25000~30000GHz</code>的带宽)</li><li><strong>传输损耗小</strong>，远距离传输时更加经济</li><li><strong>抗雷电和抗电磁干扰性能好</strong>。这在大电流脉冲干扰环境下尤为重要</li><li><strong>无串音干扰</strong>，保密性好，不易被窃听</li><li><strong>体积小，重量轻</strong></li></ul><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li>割接<strong>需要专用设备</strong></li><li>光电接口<strong>价格较贵</strong></li></ul><h3 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h3><blockquote><p>传导信号的东西摸不到</p></blockquote><img src="https://s2.loli.net/2022/03/29/LfUIT7PcW8VXAM5.png" alt="image-20210126203428750" style="zoom:67%;" /><img src="https://s2.loli.net/2022/03/29/jyvUQGSTH4mZ2LB.png" alt="image-20210126204220667" style="zoom:67%;" /><h4 id="①无线电波"><a href="#①无线电波" class="headerlink" title="①无线电波"></a>①无线电波</h4><blockquote><p>低频和中频频段用地面波传播；高频和甚高频靠电离层(地球上方<code>100~500</code>千米高空的带电离子层)反射</p></blockquote><h4 id="②★微波"><a href="#②★微波" class="headerlink" title="②★微波"></a>②★微波</h4><blockquote><p>微波会穿透电离层进入宇宙，因此其不能通过电离层反射到很远的地方</p></blockquote><h5 id="地面微波接力通信"><a href="#地面微波接力通信" class="headerlink" title="地面微波接力通信"></a>地面微波接力通信</h5><blockquote><p>微波是<strong>直线传播</strong>的，而地球表面是个曲面，因此传播距离受到限制，一般只有<code>50KM</code>左右；如果采用<code>100</code>米高的天线塔，则传播距离可增大到<code>100</code>公里。<br>为实现远距离通信，必须在一个微波通信信道的两个终端之间建立若干个中继站，<strong>中继站把前一阵送来的信号经过放大后再发送到下一站</strong></p></blockquote><h5 id="卫星通信"><a href="#卫星通信" class="headerlink" title="卫星通信"></a>卫星通信</h5><blockquote><p>在地球站之间，利用位于约<code>36000KM</code>高空的人造同步地球卫星作为中继器的一种微波接力，其最大特点是通信距离远，传播时延大(约<code>250~300ms</code>)。低轨道卫星通信系统也已经正在部署</p></blockquote><h4 id="③红外线"><a href="#③红外线" class="headerlink" title="③红外线"></a>③红外线</h4><ul><li>点对点无线传输</li><li>直线传播，<strong>中间不能有障碍物</strong>，传输距离短</li><li>传输速率低(<code>4Mb/s~16Mb/s</code>)</li></ul><h4 id="④可见光"><a href="#④可见光" class="headerlink" title="④可见光"></a>④可见光</h4><blockquote><p>即光源作为信号源，前景好，暂时未被大范围应用</p></blockquote><h2 id="3-传输方式"><a href="#3-传输方式" class="headerlink" title="3. 传输方式"></a>3. 传输方式</h2><h3 id="★串行-x2F-并行传输"><a href="#★串行-x2F-并行传输" class="headerlink" title="★串行&#x2F;并行传输"></a>★串行&#x2F;并行传输</h3><blockquote><p><strong>串行传输</strong>是指数据是<code>1</code>个比特<code>1</code>个比特依次发送的，发送端与接收端之间只用<code>1</code>条数据传输线即可<br><strong>并行传输</strong>是指一次发送<code>n</code>个比特而不是一个比特，在发送端和接收端之间要有<code>n</code>条传输线路</p></blockquote><p><strong>在计算机网络中，数据在传输线路上的传输时串行传输；而计算机内部(如CPU和内存)多使用并行传输</strong></p><h3 id="★同步传输"><a href="#★同步传输" class="headerlink" title="★同步传输"></a>★同步传输</h3><blockquote><p>数据块以稳定的<strong>比特流形式传输</strong>，字节之间没有间隔。接收端在每个比特信号的中间时刻(有区分<code>0,1</code>的标志)进行检测，以判别接收到的是比特<code>0</code>还是<code>1</code>。<br>由于不同设备的时钟频率存在一定差异，不可能完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差会导致接收端对比特信号的判别错位。因此<strong>需要采取方法使双方的时钟保持同步</strong></p></blockquote><h5 id="收发双方时钟同步方法"><a href="#收发双方时钟同步方法" class="headerlink" title="收发双方时钟同步方法"></a>收发双方时钟同步方法</h5><ul><li><strong>外同步：</strong>在收发双方之间加一条单独的时钟信号线</li><li><strong>内同步：</strong>发送端将时钟同步信号编码到发送数据中一起传输(如曼彻斯特编码)</li></ul><h3 id="★异步传输"><a href="#★异步传输" class="headerlink" title="★异步传输"></a>★异步传输</h3><blockquote><p>以字节为独立的传输单位，字节间的时间间隔不是固定的，接收端仅在每个字节的起始处对字节内的比特实现同步，为此通常传送前要在每个字节前后加上起始位和结束位。</p></blockquote><ul><li>异步是指<strong>字节之间异步</strong>(字节之间的时间间隔不固定)</li><li>字节中的每个比特仍然要同步(各比特的持续时间是相同的)</li></ul><h3 id="单工-x2F-半双工-x2F-全双工"><a href="#单工-x2F-半双工-x2F-全双工" class="headerlink" title="单工&#x2F;半双工&#x2F;全双工"></a>单工&#x2F;半双工&#x2F;全双工</h3><ul><li><strong>单工通信</strong>：通信双方只有一个数据传输方向(无线电广播)</li><li><strong>半双工通信</strong>：通信双方可以相互传输数据，但不能同时进行(对讲机)</li><li><strong>全双工通信</strong>：通信双方可以同时发送和接收消息(电话)</li></ul><p><strong>单工需要一条信道；其他的需要两条(一个方向一条)</strong></p><h2 id="4-编码与调制"><a href="#4-编码与调制" class="headerlink" title="4. 编码与调制"></a>4. 编码与调制</h2><ul><li>消息(<code>message</code>)包括文字、图片、音频和视频</li><li><strong>数据是运送消息的实体</strong>；计算机中的网卡将比特<code>1</code>和<code>0</code>变换成相应电信号发送到网线，即信号。</li><li><strong>信号是数据的电磁表现</strong>，由信源(网卡)发出的原始电信号称为基带信号</li><li><strong>基带信号又分为数字基带信号(CPU和内存传输的信号)和模拟基带信号(麦克风收到声音后转变的电信号)</strong></li></ul><blockquote><p>信号需要在信道中进行传输，信道可分为数字信道和模拟信道</p><img src="https://s2.loli.net/2022/03/29/8KtWGjfcOe4syAJ.png" alt="image-20210127145727103" style="zoom:33%;" /><p>如果使用信道复用技术，传输媒体里可以有多个信道</p><p>在不改变信号性质的前提下，仅对基带信号的波形进行变换，称为**&#x3D;&#x3D;编码&#x3D;&#x3D;**。编码后产生的信号还是数字信号，可以在数字信道中传输</p><p>把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为**&#x3D;&#x3D;调制&#x3D;&#x3D;**。调制后产生的信号还是模拟信号，可以在模拟信道中传输</p></blockquote><p><img src="https://s2.loli.net/2022/03/29/rgv9j3dSl5min6G.png" alt="image-20210127144813254"></p><h4 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h4><img src="https://s2.loli.net/2022/03/29/Bw6qFEoJyTknuK3.png" alt="image-20210128163257305" style="zoom:50%;" /><h5 id="①不归零编码"><a href="#①不归零编码" class="headerlink" title="①不归零编码"></a>①不归零编码</h5><blockquote><p>正电平代表比特<code>1</code>，负电平代表比特<code>0</code>。在整个码元时间内，电平不会出现零电平</p></blockquote><p><strong>这种编码方式如何区分连续几个相同电平呢？</strong></p><blockquote><p>这要求发送方发送和接收方接收严格同步，这就需要额外一根传输线来传输时钟信号。接收方按照时钟节拍逐个接收码元。但是对于计算机网络，多的线不如拿来传输数据，因此由于存在同步问题，<strong>计算机中的数据传输不使用不归零编码</strong></p></blockquote><h5 id="②归零编码"><a href="#②归零编码" class="headerlink" title="②归零编码"></a>②归零编码</h5><blockquote><p>**每个码元传输结束后信号都要”归零”**，所以接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。</p><p>实际上，归零编码相当于把时钟信号用”归零”方式编码在了数据之内，这称为”<strong>自同步</strong>“信号</p><p>归零编码中的大部分<strong>数据带宽</strong>都用来传输”归零”而<strong>浪费</strong>掉了(编码效率低)</p></blockquote><h5 id="③曼彻斯特编码"><a href="#③曼彻斯特编码" class="headerlink" title="③曼彻斯特编码"></a>③曼彻斯特编码</h5><blockquote><p>码元的中间时刻既表示时钟，又表示数据。根据<strong>正负跳变来区分比特</strong></p></blockquote><p><em><strong>具体如何根据跳变实现同步？</strong></em></p><blockquote><p>第一次数据跳变的时间记录下来【即半个码元的时间】，此后每过一个码元的时间就进行检测，根据跳变方向决定数据为<code>0</code>还是<code>1</code>。</p></blockquote><h5 id="④差分曼彻斯特编码"><a href="#④差分曼彻斯特编码" class="headerlink" title="④差分曼彻斯特编码"></a>④差分曼彻斯特编码</h5><blockquote><p>①跳变仅表示时钟②码元开始处电平是否发生变化表示数据。<br><strong>比曼彻斯特变化少，更适合较高的传输速率</strong></p></blockquote><h4 id="基本调制方法"><a href="#基本调制方法" class="headerlink" title="基本调制方法"></a>基本调制方法</h4><img src="https://s2.loli.net/2022/03/29/rtDKg9odHX6lYTO.png" alt="image-20210127154831820" style="zoom:50%;" /><p><strong>如上一个码元对应一个比特，如何能让1个码元包含多个比特呢？</strong></p><blockquote><p>可以使用混合调制。正弦信号$A\sin \omega(x+\dfrac{\varphi}{\omega})$，相位和频率是相关的，因此二者不可同时做修改<br>通常情况下，相位和振幅可以结合起来其一调制，称为<strong>正交振幅调制QAM</strong></p></blockquote><p><strong>QAM-16</strong></p><ul><li><code>12</code>种相位</li><li>每种相位有<code>1</code>或<code>2</code>种振幅可选</li><li>可以调制出<code>16</code>种码元(波形)，即<code>16</code>个形状可以用<code>4</code>个二进制位排列组合表示，所以一个码元可以对应<code>4比特</code></li><li>码元与<code>4</code>个比特的对应关系要采用<strong>格雷码</strong>【任意两个相邻码元只有一位不同】</li></ul><img src="https://s2.loli.net/2022/03/29/9fme2IYXsuanzKL.png" alt="image-20210127163202502" style="zoom: 33%;" /><h2 id="5-信道的极限容量"><a href="#5-信道的极限容量" class="headerlink" title="5. 信道的极限容量"></a>5. 信道的极限容量</h2><blockquote><p>通信质量较差的信道在传输信号的过程中会发生<strong>严重失真</strong>(无法识别原信号)<strong>【码间串扰】</strong></p></blockquote><p><strong>失真因素</strong></p><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><img src="https://s2.loli.net/2022/03/29/PqYk3yrzsHiZVO6.png" alt="image-20210127165425061" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/s7areYbS9ActNEF.png" alt="image-20210127165612287" style="zoom:50%;" /><ul><li>在信道带宽一定的情况下，根据奈氏准则和香农公式，要想提高信息的传输速率就必须采用<strong>多元制</strong>【更好的调制方法】和努力<strong>提高信道中的信噪比</strong></li><li>自从香农公式发布后，各种新的信号处理和调制方法就不断出现，其目的都是为了<strong>尽可能地接近香农公式给出的传输速率极限</strong></li></ul><h3 id="例题↓"><a href="#例题↓" class="headerlink" title="例题↓"></a>例题↓</h3><img src="https://s2.loli.net/2022/03/29/T8ySXD2denUGgkB.png" alt="image-20210128155804659" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/D4P65diklIYuoSK.png" alt="image-20210128155935327" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/BlAxXfQo2cZ4rPC.png" alt="image-20210128160044735" style="zoom:50%;" /><h1 id="第3章-数据链路层"><a href="#第3章-数据链路层" class="headerlink" title="第3章 数据链路层"></a>第3章 数据链路层</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>物理层发出去的信号需要通过数据链路层才知道是否到达目的地；才知道比特流的分界线</strong></p><ul><li>**链路(Link)**：从一个结点到相邻结点的一段物理线路，中间没有任何其他交换结点</li><li>**数据链路(Data Link)**：把实现通信协议的硬件和软件加到链路上，就构成了数据链路</li><li>数据链路层以<strong>帧</strong>为单位传输和处理数据</li></ul><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><blockquote><p>数据链路层为数据加上帧首和帧尾使之成为帧的过程</p></blockquote><img src="https://s2.loli.net/2022/03/29/obhisnpjWaZ1fQX.png" alt="image-20210128165621909" style="zoom: 67%;" /><ul><li>帧头和帧尾中含有重要的控制信息</li><li>帧头帧尾的作用之一就是帧定界**(变成比特传输后据此区分每个帧的起始和结束)**</li><li>为了提高帧的传输效率，应当使<strong>帧的数据部分长度尽可能大</strong></li><li>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即<strong>最大传送单元MTU</strong>（<code>Maximum Transfer Unit</code>）</li></ul><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，就好像数据链路层不存在一样(即<strong>保证接收方接到的数据是完整的数据</strong>)</p><ul><li><p><strong>面向字节</strong>的物理链路使用<strong>字节填充</strong>(或称字符填充)的方法实现**&#x3D;&#x3D;透明传输&#x3D;&#x3D;**</p><blockquote><p>帧头帧尾有标志位用来划分一个个帧，如果帧内部恰好也出现了标志位，则在第一次扫描时在标志位前面加一个转义字符帮助区分哪个是真正的帧头。考虑到转义字符也可能在帧内部出现，因此在转义字符前也加转义字符。接收方接到消息后但凡看到转义字符开头就会去掉转义字符并且对其后一个字符不做特殊处理</p></blockquote></li><li><p><strong>面向比特的物理链路使用比特填充的方法实现透明传输</strong></p><blockquote><p><strong>零比特填充</strong>：在发送前，对帧的数据部分进行扫描，每<code>5</code>个连续的比特<code>1</code>后就插入<code>1</code>个比特<code>0</code>，防止其与首部尾部的标志位混淆。接收方接收时将每<code>5</code>个连续的比特<code>1</code>后面的<code>0</code>剔除即可</p></blockquote></li></ul><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><blockquote><p>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：<code>1</code>可能变成<code>0</code>，<code>0</code>可能变成<code>1</code>。这叫<strong>比特差错</strong></p><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER</strong>(<code>Big Error Rate</code>)</p><p>使用<strong>差错检测码</strong>(如<code>Mac</code>帧尾的<code>FCS</code>)来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一</p></blockquote><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><blockquote><p>在待发送的数据后面添加<code>1</code>位奇偶校验位，使整个数据(包括所添加的校验位在内)中”<code>1</code>“的个数为奇数(奇校验)或为偶数(偶校验)</p></blockquote><p><strong>比如发送数据001</strong></p><ul><li>若是<strong>奇校验</strong>，则在数据后添加<code>0</code>，使其成为<code>0001</code>,<code>1</code>的个数为奇数。如果传输过程中发生了<code>1</code>位误码，则<code>1</code>的个数会变成偶数，据此判断是否发生误码；但是若发生了<code>2</code>个误码，<code>1</code>的个数依然为奇数，因此检查不出来</li><li>若为<strong>偶校验</strong>，则在数据后添加<code>1</code>，使其成为<code>1001</code>,<code>1</code>的个数为偶数，其他情况与奇校验类似</li></ul><p><strong>如果有奇数个位发生误码，则奇偶性发生变化，可以检查出误码<br>如果有偶数个位发生误码，则奇偶性不发生变化，不能检查出误码(漏检)</strong></p><h4 id="循环冗余校验CRC"><a href="#循环冗余校验CRC" class="headerlink" title="循环冗余校验CRC"></a>循环冗余校验CRC</h4><ul><li><p>收发双方约定好一个生成多项式<code>G(x)</code></p><img src="https://s2.loli.net/2022/03/29/Cfli6t9x7HBIdFA.png" alt="image-20210129164100468" style="zoom:50%;" /></li><li><p>发送方基于待发送的数据和生成多项式计算出差错检测码**(冗余码)**，将其添加到待传输数据的后面一起传输</p></li><li><p>接收方通过生成多项式来计算收到的数据是否产生了误码</p></li></ul><img src="https://s2.loli.net/2022/03/29/ubpQrqoEYv3AHNI.png" alt="image-20210129164028312" style="zoom:50%;" /><p><strong>&#x3D;&#x3D;除法内的相减实际是做异或运算，因此没有小的减不了大的这个说法&#x3D;&#x3D;</strong></p><img src="https://s2.loli.net/2022/03/29/FuQlLkHaW9Z8Dm5.png" alt="image-20210129164909285" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/BXMRzTeI1PHguyO.png" alt="image-20210129165433380" style="zoom:50%;" /><ul><li><strong>检错码</strong>只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此<strong>无法纠正错误</strong>。</li><li>要想纠正传输中的差错，可以使用冗余信息更多的<strong>纠错码</strong>进行<strong>前向纠错</strong>。但纠错码的开销比较大，<strong>在计算机网络中较少使用</strong></li><li><strong>CRC</strong>有很好的检错能力(<strong>漏检率非常低</strong>)，虽然计算比较复杂，但非常<strong>易于用硬件实现</strong>，因此<strong>被广泛应用于数据链路层</strong></li><li>在计算机网络中通常采用<strong>检错重传方式来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧</strong>，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务</li></ul><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><blockquote><p><strong>不可靠传输服务</strong>：仅仅丢弃有误码的帧，其他什么也不做<br><strong>可靠传输</strong>：想办法实现发送端发送什么，接收端就收到什么</p></blockquote><ul><li>一般情况下，<strong>有线链路</strong>的误码率比较低，为了减小开销，并<strong>不要求数据链路层</strong>向上提供<strong>可靠</strong>传输服务。即使出现了误码，可靠传输的问题由其上层处理</li><li><strong>无线链路</strong>易受干扰，误码率比较高，因此<strong>要求数据链路层</strong>必须向上层提供<strong>可靠</strong>传输服务</li><li>比特差错只是传输差错中的一种，从整个计算机网络体系结构来看，传输差错还包括<strong>分组丢失</strong>、<strong>分组失序</strong>以及<strong>分组重复</strong></li><li>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层</li><li><strong>可靠传输服务并不仅局限于数据链路层</strong>，其他各层均可选择实现可靠传输</li><li>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求</li></ul><img src="https://s2.loli.net/2022/03/29/Ny2eRstTJbvKqIU.png" alt="image-20210130152303638" style="zoom:50%;" /><h4 id="①停止-等待协议SW"><a href="#①停止-等待协议SW" class="headerlink" title="①停止-等待协议SW"></a>①停止-等待协议SW</h4><blockquote><p>发送方发送数据<code>DATA</code>，接收方接收时进行差错检测<br>①如果没有出现误码，则<strong>接收</strong>信息并返回**<code>ACK</code><strong>确认分组给发送方，发送方收到<code>ACK</code>后，一次通信结束<br>②如果出现误码，则</strong>丢弃<strong>信息并返回</strong><code>NAK</code>**拒绝分组给发送方，发送方收到<code>NAK</code>后，重传<code>DATA</code>，直至出现<code>步骤①</code>的情况</p></blockquote><p><strong>如果<code>DATA</code>传送过程中丢失了，即接收端一直等<code>DATA</code>，发送端一直等<code>ACK</code>，造成死锁，如何解决呢？</strong></p><blockquote><p>可以引入超时重传机制。可以在发送端设置一计时器<code>(大约发送接收的平均时间)</code>，当发送端在这个时间内没有收到<code>ACK或NAK</code>时，就会判断<code>DATA</code>丢失，从而再次发送<code>DATA</code>，打破死锁</p></blockquote><p><strong>如果<code>ACK</code>发送中丢失了，即接收方收不到<code>ACK</code>就将数据重新发送，而数据实际上接收方已经有了，因此重复接收，并返回<code>ACK</code>，造成错误，怎么办？</strong></p><blockquote><p>可以对每次发的<code>DATA</code>都加上序号，这样接收端就可以判断当前的数据是否有接收过，从而决定其去留</p></blockquote><p><strong>如果发送端发送<code>DATA 0</code>，如果<code>ACK</code>由于某些原因使其到达接收端的时间变长了，那么根据超时重传，<code>DATA 0</code>会再次发送，而此时<code>ACK</code>到达，则发送方会认为这是后一次<code>DATA 0</code>的确认分组，于是马上发送<code>DATA 1</code>。而第二次发送的<code>DATA 0</code>此时返回<code>ACK</code>，发送方误以为是<code>DATA 1</code>的<code>ACK</code>，因此又会发送<code>DATA2</code>，而实际上<code>DATA 1</code>的是否误码等情况还不知道，因此出现了错误，这种情况怎么办？</strong></p><blockquote><p>可以为<code>ACK</code>加上编号。则每个<code>ACK</code>的相互作用就不会互串了。【对于数据链路层点对点信道，往返时间比较固定，不会出现确认迟到的情况，因此可以不给确认分组编号】</p></blockquote><img src="https://s2.loli.net/2022/03/29/XrjgpeWnytImd4N.png" alt="image-20210130155951376" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/cI4nbv7gSTZy98a.png" alt="image-20210130160600416" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/03/29/uyDe4XQYrijOUnG.png" alt="image-20210130161259644"></p><h4 id="②回退N帧协议GBN"><a href="#②回退N帧协议GBN" class="headerlink" title="②回退N帧协议GBN"></a>②回退N帧协议GBN</h4><blockquote><p>相对停止-等待协议多个窗口的概念<br>接收窗口尺寸只能等于<code>1</code>，因此<strong>接收方只能按序接收正确到达的数据分组</strong></p></blockquote><img src="https://s2.loli.net/2022/03/29/OhsZBx3FP5wKJzn.png" alt="image-20210130163316987" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/hkRGJaV2pbSvmq9.png" alt="image-20210130162603910" style="zoom:50%;" /><ul><li><strong>接收端返回<code>ACK n</code>表示发送过来的分组x&lt;&#x3D;n的都收到了</strong></li></ul><h4 id="③选择重传协议SR"><a href="#③选择重传协议SR" class="headerlink" title="③选择重传协议SR"></a>③选择重传协议SR</h4><blockquote><p>与回退<code>N</code>帧相比，接收窗口允许多个，且发送窗口最大情况有所变化</p></blockquote><img src="https://s2.loli.net/2022/03/29/FSRLW4iQ9JO3b2M.png" alt="image-20210130165642553" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/cy5t3RPkrVqIKCS.png" alt="image-20210130165330624" style="zoom:50%;" /><ul><li><strong>发送窗口接收到<code>ACK</code>帧的部分不会超时重传</strong></li></ul><h2 id="2-PPP协议"><a href="#2-PPP协议" class="headerlink" title="*2. PPP协议"></a>*2. PPP协议</h2><blockquote><p>数据链路层协议，用于规定帧格式</p></blockquote><img src="https://s2.loli.net/2022/03/29/WKzUXiq9gGNZfom.png" alt="image-20210201201917595" style="zoom:50%;" /><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><h4 id="①字节填充法"><a href="#①字节填充法" class="headerlink" title="①字节填充法"></a>①字节填充法</h4><blockquote><p>面向字节的异步链路采用<strong>插入转义字符</strong>的字节填充法</p></blockquote><ul><li>如<code>PPP</code>帧的标志字段取值为<code>7E(16进制)</code>，如果数据中出现<code>7E</code>则需要在数据前插入<strong>转义字符7D</strong>(<code>16</code>进制)，并<strong>将原来的7E减20</strong>(<code>16</code>进制)，所以<code>7E</code>在数据中最终会变成<code>7D5E</code></li><li><strong>如果数据中有转义字符7D怎么办呢？</strong>可以在转义字符<code>7D</code>前再加一个转义字符<code>7D</code>，并将数据的<code>7D</code>减<code>20(16进制)</code>，于是转义字符<code>7D</code>在数据中最终会变成<code>7D5D</code></li><li>数据中出现的每一个<code>ASCII</code>码控制字符【<strong>数值小于20(16进制)的字符</strong>】，则在<strong>该字符前插入一个7D，同时将该字符的编码加上20(16进制)</strong></li><li>接收方只需要反变换即可恢复出原来的帧的数据部分</li></ul><img src="https://s2.loli.net/2022/03/29/Et78yagOBYbvNGW.png" alt="image-20210201203628640" style="zoom:50%;" /><h4 id="②比特填充法"><a href="#②比特填充法" class="headerlink" title="②比特填充法"></a>②比特填充法</h4><blockquote><p>面向比特的同步链路采用<strong>插入比特0</strong>的比特填充法</p></blockquote><ul><li><strong>发送方</strong>：对帧的数据部分进行扫描(一般由硬件实现)。只要<strong>发现5个连续的比特1，则立即填充1个比特0</strong></li><li><strong>接收方</strong>：对帧的数据部分进行扫描(一般由硬件实现)。只要<strong>发现5个连续的比特1，就把其后的1个比特0删除</strong></li></ul><img src="https://s2.loli.net/2022/03/29/LmJaecOpTovyfSk.png" alt="image-20210201204452398" style="zoom:50%;" /><h3 id="PPP的差错检测"><a href="#PPP的差错检测" class="headerlink" title="PPP的差错检测"></a>PPP的差错检测</h3><blockquote><p>接收方每收到一个<code>PPP</code>帧，就进行<code>CRC</code>检验(多项式)。若<code>CRC</code>检验正确，就收下这个帧；反之就丢弃这个帧(不可靠传输服务)。<strong>检验由尾部的FCS实现</strong></p><p>用于检验的多项式为$X^{16}+X^{12}+X^5+1$</p></blockquote><img src="https://s2.loli.net/2022/03/29/pXtArJq6Eby3zKc.png" alt="image-20210201205024457" style="zoom:50%;" /><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><img src="https://s2.loli.net/2022/03/29/Zsqe4P6YEzMJ1Wc.png" alt="image-20210201205247121" style="zoom:50%;" /><h2 id="3-MAC子层"><a href="#3-MAC子层" class="headerlink" title="3. MAC子层"></a>3. MAC子层</h2><blockquote><p>共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即<strong>媒体接入控制MAC</strong>(<code>Medium Access Control</code>)</p></blockquote><p><strong>复用(Multiplexing)就是通过&#x3D;&#x3D;一条物理线路同时传输多路用户&#x3D;&#x3D;的信号。</strong><br>当网络中传输媒体的传输容量大于多条单一信道的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽</p><img src="https://s2.loli.net/2022/03/29/sx49U8GWoMyzXvu.png" alt="image-20210322202556354" style="zoom:50%;" /><h3 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h3><p>信道复用的维度：频率、时间、码形。 </p><h4 id="①频分复用FDM"><a href="#①频分复用FDM" class="headerlink" title="①频分复用FDM"></a>①频分复用FDM</h4><blockquote><p>将传输线路的频带资源<strong>划分成多个子频带，形成多个子信道</strong>。各子信道之间留出隔离频带，以免造成子信道间干扰。当多个信号输入一个多路复用器时，这个复用器<strong>将每一个信号调制到不同频率的载波上</strong>，接收端由相应的分用器通过滤波将各路信号分隔开，将合成的复用信号恢复成原始的多路信号</p></blockquote><img src="https://s2.loli.net/2022/03/29/A9EZ7R4zBVomyeU.png" alt="image-20210322204101543" style="zoom:50%;" /><h4 id="②时分复用TDM"><a href="#②时分复用TDM" class="headerlink" title="②时分复用TDM"></a>②时分复用TDM</h4><blockquote><p>将时间划分为一个个时隙，将带宽资源按照时隙轮流分配给不同的用户，每对用户只在所分配时隙里使用线路传输数据。<br>时分复用技术将时间划分为一段段等长的时分复用帧，<strong>每一个时分复用的用户在每一个时分复用帧中占用固定序号的时隙</strong>。每个用户所占的时隙是周期性出现的，其周期就是时分复用帧的长度</p></blockquote><img src="https://s2.loli.net/2022/03/29/SALTRcrwCotmn4D.png" alt="image-20210322210341303" style="zoom:50%;" /><h4 id="③波分复用WDM"><a href="#③波分复用WDM" class="headerlink" title="③波分复用WDM"></a>③波分复用WDM</h4><blockquote><p>波分复用其实就是光的频分复用。经过光调制，分别将光载波变换到不同波长。这些光波经过光复用器就可以在一根光纤中传输。到达终点后用光分用器将不同波长的光进行还原得到信息<br>光信号传输一段距离后会衰减，对衰减的光信号必须进行放大才能继续传输</p></blockquote><img src="https://s2.loli.net/2022/03/29/lgosMGk85SI3rLf.png" alt="image-20210322211112508" style="zoom:50%;" /><h4 id="④码分复用CDM"><a href="#④码分复用CDM" class="headerlink" title="④码分复用CDM"></a>④码分复用CDM</h4><blockquote><p>码分复用<code>CDM</code>(最初用于军事通信)是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是<strong>码分多址CDMA</strong></p><p><code>CDM</code>的每一个用户可以在同样的时间使用同样的频带进行通信，由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰</p></blockquote><p>在<code>CDMA</code>中，每一个比特时间再划分为<code>m</code>个短的间隔，称为<strong>码片</strong>。通常<code>m</code>的值是<code>64</code>或<code>128</code><br>使用<code>CDMA</code>的每一个站被指派一个唯一的<code>m bit</code>码片序列</p><ol><li>一个站如果要发送比特<code>1</code>，则发送它自己的<code>m bit</code>码片序列</li><li>一个站如果要发送比特0，则发送它自己的<code>m bit</code>码片序列二进制反码</li></ol><img src="https://s2.loli.net/2022/03/29/9ZTg3HwV78uRjML.png" alt="image-20210322213435188" style="zoom:50%;" /><p><strong>码片序列挑选原则：</strong></p><ol><li><p>分配给每个站的<strong>码片序列必须各不相同</strong>，实际常采用伪随机码序列</p></li><li><p>分配给每个站的<strong>码片序列必须相互正交</strong>(规格化内积为<code>0</code>)</p><p>令向量<code>S</code>表示站<code>S</code>的码片序列，令向量<code>T</code>表示其他任何站的码片序列。**$S·T(计算方式为码片序列S和T对应项相乘相加再除以长度)等于0$ 即规格化内积等于0**，此时会有以下四个特征↓。</p><p>$S·T恒等于0；S·\overline T恒等于0；S·S恒等于1；S·\overline S恒等于-1$</p></li></ol><img src="https://s2.loli.net/2022/03/29/caRbiq3C8J9gDZj.png" alt="image-20210322214653701" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/hHQGtNjqWuRpeMm.png" alt="image-20210322215215724" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/cQImnsAWRpTP7Jr.png" alt="image-20210322215444255" style="zoom:50%;" /><p>习题<code>2</code>的<code>B、C、D</code>的情况同理↑</p><img src="https://s2.loli.net/2022/03/29/GE654os7MfljZQw.png" alt="image-20210322215805438" style="zoom:50%;" /><h4 id="复用与多址的区别"><a href="#复用与多址的区别" class="headerlink" title="复用与多址的区别"></a>复用与多址的区别</h4><blockquote><p><strong>&#x3D;&#x3D;复用&#x3D;&#x3D;<strong>是将单一媒体的频带资源划分成很多子信道，这些</strong>子信道之间相互独立，互不干扰</strong>。从媒体的整体频带资源上看，<strong>每个子信道只占用该媒体频带资源的一部分</strong></p></blockquote><blockquote><p>&#x3D;&#x3D;<strong>多址</strong>&#x3D;&#x3D;(更确切地应该称为多点接入)处理的是<strong>动态分配信道给用户</strong>。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道永久地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)</p></blockquote><p>频分复用<code>FDM</code>和时分复用<code>TDM</code>可用于多点接入，相应名词是<strong>频分多址FDMA</strong>和<strong>时分多址TDMA</strong>。从某种程度上，<strong>FDMA、TDMA、CDMA可以分别看作是FDM、TDM、CDM的应用</strong></p><h3 id="多路访问协议-Multiple-Access-Protocols"><a href="#多路访问协议-Multiple-Access-Protocols" class="headerlink" title="多路访问协议(Multiple Access Protocols)"></a>多路访问协议(Multiple Access Protocols)</h3><ul><li>ALOHA</li><li>纯ALOHA  </li><li>时隙ALOHA</li></ul><p><strong>载波侦测多路接入</strong>（Carrier Sense Multiple Access）</p><ul><li>无冲突协议（Collision-free protocols）</li><li>有线竞争协议（Limited-contention protocols）</li></ul><h3 id="动态接入控制"><a href="#动态接入控制" class="headerlink" title="动态接入控制"></a>动态接入控制</h3><h4 id="随机接入"><a href="#随机接入" class="headerlink" title="随机接入"></a>随机接入</h4><blockquote><p>多个主机连接到一根总线上，当信息同一时间传送相遇时就会发生碰撞。<br>如何协调各主机的工作，使信息避免碰撞是很重要的</p></blockquote><h5 id="载波监听多址接入-x2F-碰撞检测-CSMA-x2F-CD-【不用于无线网络】"><a href="#载波监听多址接入-x2F-碰撞检测-CSMA-x2F-CD-【不用于无线网络】" class="headerlink" title="载波监听多址接入&#x2F;碰撞检测(CSMA&#x2F;CD)【不用于无线网络】"></a>载波监听多址接入&#x2F;碰撞检测(CSMA&#x2F;CD)【不用于无线网络】</h5><blockquote><p><code>96</code>比特时间是指发送<code>96</code>比特所需要的时间，也称为<strong>帧间最小间隔</strong>。其作用是是接收方可以检测出一个帧的结束，同时也使得其他站点都能有机会平等竞争信道并发送帧。</p></blockquote><img src="https://s2.loli.net/2022/03/29/cZyMakCbJ3VBiH1.png" alt="image-20210323103954584" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/RWnthbov46kScO5.png" alt="image-20210323104543644" style="zoom:50%;" /><h6 id="争用期-碰撞窗口"><a href="#争用期-碰撞窗口" class="headerlink" title="争用期(碰撞窗口)"></a>争用期(碰撞窗口)</h6><img src="https://s2.loli.net/2022/03/29/jsTOyVhC6bJUEAL.png" alt="image-20210323105720561" style="zoom:50%;" /><p><strong>①为什么$\tau - \frac{\delta}{2}$时刻发送碰撞？</strong></p><blockquote><p>当<code>D</code>开始发送的时，<code>A</code>已经走了$\tau - \delta$时间，所以剩下路程所需要的时间是$\delta$。<br>又因为<code>A</code>和<code>D</code>发送速度是相同的，因此对于$\delta时间$的路程，每人只需要走$\dfrac{\delta}{2}时间$就会相遇，即碰撞<br>$碰撞时刻&#x3D;\tau - \delta +\dfrac{\delta}{2}&#x3D;\tau -\dfrac{\delta}{2}$</p></blockquote><p><strong>②为什么$t&#x3D;\tau$时，D检测到碰撞？</strong></p><blockquote><p>根据上边推论，发现<code>D</code>走了$\dfrac{\delta}{2}的时间$路程后就发送了碰撞，此时它开始返回，经过同样的时间可以回到<code>D</code><br>$检测到碰撞时间&#x3D;\dfrac{\delta}{2}+\dfrac{\delta}{2}&#x3D;\delta$</p></blockquote><p><strong>③为什么$2\tau - \delta$时，A检测到碰撞？</strong></p><blockquote><p>与<code>D</code>检测到碰撞同理，<code>A</code>走了$\tau -\dfrac{\delta}{2}时间$，因此往回走也是这么多时间<br>$A检测到碰撞时间&#x3D;\tau -\dfrac{\delta}{2}+\tau -\dfrac{\delta}{2}&#x3D;2\tau - \delta$</p></blockquote><ul><li>主机最多经过$2\tau(即\delta→0)$的时长就可以检测到本次发送是否遭受了碰撞</li><li>因此，以太网的端到端往返传播时延$2\tau$称为<strong>争用期</strong>或<strong>碰撞窗口期</strong></li><li>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞</li><li>每一个主机在自己发送帧之后的一小段时间内，存在着遭遇碰撞的可能性。这一小段时间是不确定的。它取决于另一个发送帧的主机到本主机的距离，但<strong>不会超过总线的端到端往返传播时延，即一个争用期时间</strong></li><li>显然，在以太网中发生帧的主机越多，<strong>端到端往返传播时延越大，发生碰撞的可能性就越大</strong>。因此，共享式以太网不能连接太多的主机，<strong>使用的总线也不能太长</strong><ul><li>$10Mb&#x2F;s$以太网把争用期定为$512bit$发送时间，即$51.2\mu s$，因此其总线长度不能超过$5120m$，但考虑到其他一些因素，如信号衰减等，以太网规定总线长度不能超过$2500m$</li></ul></li></ul><h6 id="最小帧长"><a href="#最小帧长" class="headerlink" title="最小帧长"></a>最小帧长</h6><p><strong>为什么需要规定最小帧长？</strong></p><blockquote><p>假设<code>A</code>向<code>D</code>发送帧，如果帧很短的话，在$2\tau$内就会将帧发送完毕，帧发送完毕后不会进行碰撞检测，而此时依然有发生碰撞的可能。所以必须保证在$2\tau$时间内帧不会被发送完，在这段时间里能够保持碰撞检测</p></blockquote><ul><li><strong>以太网规定最小帧长为64字节</strong>，即<code>512</code>比特(<code>512</code>比特即争用期)<ul><li>如果要发送的<em><strong>数据非常少，那么必须加入一些填充字节</strong></em>，使帧长不小于<code>64</code>字节</li></ul></li><li>以太网的<strong>最小帧长保证了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞</strong><ul><li>如果在争用期没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞</li><li>如果在争用期检测到碰撞就立即中止发送，这时已经发送出去的数据一定小于<code>64</code>字节，因此<em>凡长度小于<code>64</code>字节的帧都是由于碰撞检测而异常中止的无效帧</em></li></ul></li></ul><h6 id="最大帧长"><a href="#最大帧长" class="headerlink" title="最大帧长"></a>最大帧长</h6><blockquote><p>当帧过长时，其他线路会迟迟得不到资源，同时也可能导致接收方缓冲区溢出，因此帧的最大长度也有规定。</p></blockquote><img src="https://s2.loli.net/2022/03/29/g1PvAn7LechW3sR.png" alt="image-20210323194506744" style="zoom:50%;" /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220619150538162.png" alt="image-20220619150538162"></p><blockquote><p>注：</p><p><strong>实际传输的额外开销是26</strong>[加上8个字节的前导码]。</p></blockquote><h6 id="退避算法"><a href="#退避算法" class="headerlink" title="退避算法"></a>退避算法</h6><blockquote><p>当帧发送碰撞后会停止发送，隔一段时间后再次发送，而具体隔多少时间再发送需要根据退避算法得出</p></blockquote><img src="https://s2.loli.net/2022/03/29/8H6mXgsEKYrzupa.png" alt="image-20210323195647316" style="zoom:50%;" /><h6 id="极限信道利用率"><a href="#极限信道利用率" class="headerlink" title="极限信道利用率"></a>极限信道利用率</h6><ul><li><p>各主机发送帧都不会产生碰撞</p></li><li><p>总线一旦空闲就有某个主机立即发送帧</p></li><li><p>每帧的发送时延为$T_0$，传播时延为$\tau$，占用信道的时间为$T_0+\tau$<br>$$<br>极限信道利用率S_{max}&#x3D;\dfrac{T_0}{T_0+\tau}&#x3D;\dfrac{1}{1+\dfrac{\tau}{T_0}}\<br>为了令S_{max}尽量大，所以应该让\dfrac{\tau}{T_0}尽量小\<br>即\tau尽量小(以太网端到端距离收到限制)或T_0尽量大(以太网帧尽量长)<br>$$</p></li></ul><img src="https://s2.loli.net/2022/03/29/ZJox2jq5efSFHuB.png" alt="image-20210323201325945" style="zoom:50%;" /><h5 id="载波监听多点接入-x2F-碰撞避免-CSMA-x2F-CA-【用于无线网络】"><a href="#载波监听多点接入-x2F-碰撞避免-CSMA-x2F-CA-【用于无线网络】" class="headerlink" title="载波监听多点接入&#x2F;碰撞避免(CSMA&#x2F;CA)【用于无线网络】"></a>载波监听多点接入&#x2F;碰撞避免(CSMA&#x2F;CA)【用于无线网络】</h5><blockquote><p><code>802.11</code>无线局域网使用<code>CSMA/CA</code>协议，在<code>CSMA</code>的基础上<strong>增加了一个碰撞避免CA功能，而不再实现碰撞检测功能</strong></p><p>由于<strong>不可能避免所有的碰撞，并且无线信道误码率较高</strong>，<code>802.11</code>标准还<strong>使用了数据链路层确认机制</strong>(停止-等待协议)来保证数据被正确接收</p></blockquote><ul><li><p><strong>在无线局域网中，仍然可以使用载波监听多址接入CSMA</strong>，即在发送帧之前先对传输媒体进行载波监听。若发现有其他站在发送帧，就推迟发送以避免碰撞</p></li><li><p><strong>在无线局域网中，不能使用碰撞检测CD</strong>，原因如下：</p><ul><li><p>由于无线信道的传输条件特殊，其信号强度的动态范围非常大，<em><strong>无线网卡上接收到的信号强度往往会远远小于发送信号的强度</strong></em>(可能差百万倍)。如果要在无线网卡上实现碰撞检测<code>CD</code>，对硬件的要求特别高。</p></li><li><p>即使能够在硬件上实现无线局域网的碰撞检测功能，但由于<strong>无线电波传播的特殊性</strong>(存在<strong>隐蔽站</strong>的问题)，**进行碰撞检测的意义也不大(如下)**。而有线网络中信号会随着总线到达各个地方，不会出现隐蔽站</p><img src="https://s2.loli.net/2022/03/29/yZCBh2xXsqTpK9e.png" alt="image-20210323205537045" style="zoom:50%;" /></li></ul></li><li><p><code>802.11</code>的<code>MAC</code>层标准定义了两种不同的媒体接入控制方式</p><ul><li><strong>分布式协调功能DCF</strong>。在<code>DCF</code>方式下，没有中心控制站点，每个站点使用<code>CSMA/CA</code>协议通过<em><strong>争用信道来获取发送权</strong></em>，这是<code>802.11</code>定义的默认方式</li><li><strong>点协调功能PCF。</strong><code>PCF</code>方式使用集中控制的接入算法(一般在<em><strong>接入点AP实现集中控制</strong></em>)，是<code>802.11</code>定义的可选方式，在实际中较少使用</li></ul></li></ul><h6 id="帧间间隔IFS"><a href="#帧间间隔IFS" class="headerlink" title="帧间间隔IFS"></a>帧间间隔IFS</h6><blockquote><p><code>802.11</code>标准规定，所有的<strong>站点必须在持续检测到信道空闲一段指定时间后才能发送帧</strong>，这段时间称为帧间间隔<code>IFS</code></p></blockquote><p><strong>帧间间隔的长短取决于该站点要发送的帧的类型</strong></p><ul><li><em>高优先级帧需要等待的时间较短</em>，因此可优先获得发送权</li><li><em>低优先级帧需要等待的时间较长</em>。若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就减少了发送碰撞的机会。</li></ul><p><strong>常用的两种帧间间隔如下</strong>：</p><ul><li><strong>短帧间间隔SIFS($28\mu m$)<strong>。这是最短的帧间间隔，用来分隔开属于一次对话的各帧。</strong>一个站点应当能够在这段时间内从发送方式切换到接收方式</strong>。使用<code>SIFS</code>的帧类型由<code>ACK</code>帧、<code>CTS</code>帧、由过长的<code>MAC</code>帧分片后的数据帧、以及所有回答<code>AP</code>探询的帧和在<code>PCF</code>方式中接入点<code>AP</code>发送出的任何帧</li><li><strong>DCF帧间间隔DIFS($128\mu s$)<strong>。它比短帧间间隔<code>SIFS</code>要长得多，在<code>DCF</code>方式中</strong>用来发送数据帧和管理帧</strong></li></ul><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><img src="https://s2.loli.net/2022/03/29/nWqFT9OjSiL5w2l.png" alt="image-20210324090833801" style="zoom:50%;" /><p><strong>①为什么源站检测到信道空闲后，还需要等待DIFS时间才将帧发送呢？</strong></p><blockquote><p>因为其他站此时可能有优先级更高的帧需要发送，因此有<code>DIFS</code>时间进行缓冲，若这个时间内没有高优先级的帧要发送，则说明信道是真正的空闲</p></blockquote><p><strong>②为什么目的站接收到帧后还需要等到SIFS时间才返回ACK确认帧呢？</strong></p><blockquote><p><code>SIFS</code>是最短的帧间间隔，用来分割一次对话的各帧，在这个时间里由接收状态转变为发送状态</p></blockquote><p><strong>③当其他站要发送数据，但是发现此时信道正忙时就会退避一段时间，等信道不忙后再进行操作，接着等待DIFS时间(与①同理)，但为什么等待了DIFS时间后还要退避一段随机时间呢？</strong></p><blockquote><p>因为可能有多个站点在信道忙时都想发送帧，因此它们都会被搁置直至信道不忙，在<code>DIFS</code>时间后他们会同时发送，而实际上多个站点同时发送数据会碰撞。因此需要一个随机时间将他们进行错峰发送。</p></blockquote><h6 id="退避算法-1"><a href="#退避算法-1" class="headerlink" title="退避算法"></a>退避算法</h6><blockquote><p>多个站点发送冲突时，各个站点需要退避一段随机时间再进行操作</p></blockquote><p>&#x3D;&#x3D;<strong>以下情况必须使用退避算法</strong>&#x3D;&#x3D;</p><ul><li>在发送数据帧之前检测到<em><strong>信道处于忙状态</strong></em>时</li><li>在每一次<em><strong>重传一个数据帧</strong></em>时</li><li>在每一次<em><strong>成功发送后要连续发送下一个帧时</strong></em>(这是为了避免一个站点长时间占用通道)</li></ul><p><strong>过程</strong></p><ul><li>在执行退避算法时，站点为退避计时器设置一个随机的退避时间<ul><li>当退避计时器的时间减小到<code>0</code>，就开始发送数据</li><li>当退避计时器的时间还未减小到<code>0</code>时信道又转变为忙状态，这时就<strong>冻结退避计时器的数值，重新等待信道变为空闲</strong>，再经过<code>DIFS</code>后，继续启动退避计时器</li></ul></li><li>在进行第<code>i</code>次退避时，退避时间在时隙编号${0,1,..,2^{i+1}-1}$中随机选择一个，然后乘以基本退避时间(也就是一个时隙的长度)就可以得到随机的退避时间。这样做时为了使不同站点选择相同退避时间的概率减少；当时隙编号达到<code>255</code>时(对应第<code>6</code>次退避)就不再增加了。</li></ul><img src="https://s2.loli.net/2022/03/29/gIkTD49wAoXMc7L.png" alt="image-20210324092919347" style="zoom:50%;" /><h6 id="信道预约"><a href="#信道预约" class="headerlink" title="信道预约"></a>信道预约</h6><blockquote><p>为了尽可能减少碰撞的概率和降低碰撞的影响，<code>802.11</code>标准允许要发送数据的站点对信道进行预约</p></blockquote><ol><li>源站在发送数据帧之前先发送一个短的控制帧，称为<strong>请求发生RTS</strong>，它包括源地址、目的地址以及这次通信(包括相应的确认帧)所需的持续时间</li><li>若目的站正确收到源站发来的<code>RTS</code>帧，且媒体空闲，就发送一个响应控制帧，称为<strong>允许发送CTS</strong>，它也包括这次通信所需的持续时间从<code>RTS</code>帧中将此持续时间复制到<code>CTS</code>帧中。</li><li>源站收到<code>CTS</code>帧后，再等待一段时间<code>SIFS</code>后，就可发送其数据帧<ul><li><strong>如果RTS帧发送碰撞，源站就收不到CTS帧，需执行退避算法重传RTS帧</strong></li><li><strong>由于RTS帧和CTS帧很短，发生碰撞的概率、碰撞产生的开销及本身的开销都很小</strong>。而对于一般的数据帧，其发送时延往往大于传播时延(因为是局域网)，碰撞的概率很大，且一旦发生碰撞而导致数据帧重发就会浪费很多时间，因此用很小的代价对信道进行预约往往是值得的。<code>802.11</code>标准规定了<code>3</code>种情况供用户选择<ul><li>使用<code>RTS</code>帧和<code>CTS</code>帧</li><li>不使用<code>RTS</code>帧和<code>CTS</code>帧</li><li>只有当数据帧的长度超过某一数值时才使用<code>RTS</code>帧和<code>CTS</code>帧</li></ul></li></ul></li><li>若目的站正确收到了源站发来的数据帧，在等待时间<code>SIFS</code>后，就向源站发送确认帧<code>ACK</code></li><li><strong>除源站和目的站以外的其他各站，在收到CTS帧(或数据帧)后就推迟接入到无线局域网中。这样就保证了源站和目的站之间的通信不会收到其他站的干扰。</strong></li></ol><img src="https://s2.loli.net/2022/03/29/kOFUaXqdo3E79Wi.png" alt="image-20210324094639706" style="zoom:50%;" /><h6 id="虚拟载波监听"><a href="#虚拟载波监听" class="headerlink" title="虚拟载波监听"></a>虚拟载波监听</h6><blockquote><p>除<code>RTS</code>帧和<code>CTS</code>帧会携带通信需要持续的时间，<strong>数据帧也能携带通信需要持续的时间</strong>，这称为<code>802.11</code>的虚拟载波监听机制</p></blockquote><ul><li>由于利用虚拟载波监听机制，<strong>站点只要监听到RTS帧、CTS帧或数据帧中的任何一个，就能知道信道被占用的持续时间</strong>，而不需要真正监听到信道上的信号，因此虚拟载波监听机制能减少隐蔽站带来的碰撞问题</li><li>如下图，<code>A</code>与<code>C</code>虽然互相覆盖不到，但是<strong>C可收到B发出的关于A的CTS帧，从而得知A需要占用信道的时间</strong>。在这段时间里，<code>C</code>不发送数据，从而解决隐蔽站带来的碰撞问题</li></ul><img src="https://s2.loli.net/2022/03/29/xlqcFGWBMnONiau.png" alt="image-20210324100904465" style="zoom: 33%;"/><h2 id="4-MAC地址、IP地址和ARP协议"><a href="#4-MAC地址、IP地址和ARP协议" class="headerlink" title="4. MAC地址、IP地址和ARP协议"></a>4. MAC地址、IP地址和ARP协议</h2><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><blockquote><p><code>MAC</code>地址是以太网的<code>MAC</code>子层所使用的的地址</p></blockquote><ul><li><em>只有一条路径的信道不需要地址</em>，因为没得选</li><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则<strong>每个主机都必须有一个唯一的标识，即一个数据链路层地址</strong></li><li>在每个主机发送的帧中必须携带标识发送主机和接收主机的地址。由于这类地址是用于**媒体接入控制MAC(Media Access Control)**，因此这类地址被称为<code>MAC</code>地址，长6字节，用12个十六进制数表示<ul><li><strong>MAC地址一般被固化在网卡</strong>(网络适配器)的电可擦可编程只读存储器<code>EEPROM</code>中，因此<code>MAC</code>地址也被称为&#x3D;&#x3D;硬件地址&#x3D;&#x3D;</li><li><code>MAC</code>地址有时也被称为&#x3D;&#x3D;物理地址&#x3D;&#x3D;。但是<code>MAC</code>地址不属于物理层而是属于数据链路层</li></ul></li><li>一般情况下，用户主机会包含两个网络适配器：有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)。每个网络适配器都有一个全球唯一的<code>MAC</code>地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的<code>MAC</code>地址。综上所述，严格来说，**&#x3D;&#x3D;MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识&#x3D;&#x3D;**</li></ul><h4 id="MAC地址格式"><a href="#MAC地址格式" class="headerlink" title="MAC地址格式"></a>MAC地址格式</h4><img src="https://s2.loli.net/2022/03/29/qn8w3AWoycvLD1H.png" alt="image-20210324113202609" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/z7CjfwV4rxQsFUS.png" alt="image-20210324113544917" style="zoom:50%;" /><p><strong>单播地址、广播地址与多播地址</strong></p><ul><li><strong>单播MAC地址即明确的目的MAC地址</strong>。将此地址填入帧的目的地址栏中，接收到该帧的主机将此地址与自身<code>MAC</code>地址进行匹配，若相同则接收，不同则丢弃</li><li>**广播MAC地址为<code>FF-FF-FF-FF-FF-FF</code>**，将此地址填入帧的目的地址栏中，接收到该帧的主机检索该地址发现是广播地址，因此接收该帧</li><li>&#x3D;&#x3D;<strong>MAC地址中第一字节后4比特为(1,3,5,7,9,B,D,F)时，MAC地址是多播地址</strong>&#x3D;&#x3D;。将此地址填入帧的目的地址栏中，接收到该帧的主机<strong>将此多播地址与自己多播组列表中的地址进行逐一配对</strong>，如果有匹配的项，则接收，否则丢弃</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><blockquote><p><code>IP</code>地址是<code>TCP/IP</code>体系结构的网际层所使用的的地址</p></blockquote><p><code>IP</code>地址是<code>Internet</code>上的主机和路由器所使用的的地址，由两部分信息构成</p><ul><li><strong>网络编号</strong>：标识因特网上数以百万计的网络</li><li><strong>主机编号</strong>：标识同一网络上不同主机(或路由器各接口)</li></ul><p>&#x3D;&#x3D;MAC地址不具备区分不同网络的功能，而IP地址可以通过网络号做到&#x3D;&#x3D;</p><p>如果只是一个<strong>单独网络</strong>，不接入因特网，则使用<strong>MAC地址就足够了</strong>(这不是一般用户的应用方式)<br>如果主机所在的网络<strong>要接入因特网，则IP地址和MAC地址都需要使用</strong></p><p><strong>数据包转发过程中IP地址与MAC地址变换情况</strong></p><img src="https://s2.loli.net/2022/03/29/VeP5o1BGfOQiH8F.png" alt="image-20210324155136245" style="zoom:50%;" /><ul><li>数据报转发过程中<strong>源IP地址和目的IP地址保持不变</strong></li><li>数据包转发过程中<strong>源MAC地址和目的MAC地址(由ARP协议获得)逐个链路改变</strong></li><li>路由器上有**路由表，记录了要到目的IP地址，先要走哪些路(即下一跳位置)**。所以<code>H1</code>起初只带有目的<code>IP</code>地址，查询路由表后路由器指路，从而知道下一步该往哪里走，从而不断转发直至到达目的地。</li></ul><img src="https://s2.loli.net/2022/03/29/1NURsa6mTLESbWk.png" alt="image-20210324160951956"  /><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><blockquote><p>地址解析协议<code>ARP</code>属于<code>TCP/IP</code>体系结构的网际层，其作用是已知设备所分配到的<code>IP</code>地址，使用<code>ARP</code>协议可以通过该<code>IP</code>地址获取到设备的<code>MAC</code>地址</p></blockquote><ul><li><strong>数据的发送需要经过链路，仅仅知道<code>IP</code>地址是无法在数据链路层实现传输的</strong>，因此我们需要得到<code>IP</code>地址与<code>MAC</code>地址的对应关系，即地址解析。</li><li>每台主机都会有一个**<code>ARP</code>高速缓存表，记录有<code>IP</code>地址与<code>MAC</code>地址的对应关系**</li><li>初始<code>ARP</code>高速缓存表为空，假设此时<code>B</code>知道<code>C</code>的<code>IP</code>地址，准备发送信息，但是由于不知道<code>C</code>的<code>MAC</code>地址，因此无法封装数据帧，所以此时会<strong>广播</strong>一个**&#x3D;&#x3D;ARP请求报文(封装在MAC帧中，目的地址为广播地址<code>FF-FF-FF-FF-FF-FF</code>)&#x3D;&#x3D;**，内容如下：<ul><li>我的<code>IP</code>地址是：<code>xxx </code>；我的<code>MAC</code>地址是：<code>XXX</code>；我想知道<code>C</code>主机的<code>MAC</code>地址是多少？这个广播帧会被该广播域的所有主机收到</li><li><code>A</code>主机收到后交由上层处理，发现<code>B</code>问的不是他，所以不予理会</li><li><code>C</code>收到后交由上层处理，发现这个<code>IP</code>地址正是自己，因此<strong>首先将B的MAC地址和IP地址的对应关系记录到自己的高速缓存表中</strong>，接着返回给&#x3D;&#x3D;<strong>ARP响应报文(封装在MAC帧中，目的地址为B的MAC地址)</strong>&#x3D;&#x3D;，其中包含自己的<code>MAC</code>地址</li></ul></li><li><strong><code>ARP</code>高速缓存条目有静态与动态两种类型</strong><ul><li>动态代表是通过广播自动获取的条目，生命周期默认为两分钟</li><li>静态是手工设置的条目，不同操作系统下的生命周期不同。</li></ul></li><li><strong><code>ARP</code>协议只能在一段链路或一个网络上使用</strong></li></ul><h2 id="5-集线器与交换机"><a href="#5-集线器与交换机" class="headerlink" title="5. 集线器与交换机"></a>5. 集线器与交换机</h2><h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><blockquote><p>集线器<code>HUB</code>的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。</p></blockquote><ul><li><strong>使用集线器的以太网在逻辑上仍是一个总线网</strong>，各站共享总线资源，使用的还是<code>CSMA/CD</code>协议</li><li>集线器只工作在物理层，它的<strong>每个接口仅简单地转发比特</strong>，不进行碰撞检测(由各站网卡检测)</li><li><strong>集线器一般都有少量的容错能力和网络管理功能</strong>。例如，若网络中某个网卡出了故障，不停地发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然能正常工作</li><li>集线器是<strong>半双工模式</strong>，收发不能同时进行，收到帧后会<strong>广播到除本身接口外的各个接口</strong>。</li></ul><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><blockquote><p>交换机是一种<strong>负责转发</strong>信号的网络设备，可以为接入交换机的任意两个网络节点提供<strong>独享的电信号通路</strong></p></blockquote><ul><li><p>以太网交换机通常由<strong>多个接口</strong>，每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都<strong>工作在全双工方式</strong></p></li><li><p>以太网交换机<strong>具有并行性，能同时连通多对接口，使多对主机能同时通信</strong>，无碰撞(不使用<code>CSMA/CD</code>协议)</p></li><li><p>以太网交换机一般都具有多种速率的接口</p></li><li><p>以太网交换机工作在数据链路层(也包括物理层)，它收到帧后，<strong>在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧</strong></p></li><li><p>以太网交换机是一种即插即用的设备，其<strong>内部的帧交换表是通过自学习算法自动地逐渐建立起来的</strong></p></li><li><p>帧的两种转发方式</p><ul><li>存储转发</li><li>直通交换：采用基于硬件的交叉矩阵(交换时延非常小，但不检查是否有差错)</li></ul></li><li><p><strong>交换机每个接口是一个独立的碰撞域</strong></p></li><li><img src="https://s2.loli.net/2022/03/29/HgJRSvaw2NYQKdh.png" alt="image-20210325105312206" style="zoom:50%;" /><ul><li><p>此时<strong>交换机未进行任何操作</strong>，<code>pc1 ping pc4</code>是可以通的，<strong>说明整个交换机连接的范围是一个广播域</strong>。且<code>ping</code>通后，<code>LSW3</code>交换机的<code>MAC表</code>将<code>PC1</code>的<code>MAC</code>地址与接口的对应关系以及<code>PC4</code>的<code>MAC</code>地址与接口的对应关系都记录到<code>MAC</code>地址表中&#x3D;&#x3D;【<code>ping</code>的消息发送出去时记录下PC1地址接口相关情况，<code>ping</code>成功的消息响应返回给PC1时记录下PC4地址接口的情况】&#x3D;&#x3D;</p><img src="https://s2.loli.net/2022/03/29/XiGHEsCNuUym39f.png" alt="image-20210325105956076" style="zoom: 67%;" /></li></ul></li></ul><h4 id="交换机自学习和转发帧流程"><a href="#交换机自学习和转发帧流程" class="headerlink" title="交换机自学习和转发帧流程"></a>交换机自学习和转发帧流程</h4><img src="https://s2.loli.net/2022/03/29/AvK38IofsrLUwDR.png" alt="image-20210324200547219" style="zoom:50%;" /><ul><li><p>初始交换机<code>1</code>和<code>2</code>的<code>MAC</code>地址表都为空</p></li><li><p>此时有以下任务：①<code>A--&gt;B</code> ②<code>B--&gt;A</code> </p><ol><li><p><code>A</code>发送给<code>B</code>的数据通过端口<code>1</code>进入交换机，因此交换机先将<code>MAC地址A 接口1</code>&#x3D;&#x3D;<strong>(表示如果要去MAC地址A，可以走接口1)</strong>&#x3D;&#x3D;记录到<code>MAC</code>表中，同时扫描<code>MAC</code>表查看是否有<code>MAC地址B</code>对应的接口，发现没有。因此将这个帧从<strong>除来源外的所有端口</strong>发送出去【泛洪】。</p><ul><li>交换机<code>1</code>的端口<code>2</code>发送此帧到主机<code>C</code>，主机<code>C</code>对比<code>MAC</code>地址后发现不是给自己的帧，因此丢弃</li><li>交换机<code>1</code>的<code>3</code>端口发送此帧到主机<code>B</code>，主机<code>B</code>对比<code>MAC</code>地址后发现是给自己的帧，因此收下该帧，交付给高层【注意：此时交换机<code>MAC</code>地址表并没有学习新的条目】</li><li>交换机<code>1</code>的<code>4</code>端口发送此帧到交换机<code>2</code>的端口<code>2</code>，交换机<code>2</code>首先将<code>MAC地址A 接口2</code>记录到<code>MAC</code>地址表中，接着扫描<code>MAC</code>表，发现没有找到<code>MAC地址B</code>对应的接口，因此将这个帧从除来源外的所有端口发送出去【泛洪】。</li><li>同理，接口<code>1</code>，<code>3</code>，<code>4</code>发送出去给主机后经过比对发现不是自己的帧，因此丢弃</li></ul></li><li><p><code>B--&gt;A</code>时，交换机<code>1</code>的<code>MAC</code>地址表已经有了<code>MAC地址A 接口1</code>这个条目</p><ul><li><code>B</code>发送给<code>A</code>的帧从接口<code>3</code>进入交换机，交换机首先将<code>MAC地址B 接口3</code>记录到<code>MAC</code>地址表中，接着查询<code>MAC</code>地址表是否有<code>MAC地址A</code>对应的接口，发现接口<code>1</code>对应的就是<code>MAC</code>地址<code>A</code>，因此从接口<code>1</code>转发出去</li><li>帧通过接口<code>1</code>到达主机<code>A</code>，主机<code>A</code>经过比对后发现这是自己的帧，因此将其接收交付给高层</li></ul></li><li><p>此时若有一个与<code>A</code>连接在同一总线上的主机<code>G</code>向<code>A</code>发送帧，过程如何？</p><img src="https://s2.loli.net/2022/03/29/h6qpIDymOVULufP.png" alt="image-20210324202645078" style="zoom: 50%;" /><ul><li><code>G</code>向<code>A</code>发送帧时，由于<code>A</code>与<code>G</code>处在同一总线上，因此<code>G</code>发送的帧会直接传送到<code>A</code>处，<code>A</code>进行比对发现这是发送给自己的数据，因此将数据接收[集线器省略，没有画出]</li><li>同时数据会跑向交换机<code>1</code>的端口<code>1</code>，所以交换机<code>1</code>会将<code>MAC地址G 接口1</code>记录到<code>MAC</code>表中，同时扫描<code>MAC</code>地址表看看是否有<code>MAC地址A</code>对应的接口，发现接口<code>1</code>就是。但是刚刚学习到的<code>MAC地址G</code>也是来自接口<code>1</code>，因此交换机知道接口<code>1</code>是来源，没有必要将数据再从这个接口转发出去。</li></ul></li></ol></li></ul><p><strong>&#x3D;&#x3D;MAC地址表中的每条记录都有自己的有效时间，到期自动删除&#x3D;&#x3D;。这是因为MAC地址与交换机接口的对应关系并不是永久性的</strong></p><h4 id="STP生成树协议"><a href="#STP生成树协议" class="headerlink" title="STP生成树协议"></a>STP生成树协议</h4><blockquote><p><code>STP</code>可以在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的各种问题，即防止网桥网络中的冗余链路形成环路工作。</p></blockquote><p>**当交换机之间链路较少时，某一条链路发送故障，会导致其中有些主机无法通信，即链路不可靠。<br>**如下图，<code>A</code>与<code>B</code>之间的链路发送故障后，<code>H1</code>便无法与<code>H2</code>和<code>H3</code>进行通信</p><img src="https://s2.loli.net/2022/03/29/OgzHb1MUtITWu2w.png" alt="image-20210325085836691" style="zoom: 33%;" /><p>很容易想到的一个方法是<strong>在B与C之间多拉一条链路</strong>，这样即使A与B之间的链路发送故障，<code>H1</code>、<code>H2</code>、<code>H3</code>之间还是能够相互通信，但是这会带来一些问题。如下，当<code>H1</code>发送一个广播帧时，我们针对交换机<code>B</code>进行过程分析</p><img src="https://s2.loli.net/2022/03/29/eJgnW4AYT6aO8k3.png" alt="image-20210325090406814" style="zoom: 33%;" /><ul><li>首先<code>H1</code>发送的帧进入交换机，交换机将<code>MAC地址H1 接口1</code>记录到<code>MAC</code>表中，接着检索<code>MAC</code>表，发现没有<code>MAC地址H2</code>的接口条目，因此进行泛洪，交换机<code>A</code>和<code>C</code>都接收到此帧</li><li>交换机<code>A/C</code>首先将<code>MAC地址H1 接口1</code>记录到自身的<code>MAC</code>表中，接着检索<code>MAC</code>表，发现没有广播帧的接口条目，因此进行泛洪。<code>A</code>泛洪的帧会被<code>H3</code>、交换机<code>B</code>、<code>C</code>收到；<code>C</code>泛洪的帧会被<code>H2</code>、交换机<code>A</code>、<code>B</code>收到。<code>H2</code>与<code>H3</code>接收帧后发现是一个广播帧，于是接收并交上层处理</li><li>我们针对交换机<code>B</code>进行分析<ul><li>此刻它收到了来自交换机<code>C</code>的泛洪，<strong>帧内信息依然是<code>MAC地址H1 </code>【源MAC地址】</strong>，首先它会将此条目添加进<code>MAC</code>表中，发现原先有<code>MAC地址H1 接口1</code>的记录，此时它会认为这条记录已经出现错误，因此更新为<code>MAC地址H1 接口2</code>。由于该条目的来源就是接口<code>2</code>，所以交换机不会再从接口<code>2</code>转发出去，而是在接口<code>1</code>、<code>3</code>处进行泛洪……</li><li>同时<code>B</code>也收到来自交换机<code>A</code>的泛洪，情况与交换机<code>C</code>泛洪类似，于是又将<code>MAC地址H1 接口2</code>更新为<code>MAC地址H1 接口3</code>……</li></ul></li><li>因此帧会在交换机中不停转发，究其原因是因为网络形成了环路，<strong>网络环路</strong>会带来以下问题：<ul><li><strong>广播风暴</strong><ul><li>大量消耗网络资源，使得网络无法正常转发其他数据帧</li></ul></li><li><strong>主机收到重复的广播帧</strong><ul><li>大量消耗主机资源</li></ul></li><li><strong>交换机的帧交换表震荡(内容不断更新)</strong></li></ul></li></ul><h5 id="生成树算法原理"><a href="#生成树算法原理" class="headerlink" title="生成树算法原理"></a>生成树算法原理</h5><ul><li>不论交换机之间采用怎样的物理连接，<strong>交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路)</strong></li><li>最终生成树的逻辑拓扑<strong>要确保连通整个网络</strong></li><li><strong>当首次连接交换机或网络物理拓扑发生变化时(有可能是人为改变或故障)，交换机都将进行生成树重新计算</strong></li></ul><p>生成树的三个选举过程：</p><ul><li>(1) 选举根桥(Root Bridge) ；</li><li>(2) 为每个非根桥选出一个根端口（Root Port）；</li><li>(3) 为每个网段确定一个指定端口（Designated Port）。</li></ul><p><strong>生成树的选举过程1：选举根桥</strong></p><p>同一广播域中的所有交换机均参与选举；<br>桥ID最小的交换机（网桥）成为生成树的根；<br>在给定广播域内只有一个根桥，其它均为非根桥。<br>根桥的所有端口都处在转发状态。 </p><p><strong>生成树的选举过程2：为每个非根桥选出一个根端口</strong></p><p>每个非根桥，通过比较其每个端口到根桥的根路径开销，选出根端口；<br>具有最小根路径开销的端口被选作根端口；<br>如果多个端口的根路径开销相同，则端口ID最小的端口被选作根端口；<br>非根桥只能有一个根端口，根端口处于转发状态。</p><p><strong>生成树的选举过程3：为每个网段确定一个指定端口</strong></p><p>对于每一个网段， 在所有连接到它的交换机（网桥）端口中进行选择；<br>一个具有最小根路径开销的端口，作为该网段的指定端口；<br>指定端口处于转发状态，负责该网段的数据转发；<br>连接该网段的其他端口，若既不是指定端口，也不是根端口，则阻塞。</p><h4 id="VLAN虚拟局域网"><a href="#VLAN虚拟局域网" class="headerlink" title="VLAN虚拟局域网"></a>VLAN虚拟局域网</h4><blockquote><p>一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求，每个<code>VLAN</code>就是一个独立的广播域</p></blockquote><p><strong>为什么需要VLAN？</strong></p><blockquote><p>随着交换式以太网规模的扩大，广播域相应扩大，<strong>而巨大的广播域会带来很多弊端</strong></p><ol><li><p>广播风暴</p><p>如数台交换机连接了数台主机，当主机<code>A</code>要向主机<code>B</code>发送数据帧，此时各交换机的<code>MAC</code>表均为空，因此帧每到一个交换机就会进行泛洪，由于网络巨大，因此泛洪的范围也巨大</p></li><li><p>难以管理和维护</p></li><li><p>潜在的安全风险</p></li></ol></blockquote><h5 id="交换机端口类型"><a href="#交换机端口类型" class="headerlink" title="交换机端口类型"></a>交换机端口类型</h5><p><strong>缺省VLAN ID</strong></p><blockquote><p>华为交换机上叫<code>PVID</code>，<strong>每个端口有且只有一个PVID</strong>。默认情况下端口的<code>PVID</code>都为<code>1</code>(即端口属于<code>VLAN 1</code>)</p></blockquote><p><strong>&#x3D;&#x3D;端口上接收时总希望能够打上标签，发送出去时候总希望能去除标签&#x3D;&#x3D;</strong></p><h6 id="①Access端口"><a href="#①Access端口" class="headerlink" title="①Access端口"></a>①Access端口</h6><ul><li><p><code>Access</code>端口<strong>一般用于终端设备与交换机之间</strong></p><p>&#x3D;&#x3D;注意：<strong>交换机与路由器连接的接口</strong>也需要使用<code>access</code>接口。这是因为路由器中的消息也不带<code>VLAN</code>标签，就像终端一样，保证路由器的数据能够进入交换机领域，数据由路由器进入交换机是会被打上默认标签，接着猜按照交换机间<code>VLAN</code>的规则行走。<strong>简单理解就是把路由器当作终端</strong>&#x3D;&#x3D;</p></li><li><p>交换机<strong>初始端口类型是Access</strong></p></li><li><p><strong>Access端口只能属于一个VLAN</strong></p></li><li><p><code>Access</code><strong>端口的PVID值与端口所属VLAN的ID相同</strong>(默认为<code>1</code>)</p></li><li><p><code>Access</code>端口&#x3D;&#x3D;接收方法&#x3D;&#x3D;</p><ul><li>一般<strong>只接收”未打标签”的普通以太网MAC帧</strong>。根据接收帧的端口<code>PVID</code>值**给帧”打标签”**，即插入<code>4</code>字节的<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口<code>PVID</code>取值相等</li></ul></li><li><p><code>Access</code>端口&#x3D;&#x3D;发送处理方法&#x3D;&#x3D;</p><ul><li>若帧中的<strong>VID与端口的PVID相等，则”去标签”并转发该帧；否则不转发</strong></li></ul></li></ul><h6 id="②Trunk端口"><a href="#②Trunk端口" class="headerlink" title="②Trunk端口"></a>②Trunk端口</h6><ul><li><code>Trunk</code>端口一般用于<strong>交换机之间或交换机与路由器之间</strong>的互连</li><li><code>Trunk</code>端口可以属于多个<code>VLAN</code></li><li>用户可以设置<code>Trunk</code>端口的<code>PVID</code>值，默认情况下，<code>Trunk</code>端口<code>PVID</code>值为<code>1</code></li><li><code>Trunk</code>端口&#x3D;&#x3D;发送处理方法&#x3D;&#x3D;<ul><li>对<strong>VID&#x3D;&#x3D;等于&#x3D;&#x3D;PVID的帧，”去标签，再转发”</strong></li><li>对<strong>VID不等于PVID的帧，直接转发</strong></li></ul></li><li><code>Trunk</code>端口&#x3D;&#x3D;接收处理方法&#x3D;&#x3D;<ul><li>**接收”未打标签”的帧。根据接收帧的端口的PVID给帧”打标签”**，即插入<code>4</code>字节的<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口的<code>PVID</code>取值相等</li><li><strong>直接接收”已打标签的帧”</strong></li></ul></li></ul><h6 id="③Hybrid端口"><a href="#③Hybrid端口" class="headerlink" title="③Hybrid端口"></a>③Hybrid端口</h6><ul><li><code>Hybrid</code>端口既可以用于交换机之间或交换机与路由器之间的互连(同<code>Trunk</code>端口)，也可用于交换机与用户计算机之间的互连(同<code>Access</code>端口)</li><li><code>Hybrid</code>端口可以属于多个<code>VLAN</code>(同<code>Trunk</code>端口)</li><li>用户可以设置<code>Hybrid</code>端口的<code>PVID</code>值。<strong>默认情况下，Hybrid端口的PVID值为1</strong></li><li><code>Hybrid</code>端口&#x3D;&#x3D;发送处理方法&#x3D;&#x3D;↓<ul><li><strong>查看帧的VID是否在端口的”去标签”列表中</strong></li><li>若存在，则”去标签”后转发</li><li>若不存在，则直接转发</li></ul></li><li><code>Hybrid</code>端口&#x3D;&#x3D;接收处理方法&#x3D;&#x3D;(同<code>Trunk</code>)<ul><li>接收”未打标签”的帧，根据接收帧的端口的<code>PVID</code>给帧”打标签”，即插入<code>4</code>字节<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口的<code>PVID</code>取值相等</li><li>接收”已打标签的帧”</li></ul></li></ul><p> <a href="https://blog.csdn.net/weixin_45488428/article/details/115218427">华为交换机Hybrid端口应用例子</a></p><p><strong>如何分割广播域？</strong></p><ol><li><p><strong>路由器</strong></p><p>由于路由器属于网络层设备，默认情况下不对广播数据包进行转发，因此自然达到隔离的效果。但是成本较高，局域网内部全靠路由器分割广播域是不现实的</p></li><li><p><strong>VLAN虚拟局域网技术</strong></p><p>**默认情况下，交换机下的主机会被划入<code>VLAN 1</code>**，可以通过设置相关语句为交换机设置<code>VLAN</code>，如下是将<code>PC1</code>与<code>PC2</code>划入<code>VLAN2</code>的方法</p><img src="https://s2.loli.net/2022/03/21/ZUHcQ5DdLxbRolu.png" alt="image-20210325115755501" style="zoom:50%;" /></li></ol>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">LSW3：valan batch <span class="token number">2</span>  <span class="token comment">//在LSW3上创建VLAN2</span><span class="token keyword">interface</span> <span class="token class-name">Ethernet</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>  <span class="token comment">//进入交换机接口1</span>port link<span class="token operator">-</span>type access  <span class="token comment">//将此接口类型设置为access</span>port <span class="token keyword">default</span> vlan <span class="token number">2</span>   <span class="token comment">//信息经过此接口时若没有VLAN标签则打上VLAN2标签；若有VLAN标签则检查是否为VLAN2，若为VLAN2则去除标签并转发；若非VLAN2，则不转发。</span><span class="token comment">//对接口2的设置同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置完毕后，发现<code>PC1</code>不能<code>ping</code>通<code>PC4</code>，因为此时他们不属于一个同一个广播域，但是可以<code>ping</code>通<code>PC2</code>，因为<code>PC1</code>与<code>PC2</code>属于同一个广播域<code>VLAN 2</code></p><img src="https://s2.loli.net/2022/03/21/7ZbWXtR5G9OjQwY.png" alt="image-20210325120545097" style="zoom: 43%;"/><p><a href="https://blog.csdn.net/weixin_45488428/article/details/112692789">eNSP路由与交换技术笔记</a></p><h5 id="VLAN实现机制"><a href="#VLAN实现机制" class="headerlink" title="VLAN实现机制"></a>VLAN实现机制</h5><img src="https://s2.loli.net/2022/03/21/gOt9BJI5yTU1qr2.png" alt="image-20210325121915329" style="zoom:50%;" /><ul><li><code>VLAN</code>标记的<strong>最后12比特</strong>称为<strong>VLAN标识符VID</strong>，它唯一地标志了以太网帧属于哪一个<code>VLAN</code><ul><li><code>VID</code>的取值范围是<code>0~4095</code></li><li><code>0</code>和<code>4095</code>都不用来表示<code>VLAN</code>，因此用于表示<code>VLAN</code>的<strong>VID的有效范围是1~4094</strong></li></ul></li><li><strong>802.1Q帧时由交换机来处理的，而不是用户主机来处理的</strong> <ul><li>当交换机<strong>收到普通的以太网帧时</strong>，会将其插入<code>4</code>字节的VLAN标记转变为<code>802.1Q</code>，简称**”打标签”**</li><li>当交换机<strong>转发802.1Q帧时</strong>，可能会删除其<code>4</code>字节<code>VLAN</code>标记转变为普通以太网帧，简称**”去标签”**</li></ul></li></ul><h1 id="第4章-网络层"><a href="#第4章-网络层" class="headerlink" title="第4章 网络层"></a>第4章 网络层</h1><blockquote><p>主要任务是实现网络互连，进而实现数据包在各网络之间的传输</p></blockquote><h2 id="1-面向连接的虚电路服务"><a href="#1-面向连接的虚电路服务" class="headerlink" title="1. 面向连接的虚电路服务"></a>1. 面向连接的虚电路服务</h2><ul><li>可靠的通信由网络来保证</li><li>必须<strong>建立网络层的连接—-虚电路VC</strong>(<code>Virtual Circuit</code>)</li><li>通信双方<strong>沿着已建立的虚电路发送分组</strong></li><li>&#x3D;&#x3D;目的主机的地址仅在连接建立阶段使用&#x3D;&#x3D;，之后每个<strong>分组的首部只需携带一条虚电路的编号</strong>(构成虚电路的每一段链路都有一个虚电路编号)。</li><li>这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。</li><li><strong>通信结束后，需要释放之前所建立的虚电路</strong></li></ul><h2 id="2-无连接的数据报服务"><a href="#2-无连接的数据报服务" class="headerlink" title="2. 无连接的数据报服务"></a>2. 无连接的数据报服务</h2><ul><li><strong>可靠通信应当由用户主机来保证</strong></li><li><strong>不需要建立网络层连接</strong></li><li><strong>每个分组可走不同路径</strong></li><li>每个分组的<strong>首部必须携带目的主机的完整地址</strong></li><li>这种通信方式所传送的<strong>分组可能误码、丢失、重复和失序</strong></li><li>由于网络本身不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉</li><li>因特网采用了这种设计思想，也就是**将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的传输层)**，而将相对简单的尽最大努力的分组交付功能置于因特网核心。</li></ul><p>由于<code>TCP/IP</code>体系结构的因特网的网际层提供的是简单灵活、无连接的、尽最大努力交付的数据包服务，因此本章主要围绕<strong>网际层如何传送<code>IP</code>数据报</strong>这个主题进行讨论。</p><p><strong>IP协议</strong>是在TCP&#x2F;IP协议模型中的重要组成部分，目前我们使用的最多的是IPv4协议。</p><h2 id="3-IPv4地址"><a href="#3-IPv4地址" class="headerlink" title="3. IPv4地址"></a>3. IPv4地址</h2><blockquote><p><code>IPv4</code>地址就是因特网上的<strong>每一台主机(或路由器)的每一个接口</strong>分配一个在全世界范围内是<strong>唯一的32比特的标识符</strong></p></blockquote><h3 id="分类编址"><a href="#分类编址" class="headerlink" title="分类编址"></a>分类编址</h3><img src="https://s2.loli.net/2022/03/29/liMgrVT1UBoqRYb.png" alt="image-20210401111845620" style="zoom:50%;" /><ul><li><p><code>A</code>类地址<strong>网络号第1位固定为0</strong>，网络号后面部分不能全<code>0</code>，也不能全<code>1</code>，所以<strong>网络号范围是1~126</strong></p><blockquote><p>注：</p><p>最大网络号127作为本地环回测试地址，不指派。</p></blockquote></li><li><p><code>B</code>类地址<strong>网络号前2位固定为10</strong>，网络号后面部分可以全取<code>0</code>或<code>1</code>，所以<strong>网络号范围是128.0~191.255</strong></p></li><li><p><code>C</code>类地址<strong>网络号前3位固定为110</strong>，网络后后面部分可以全取<code>0</code>或<code>1</code>，所以<strong>网络号范围是192.0.0~223.255.255</strong></p></li><li><p><code>D</code>类地址为多播地址，<code>IP</code>地址为<strong>224.0.0.0~239.255.255.255</strong></p></li></ul><img src="https://s2.loli.net/2022/03/29/hrtWKbXFQyp4uzL.png" alt="image-20210401122431550" style="zoom:50%;" /><p><strong>为用户专网保留的C类地址的地址区间是192.168.0.0-192.168.255.255。</strong></p><img src="https://s2.loli.net/2022/03/29/eXt4vl9SQwshcpW.png" alt="image-20210401122739887" style="zoom:50%;" /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220608221513216.png" alt="image-20220608221513216"></p><h3 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h3><p><strong>为什么需要划分子网？</strong></p><blockquote><p>比如一个单位有<code>300</code>台主机，此时需要申请一个<code>B</code>类网络地址，很容易得知，分配出去<code>300</code>个<code>IP</code>地址后，申请得到的<code>B</code>类网络<strong>还剩下很多IP地址</strong>。<br>当单位扩大规模，需要再添加两个子网的时，又要为这两个子网分别申请<code>B</code>类地址，这会花费一些不必要的支出，实际上子网<code>1</code>申请到的<code>B</code>类地址还有很多没用到，**我们希望能够将这些剩余地址应用到其他子网中(节约地址)**。</p></blockquote><h4 id="如何实现子网划分？"><a href="#如何实现子网划分？" class="headerlink" title="如何实现子网划分？"></a>如何实现子网划分？</h4><p><strong>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</strong></p><ul><li>子网掩码<strong>使用连续的比特1来对应网络号和子网号(子网号来自原先的一部分主机号)</strong></li><li>子网掩码使用连续的比特<code>0</code>来对应主机号</li><li>将划分子网的<code>IPv4</code>地址与其相应的子网掩码进行**(逻辑与运算)【即掩码是1的部分】**就可得到<code>IPv4</code>地址所在子网的网络地址</li></ul><h3 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h3><p><strong>为什么需要？</strong></p><blockquote><p>划分子网在一定程度上缓解了因特网发展中遇到的困难，但是<strong>数量巨大的C类网因为其地址空间太小并没有得到充分使用</strong>，而因特网的IP地址仍在加速消耗，<strong>整个IPv4地址空间面临全部耗尽的威胁</strong></p></blockquote><p>1993年，IETF发布了<strong>无分类域间路由选择CIDR</strong></p><ul><li><p><code>CIDR</code>消除了传统的<code>A</code>类、<code>B</code>类和<code>C</code>类地址，以及划分子网的概念</p></li><li><p><code>CIDR</code>可以更加有效地分配<code>IPv4</code>地址空间</p></li><li><p><code>CIDR</code>使用**”斜线记法”<strong>，或称<code>CIDR</code>记法。即在<code>IPv4</code>地址后面加上斜线”<code>/</code>“，</strong>在斜线后面写上网络前缀所占比特数量**</p><img src="https://s2.loli.net/2022/03/29/14Hc2fDPeyAoUSb.png" alt="image-20210402092157889" style="zoom:50%;" /></li><li><p><strong>CIDR实际上是将网络前缀都相同的连续IP地址组成一个”CIDR地址块”</strong></p></li></ul><p><strong>路由聚合</strong></p><blockquote><p>如路由器<code>A</code>上连接同一网络的多台主机，路由器<code>B</code>与<code>A</code>相连。若<code>A</code>将所有主机的具体<code>IP</code>地址都报给<code>B</code>，则路由器<code>B</code>中会增加多项路由条目。可实际上<code>B</code>向<code>A</code>中任意一个主机转发数据的时都是走同一个端口，因此我们可以<strong>将这些网络的共同前缀提取出来成为新的网络号，同时将剩余主机号置0放入路由器B中</strong></p><p>如：<code>A</code>连接了<code>172.1.4.0/25</code>和<code>172.1.7.0/24</code>，则提取公共前缀聚合后变为<strong>172.1.4.0&#x2F;22</strong></p></blockquote><h2 id="4-IP数据报发送转发过程"><a href="#4-IP数据报发送转发过程" class="headerlink" title="4. IP数据报发送转发过程"></a>4. IP数据报发送转发过程</h2><blockquote><p>同一个网络之间的主机可以直接通信，不同网络之间的主机通信需要路由器中转(有根据<code>ARP</code>协议获取<code>MAC</code>地址，填入封装有<code>IP</code>数据包的帧的过程)</p></blockquote><p><strong>源主机如何判断目的主机是否和自己在同一个网络中？</strong></p><blockquote><p>将自身的<code>IP</code>地址与子网掩码<strong>相与</strong>得到自身的网络号<code>1</code>，再**将目的<code>IP</code>地址与自身子网掩码相与得到网络号<code>2</code>**。若两个网络号相等，则说明处在同一个网络</p></blockquote><p><strong>主机如何知道应该把IP数据报交给哪个路由器进行转发呢？</strong></p><blockquote><p>通过设置默认网关。所谓默认网关，即当路由表中查不到数据时会将数据发往的路由器端口<code>IP</code>地址</p></blockquote><p>[例]<strong>简述路由器的路由功能和转发功能。</strong></p><p>[1]转发即当一个分组到达时所采取的操作。在路由器中，每个分组到达时对它进行处理，他在路由表中查找分组所对应的输出线路。通过查得的结果，将分组发送到正确的线路上；</p><p>[2]路由算法是网络层软件的一部分，它负责确定一个进来的分组应该被传送到哪条输出线路上。路由算法负责填充和更新路由表，转发功能则根据路由表的内容来确定当每个分组到来时应采取什么动作（如从哪个端口转发出去等）。</p><h4 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h4><p><strong>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表</strong></p><ul><li>这种人工配置方式简单、开销小。但不能及时适应网络状态的变化。<strong>一般只在小规模网络中采用</strong></li><li>可能由于：①配置错误 ②聚合了不存在的网络 ③网络故障 而<strong>出现路由环路错误</strong></li><li>&#x3D;&#x3D;默认路由为：0.0.0.0&#x2F;0&#x3D;&#x3D; 。其<strong>作用是当路由表不知道往哪里转发时，就会往默认路由指定的下一跳位置转发</strong>，根据网络号最长匹配原理，默认路由网络号长度为<code>0</code>，因此一定是最后一个被匹配的条目</li><li>&#x3D;&#x3D;特定主机路由：具体主机IP&#x2F;32&#x3D;&#x3D;。网络号前缀长度<code>32</code>保证了这是第一个被匹配的静态条目</li></ul><p><strong>如何防止错误路由导致IP数据报永久兜圈？</strong></p><ol><li>在<code>IP</code>数据报首部<strong>设置生存时间TTL字段</strong><ul><li><code>IP</code>数据报进入路由器后，<code>TTL</code>字段的值减<code>1</code>。<strong>若TTL的值不等于0，则被路由器转发，否则被丢弃</strong></li></ul></li><li>对于聚合后或由于网络故障而不存在的路由条目<strong>设置黑洞路由</strong><ul><li>所谓<strong>黑洞路由，即路由器应该丢弃的路由</strong></li></ul></li></ol><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613205826431.png" alt="image-20220613205826431"></p><h2 id="5-路由选择协议"><a href="#5-路由选择协议" class="headerlink" title="5. 路由选择协议"></a>5. 路由选择协议</h2><p>路由选择包含以下两种形式：</p><ul><li><strong>静态路由选择</strong>：由人工配置的网络路由、默认路由、特定主机路由、黑洞路由，该方式开销小，但不能及时适应网络状态的变化，小规模网络使用</li><li><strong>动态路由选择</strong>：路由器通过路由选择协议自动获取路由信息，该方式开销大，但能较好地适应网络状态的变化，大规模网络使用</li></ul><p>因特网所采用的的路由选择协议的主要特点：</p><ul><li><strong>自适应</strong>：动态路由选择，能较好地适应网络状态的变化</li><li><strong>分布式</strong>：路由器之间交换路由信息</li><li><strong>分层次</strong>：将整个因特网划分为许多较小的自治系统<code>AS</code></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613211438191.png" alt="image-20220613211438191"></p><p>路由器的结构：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613211932516.png" alt="image-20220613211932516"></p><h3 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h3><p><code>RIP</code>(<strong>R</strong>outing <strong>I</strong>nformation <strong>P</strong>rotocol)是基于<strong>距离向量算法</strong>的协议，使用<strong>跳数</strong>作为度量<strong>来衡量到达目的网络的距离</strong></p><ul><li>路由器到直连网络的距离定义为<code>1</code></li><li>路由器到非直连网络的距离定义为所经过的路由器数<code>+1</code></li><li>允许一条路径最多只能包含<code>15</code>个路由器。**”距离”等于16时相当于不可达**。因此，<code>RIP</code>只适用于小型互联网</li><li><code>RIP</code>认为<strong>好的路由</strong>就是”距离短”的路由，也就是所&#x3D;&#x3D;<strong>通过路由器数量(跳数)最少的路由</strong>&#x3D;&#x3D;</li><li>当到达同一目的网络有多条”距离相等”的路由时，可以进行等价负载均衡</li><li><code>RIP</code>包含以下三个要点：<ul><li><strong>仅和相邻路由器交换信息</strong>(而并非OSPF的洪泛发送)</li><li>交换的是各自路由表的信息</li><li>周期性交换信息</li></ul></li></ul><blockquote><p>注：</p><p><strong>RIP属于应用层协议</strong>，使用UDP传送数据；OSPF属于网络层协议，直接使用IP数据报发送。</p></blockquote><img src="https://s2.loli.net/2022/03/29/LNaVzts4AGpiS1q.png" alt="image-20210402105534964" style="zoom:50%;" /><h4 id="RIP存在的问题"><a href="#RIP存在的问题" class="headerlink" title="RIP存在的问题"></a>RIP存在的问题</h4><blockquote><p>存在”<strong>坏消息传播很慢</strong>“的问题，又称为<strong>路由环路(两个路由器相互学习错误路由，造成循环)<strong>或距离无穷计数问题，这是距离向量算法的一个固有问题，可以采取多种措施</strong>减少</strong>出现该问题的概率或减小该问题带来的危害</p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613222017030.png" alt="image-20220613222017030"></p><ul><li>限制最大路径距离为<code>15</code>(<code>16</code>表示不可达)</li><li>当路由表发生变化时就立即发送更新报文(即”<strong>触发更新</strong>“)，而不是周期性发送</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口反方向传送(即**”水平分割””毒性反转”**)</li></ul><h3 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h3><blockquote><p>简单来说就是得到一个带权有向图，以当前路由器为起点，通过迪杰斯特拉算法得到到达某个点的最短路径</p></blockquote><ul><li><p><code>OSPF</code>(<strong>O</strong>pen <strong>S</strong>hortest <strong>P</strong>ath <strong>F</strong>irst)是基于<strong>链路状态路由</strong>的，而不像<code>RIP</code>那样是基于距离矢量的</p></li><li><p><code>OSPF</code>采用<code>SPF</code>算法计算路由，而不像<code>RIP</code>那样是基于距离向量的</p></li><li><p><code>OSPF</code>不限制网络规模，更新效率高，收敛速度快</p></li><li><p>链路状态是指本路由器都和哪些路由器相邻，以及相应链路的”代价”</p><ul><li><strong>“代价”的意思是费用、距离、时延、带宽等</strong></li></ul></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613223639296.png" alt="image-20220613223639296"></p><ul><li><p><code>OSPF</code>相邻路由器之间通过交互<strong>问候(Hello)分组</strong>，建立和维护邻居关系</p><ul><li><p><code>Hello</code>分组封装在<code>IP</code>数据报中，发往组播地址<code>224.0.0.5</code></p></li><li><p>发送周期为<code>10</code>秒</p></li><li><p><code>40</code>秒未收到来自邻居路由器的<code>Hello</code>分组，则认为该邻居路由器不可达</p><img src="https://s2.loli.net/2022/03/29/c9CxFbqiNLU847a.png" alt="image-20210402194552098" style="zoom:50%;" /></li></ul></li><li><p>使用<code>OSPF</code>的每个路由器都会产生<strong>链路状态通告LSA</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>A</strong>dvertisement)，包含以下内容</p><ul><li>直连网络的链路状态信息</li><li>邻居路由器的链路状态信息</li></ul></li><li><p><code>LSA</code>被封装在<strong>链路状态更新分组LSU</strong>中，<strong>采用&#x3D;&#x3D;洪泛法&#x3D;&#x3D;发送</strong>，将会通告本自治系统中的所有路由器</p></li><li><p>使用<code>OSPF</code>的每个路由器都有一个<strong>链路状态数据库LSDB</strong>，用于存储<code>LSA</code></p></li><li><p>通过各路由器洪泛法发送封<strong>装有自己LSA的LSU分组</strong>，各路由器的<code>LSDB</code>最终达到一致</p></li><li><p>使用<code>OSPF</code>的各路由器<strong>基于LSDB进行最短路径优先SPF计算</strong>，构建出各种到达其他各路由器的最短路径，即构建各自的路由表</p></li></ul><h4 id="OSPF五种分组"><a href="#OSPF五种分组" class="headerlink" title="OSPF五种分组"></a>OSPF五种分组</h4><ol><li><p><strong>问候</strong>(<code>Hello</code>)分组</p><p>用来发现和维护邻居路由器的可达性</p></li><li><p><strong>数据库描述</strong>(<strong>D</strong>atabase <strong>D</strong>escription)分组</p><p>向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息</p></li><li><p><strong>链路状态请求信息</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>R</strong>equest)分组</p><p>向邻居路由器请求发送某些链路状态项目的详细信息</p></li><li><p><strong>链路状态更新</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>U</strong>pdate)分组</p><p>路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新链路状态</p></li><li><p><strong>链路状态确认</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>A</strong>cknowledgement)分组</p><p>这是对链路状态更新分组的确认分组</p></li></ol><h4 id="OSPF基本工作过程"><a href="#OSPF基本工作过程" class="headerlink" title="OSPF基本工作过程"></a>OSPF基本工作过程</h4><ul><li>相邻路由器之间周期性发送**问候分组(Hello)**，以便建立和维护邻居关系</li><li>建立邻居关系后，**给邻居路由器发送数据库描述分组(DD)**，&#x3D;&#x3D;也就是将自己链路状态数据库中的所有链路状态项目的摘要信息发送给邻居路由器&#x3D;&#x3D;</li><li>收到数据库描述分组后，若发现自己缺少其中某些链路状态项目，则会发送**链路状态请求分组(LSR)**。</li><li>对方收到链路状态请求分组后，则会将其所缺少的链路状态项目的详细信息封装在**链路状态更新分组(LSU)**中发送回去</li><li>收到链路状态更新分组后，将这些信息添加到自己的链路状态数据库中</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613225958482.png" alt="image-20220613225958482"></p><h4 id="多点接入网络中邻居关系的建立"><a href="#多点接入网络中邻居关系的建立" class="headerlink" title="多点接入网络中邻居关系的建立"></a>多点接入网络中邻居关系的建立</h4><blockquote><p>一条总线上有多台主机，则它们互为邻居，因此每个路由器都要向其他路由器发送问候分组和链路状态更新分组。为了减少所发送分组的数量，则需要用相应方法对邻居关系进行删减</p></blockquote><p><code>OSPF</code>采用选举<strong>指定路由器DR</strong>(<code>Designated Router</code>)和<strong>备用的指定路由器BDR</strong>(<code>Backup Designated Router</code>)的方法减少邻居数目</p><ul><li>所有的非<code>DR/BDR</code>只与<code>DR/BDR</code>建立邻居关系</li><li>非<code>DR/BDR</code>之间通过<code>DR/BDR</code>交换信息</li><li>当<code>DR</code>失效时由<code>BDR</code>顶上</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613230400131.png" alt="image-20220613230400131"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613231143107.png" alt="image-20220613231143107"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613231306731.png" alt="image-20220613231306731"></p><h3 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h3><blockquote><p>BGP(<strong>B</strong>order <strong>G</strong>ateway <strong>P</strong>rotocol)协议用于域间路由，尽力寻找一条能够到达目的网络且比较好的路由(不兜圈子)，而并非找最佳路由，使用<strong>路径向量算法</strong>，封装BGP报文的协议为<strong>TCP</strong>。</p></blockquote><img src="https://s2.loli.net/2022/03/29/6n1GYkZI3sNfDTq.png" alt="image-20210402204919385" style="zoom:50%;" /><p><strong>内部网关协议IGP(如路由信息协议RIP或最短路径优先OSPF)</strong></p><ul><li>设法使分组在一个自治系统内尽可能有效地从源网络传输到目的网络</li><li>无需考虑自治系统外部其他方面的策略</li></ul><p><strong>外部网关协议EGP(如边界网关协议BGP)</strong></p><ul><li>在不同自治系统内，度量路由的”代价”(距离，宽带，费用等)可能不同。因此，对于自治系统之间的路由选择，使用”代价”作为度量来寻找最佳路由是不行的<ul><li>比如<code>A</code>系统路由选择度量是距离，<code>B</code>系统是带宽……那么<code>A</code>到系统<code>E</code>的路由怎样走最好呢？由于没有统一度量，所以不能直接得到最佳路由</li></ul></li><li>自治系统之间的路由选择必须考虑相关策略(政治、经济、安全等)<ul><li>如中国的数据报尽量要绕开美国的自治系统</li></ul></li></ul><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><img src="https://s2.loli.net/2022/03/29/ncI7vqrRfYjJLhW.png" alt="image-20210402210541270" style="zoom:50%;" /><ul><li><p><code>BGP</code>发言人<strong>交换网络可达性的信息</strong>(要到达某个网络所要经过的一系列自治系统)</p><blockquote><p>注意：<strong>可达性信息是到达某个网络所经过的路径而不仅仅是下一跳</strong>。</p></blockquote></li><li><p>当<code>BGP</code>发言人互相交换了网络可达性的信息后，各<code>BGP</code>发言人就根据所采用的策略从收到的路由信息中<strong>找出到达各自治系统的较好路由</strong>，也就是构造出树形结构(防环路)的自治系统连通图</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613232710301.png" alt="image-20220613232710301"></p><h4 id="BGP-4的4种报文"><a href="#BGP-4的4种报文" class="headerlink" title="BGP-4的4种报文"></a>BGP-4的4种报文</h4><ol><li><strong>OPEN(打开)报文</strong>：用来与相邻的另一个<code>BGP</code>发言人建立关系，使通信初始化</li><li><strong>UPDATE(更新)报文</strong>：用来通告某一路由的信息，以及列出要撤销的多条路由</li><li><strong>KEEPALIVE(保活)报文</strong>：用来周期性地证实邻站的连通性</li><li><strong>NOTIFICATION(通知)报文</strong>：用来发送检测到的差错</li></ol><p>**[注]**封装报文的协议分别是：</p><img src="https://s2.loli.net/2022/03/29/ojSbrpkuUflyxmP.png" alt="image-20210402212051046" style="zoom: 33%;" /><h2 id="6-广播路由"><a href="#6-广播路由" class="headerlink" title="6. 广播路由"></a>6. 广播路由</h2><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220618161938981.png" alt="image-20220618161938981" style="zoom:50%;" /><h3 id="逆向路径转发"><a href="#逆向路径转发" class="headerlink" title="逆向路径转发"></a>逆向路径转发</h3><p><strong>工作原理：路由器收到广播分组，看到来那条路径是否是用来给广播源发送分组的那条线路，是，转发到其他所有线路上，否则，丢弃。</strong></p><p>逆向路径转发思想被认为是一种非常优秀的广播技术。当一个广播数据包到达一个路由器时，路由器检查它到来的那条线路是否正是通常用来给广播源端发送数据包用的那条线路。如果是，说明这是一个极好的机会，该广播数据包是沿着最佳路径被转发过来的，因而是到达当前路由器的第一份副本。如果是这种情况，则路由器将该数据包转发到除了到来的那条线路之外的其他线路上。然而，如果广播数据包时从其他任何一条并非首选的到达广播源的线路入境的话，该数据包被当做一个可能的重复数据包而被丢弃。</p><p>例子如图。图a显示了一个网络，图b显示了该网络中路由器 I 的一棵汇集树，图c显示了逆向路径算法是如何工作的。在第一跳，I 发送数据包给F、H、J和N。这些数据包中的每一个都是在通向 I 的首选路径（假定首选路径都沿着汇集树）到来的，这点用字母外面加一个圆圈来表示。在第二跳，共产生了8个数据包，其中，在第一跳接收到数据包的路由器各产生2个数据包。结果，所有这8个数据包都到达了以前没有访问过的路由器，其中5个是沿着首选线路到来的。在第三跳所产生的6个数据包中，只有3个是沿着首选线路（在C、E和K）到来的，其他的都是重复数据包。<strong>在经过5跳和24个数据包以后</strong>，广播过程终止。相比之下，如果完全沿着汇集树的话，<strong>只需要4跳和14个数据包。</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220618162136405.png" alt="image-20220618162136405"></p><h2 id="7-组播路由"><a href="#7-组播路由" class="headerlink" title="7. 组播路由"></a>7. 组播路由</h2><h3 id="生成树剪枝和逆向路径转发进行组播"><a href="#生成树剪枝和逆向路径转发进行组播" class="headerlink" title="生成树剪枝和逆向路径转发进行组播"></a>生成树剪枝和逆向路径转发进行组播</h3><p>链路状态路由算法网络中，每个路由器知道完整的拓扑结构，哪些主机属于哪个组，采用生成树剪枝方法。<br>以该节点为根生成最小生成树，从每条路径末端开始剪枝，逐步向根，将不属于相应组的路由器去掉。</p><p><strong>距离矢量路由算法中，没有生成树，采用逆向路径转发。</strong></p><p>当路由器收到组播消息时，若它所连接的主机没有组成员且它没有连到其他路由器或在所有线路上已收到该组的PRUNE信息，表示自己不再需要收到组播消息，则回送PRUNE信息（剪枝消息）。<br>当路由器A收到路由器B对某组的PRUNE信息，下次收到该组消息，就无需转发给B。</p><p><strong>基于核心树（core-based tree,CBT）的方法——每个路由器只需为每个组保存一棵树。</strong></p><p>生成树剪枝的方法，对于每个组播成员都有一棵不同的树，保存困难。<br>核心树的方法选择一个组内比较中心的节点为根，来生成最小生成树，然后剪枝。</p><h2 id="8-IPv4数据报首部格式"><a href="#8-IPv4数据报首部格式" class="headerlink" title="8. IPv4数据报首部格式"></a>8. IPv4数据报首部格式</h2><img src="https://s2.loli.net/2022/03/29/l2HxjfOtw6VJkGM.png" alt="image-20210403102328289"  /><blockquote><p>注：</p><ul><li>上图中一行代表<code>4</code>个字节，<code>32</code>个比特；</li><li>报文中有总长度的只有<code>IP</code>头和<code>UDP</code>头。</li></ul></blockquote><ul><li><p><strong>版本</strong></p><p>占<code>4</code>比特，表示<code>IP</code>协议版本。通信双方使用的<code>IP</code>协议版本必须一致。目前广泛使用的<code>IP</code>协议版本为号为<code>4(IPv4)</code></p></li><li><p><strong>首部长度</strong></p><p>占<code>4</code>比特，表示<code>IP</code>数据报首部长度。该字段取值<strong>以4字节为单位</strong></p><p><strong>最小十进制取值为5，表示IP数据报首部只有20字节</strong>【<code>4</code>字节单位，所以取值<code>5</code>对应<code>20</code>字节】固定部分</p><p><strong>最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分</strong></p></li><li><p><strong>可选字段</strong></p><p>长度从<code>1</code>到<code>40</code>个字节不等。<strong>用来支持排错、测量及安全等措施</strong></p><p>可选字段增加了<code>IP</code>数据报的功能，但这同时也<strong>使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销</strong>。实际上可选字段很少被使用</p></li><li><p><strong>填充字段</strong></p><p>确保首部长度为<code>4</code>字节长度的整数倍，使用全<code>0</code>进行填充</p></li><li><p><strong>区分服务</strong></p><p>占<code>8</code>比特，利用该字段的不同数值可提供不同等级的服务质量，只有在使用区分服务时，该字段才起作用。一般情况下不使用该字段</p></li><li><p><strong>总长度</strong></p><p>占<strong>16比特</strong>，表示<code>IP</code>数据报的总长度【首部+数据载荷】，最大取值为十进制<code>65535</code>，<strong>以字节为单位</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220613235249077.png" alt="image-20220613235249077"></p></li><li><p><strong>标识</strong></p><p>占<code>16</code>比特，<strong>属于同一个数据报的各分片数据报应该具有相同的标识【可理解为ID】</strong></p><p><code>IP</code>软件维持一个计数器，每产生一个数据报，计数器值<code>+1</code>，并将此值赋给标识字段</p></li><li><p><strong>标志</strong></p><p>占<code>3</code>比特，各比特含义如下</p><ul><li><code>DF</code>位：<code>1</code><strong>表示不允许分片</strong>，<code>0</code>表示允许</li><li><code>MF</code>位：<code>1</code>表示”后面还有分片”，<code>0</code>表示”这是最后一个分片”</li><li>保留位：必须为<code>0</code></li></ul></li><li><p><strong>片偏移(必须是整数)</strong></p><p>占<code>13</code>比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少单位；</p><p>是否需要分片根据其<code>MTU</code>(最大传输单元)进行确定。</p><p>&#x3D;&#x3D;<strong>片偏移以8个字节为单位</strong>&#x3D;&#x3D;</p><img src="https://s2.loli.net/2022/03/29/v3EcitHnKlSbeZj.png" alt="image-20210403105053561" style="zoom:50%;" /></li><li><p><strong>生存时间</strong></p><p><strong>占8比特</strong>，最初以秒为单位，最大生存周期为<code>255</code>秒；路由器转发IP数据报时，将<code>IP</code>数据报首部中的该字段值减去<code>IP</code>数据报在本路由器上耗费的时间，若不为<code>0</code>【说明路由器消耗时间后还活着】就转发，否则丢弃</p><p><strong>现在以”跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段值减1，若不为0就转发，否则丢弃</strong>【防止兜圈】</p></li><li><p><strong>协议</strong></p><p>占<code>8</code>比特，指明<code>IPv4</code>数据报的数据部分是何种协议数据单元</p><img src="https://s2.loli.net/2022/03/29/CbSUJTO7Ap6ri3Z.png" alt="image-20210403110400976" style="zoom:50%;" /></li><li><p><strong>首部检验和</strong></p><p>占<strong>16比特，用来检测首部在传输过程中是否出现差错</strong>，比<code>CRC</code>检验码简单，称为因特网检验和</p><p><code>IP</code>数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段【生存时间、标志、片偏移等】的取值可能发生变化</p><p>由于<code>IP</code>层本身不提供可靠传输服务，并且计算首部校验和是一项耗时的操作，因此在<code>IPv6</code>中，路由器不再计算首部校验和，从而更快转发<code>IP</code>数据报</p></li><li><p><strong>源IP地址和目的IP地址</strong></p><p>各占<strong>32比特</strong>，用来填写发送该<code>IP</code>数据报的源主机<code>IP</code>地址和接收该<code>IP</code>数据报的目的主机</p></li></ul><h2 id="9-网际控制报文ICMP"><a href="#9-网际控制报文ICMP" class="headerlink" title="9. 网际控制报文ICMP"></a>9. 网际控制报文ICMP</h2><blockquote><p>为了更有效地转发<code>IP</code>数据报和提高交付成功的机会，在网际层使用了网际控制报文协议<code>ICMP</code>(全称为<strong>I</strong>nternet <strong>C</strong>ontrol <strong>M</strong>essage <strong>P</strong>rotocol)。</p></blockquote><ul><li>主机或路由器使用<code>ICMP</code>来发送差错报告报文和询问报文</li><li><code>ICMP</code>报文被封装在<code>IP</code>数据报中发送</li></ul><h4 id="回答报文类型"><a href="#回答报文类型" class="headerlink" title="回答报文类型"></a>回答报文类型</h4><h5 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h5><blockquote><p><strong>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文</strong>。具体可再根据<code>ICMP</code>的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络位置、目的主机未知等<code>13</code>种错误</p></blockquote><h5 id="源点抑制"><a href="#源点抑制" class="headerlink" title="源点抑制"></a>源点抑制</h5><blockquote><p><strong>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文</strong>，使源点知道应当把数据报发送速率放慢</p></blockquote><h5 id="时间超过"><a href="#时间超过" class="headerlink" title="时间超过"></a>时间超过</h5><blockquote><p>当路由器收到一个目的<code>IP</code>地址不是自己的<code>IP</code>数据报，会将其<strong>生存时间TTL(Time To Live)字段</strong>值减<code>1</code>。若结果不为<code>0</code>，则将该<code>IP</code>数据报转发出去；<strong>若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文</strong></p><p>当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文</p></blockquote><h5 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h5><blockquote><p>当路由器或目的主机收到<code>IP</code>数据报后，根据其首部中的检验和字段发现首部在传输过程中<strong>出现了误码，就丢弃该数据报，并向源点发送参数问题报文</strong></p></blockquote><h5 id="改变路由-重定向"><a href="#改变路由-重定向" class="headerlink" title="改变路由(重定向)"></a>改变路由(重定向)</h5><blockquote><p><strong>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)</strong></p><p>如主机<code>1</code>的默认路由是<code>R1</code>，信息经过<code>R1</code>时，<code>R1</code>发现最佳路由不是自己，而是<code>R2</code>，所以通过<code>ICMP</code>告知主机<code>1</code></p></blockquote><h4 id="询问报文类型"><a href="#询问报文类型" class="headerlink" title="询问报文类型"></a>询问报文类型</h4><h5 id="回送请求和回答"><a href="#回送请求和回答" class="headerlink" title="回送请求和回答"></a>回送请求和回答</h5><ul><li><code>ICMP</code>回送请求报文是由主机或路由器向一个特定的目的主机发出的询问</li><li>收到此报文的主机必须给源主机或路由器发送<code>ICMP</code>回送回答报文</li><li>这种询问报文用来测试目的站是否可达及了解其有关状态</li></ul><h4 id="时间戳请求和回答"><a href="#时间戳请求和回答" class="headerlink" title="时间戳请求和回答"></a>时间戳请求和回答</h4><ul><li><code>ICMP</code>时间戳请求报文是请某个主机或路由器回答当前的日期和时间</li><li>在<code>ICMP</code>时间戳回答报文中有一个<code>32</code>比特的字段，其中写入的整数代表从<code>1900</code>年<code>1</code>月<code>1</code>日起到当前时刻一共有多少秒</li><li>这种询问报文用来进行时钟同步和测量时间</li></ul><h3 id="不发送ICMP的情况"><a href="#不发送ICMP的情况" class="headerlink" title="不发送ICMP的情况"></a>不发送ICMP的情况</h3><ol><li>对<code>ICMP</code>差错报告报文不再发送<code>ICMP</code>差错报告报文</li><li>对<strong>第一个分片的数据报片的所有后续数据报片</strong>都不发送<code>ICMP</code>差错报告报文</li><li>对具有<strong>多播地址的数据报</strong>都不发送<code>ICMP</code>差错报告报文</li><li>对具有<strong>特殊地址(如127.0.0.0或0.0.0.0)的数据报</strong>不发送<code>ICMP</code>差错报告报文</li></ol><h3 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h3><h4 id="分组网间探测PING"><a href="#分组网间探测PING" class="headerlink" title="分组网间探测PING"></a>分组网间探测PING</h4><ul><li>用来测试主机或路由器间的连通性【<code>eNSP</code>的<code>ping</code>命令】</li><li>应用层直接使用网际层的<code>ICMP</code>(没有通过传输层的<code>TCP</code>或<code>UDP</code>)</li><li>使用<code>ICMP</code>回送请求和回答报文</li></ul><h4 id="跟踪路由tracerouce"><a href="#跟踪路由tracerouce" class="headerlink" title="跟踪路由tracerouce"></a>跟踪路由tracerouce</h4><blockquote><p>用来测试IP数据报从源主机到达目的主机要经过哪些路由器</p></blockquote><p><code>Windows</code>版本</p><ul><li><code>tracert</code>命令</li><li>应用层直接使用网际层<code>ICMP</code></li><li>使用了<code>ICMP</code>回送请求和回答报文以及差错报告报文</li></ul><h5 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h5><blockquote><p>由<strong>主机发送出去的数据包中的生存时间字段TTL由1开始逐渐增加</strong>，每个路由器都会返回一个时间超过报文，由此达到跟踪路由器的目的</p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614003157549.png" alt="image-20220614003157549"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614003300773.png" alt="image-20220614003300773"></p><h2 id="10-虚拟专用网VPN"><a href="#10-虚拟专用网VPN" class="headerlink" title="10. 虚拟专用网VPN"></a>10. 虚拟专用网VPN</h2><img src="https://s2.loli.net/2022/03/29/xlqVQjNHWF8GP4i.png" alt="image-20210403132652875" style="zoom: 67%;" /><p>利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为<strong>虚拟专用网</strong>（<strong>VPN</strong>，<strong>V</strong>irtual <strong>P</strong>rivate <strong>N</strong>etwork）。</p><p>由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往远小于本机构所拥有的主机数量。因此，虚拟专用网中各主机所分配的地址应该是<strong>本机构可自由分配的专用地址</strong>，而且不是需要申请的、在因特网上使用的公有地址。</p><p>在因特网中的所有路由器，对目的地址是私有地址的IP数据包一律不进行转发。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614004624187.png" alt="image-20220614004624187"></p><img src="https://s2.loli.net/2022/03/29/dAlX2KpP5c7OUiQ.png" alt="image-20210403132227798"  /><h2 id="11-网络地址转换NAT"><a href="#11-网络地址转换NAT" class="headerlink" title="11. 网络地址转换NAT"></a>11. 网络地址转换NAT</h2><blockquote><p><code>NAT</code>(<strong>N</strong>etwork <strong>A</strong>ddress <strong>T</strong>ranslation)能使大量使用<strong>内部专用地址的专用网络用户共享少量外部全球地址</strong>来访问因特网上的主机和资源【为了节省<code>IPv4</code>地址】</p></blockquote><p>由于绝大多数的网络应用都是使用传输层协议<code>TCP</code>或<code>UDP</code>来传送数据，因此可以<strong>利用传输层的端口号和IP地址一起进行转换。</strong></p><p>这样，<strong>用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信</strong>。这种将端口号和<code>IP</code>地址一起进行转换的技术叫作<strong>网络地址与端口号转换NAPT</strong></p><p>NAT路由器从自己的全球IP地址池中分配一个临时的全球IP地址，并将<strong>IP数据报的源地址修改为该地址</strong>(全球IP地址)。注意：目的路由器收到后，也会将目的地址转换为私有地址。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005044691.png" alt="image-20220614005044691"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005230731.png" alt="image-20220614005230731"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005327292.png" alt="image-20220614005327292"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005459280.png" alt="image-20220614005459280"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005649883.png" alt="image-20220614005649883"></p><blockquote><p>注：</p><p>由于NAT对外网屏蔽了内网主机的网络地址，能为内网的主机提供一定的安全保护。如下例：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614005836525.png" alt="image-20220614005836525"></p></blockquote><h1 id="第5章-传输层"><a href="#第5章-传输层" class="headerlink" title="第5章 传输层"></a>第5章 传输层</h1><p><strong>物理层、数据链路层以及网络层</strong>它们共同解决了将主机通过异构网络互联起来所面临的的问题，<strong>实现了&#x3D;&#x3D;主机到主机&#x3D;&#x3D;的通信</strong>；</p><p>但实际上在**计算机网络中进行通信的真正实体是位于通信&#x3D;&#x3D;两端主机中的进程&#x3D;&#x3D;**。</p><p>**如何为运行在不同主机上的应用进程提供直接的通信服务是传输层的任务，&#x3D;&#x3D;传输层协议又称端到端协议&#x3D;&#x3D;**。</p><blockquote><p>注：通信子网包括物理层、数据链路层和网络层，主要用作数据通信。传输层向高层用户屏蔽了下面通信子网的细节。</p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614100427388.png" alt="image-20220614100427388"></p><h2 id="1-端口号"><a href="#1-端口号" class="headerlink" title="1. 端口号"></a>1. 端口号</h2><blockquote><p>为了使运行不同操作系统的计算机的应用进程之间能进行网络通信，必须<strong>使用统一的方法对TCP&#x2F;IP体系的应用进程进行标识，即端口号</strong>。</p></blockquote><p><strong>为什么不能使用进程标识符PID来区分各进程？</strong></p><blockquote><p>因为因特网上的计算机并不是使用统一的操作系统，<strong>不同的操作系统使用不同格式的进程标识符</strong></p></blockquote><p><strong>端口号只具有本地意义</strong>，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，<strong>不同计算机中的相同的端口号是没有联系的</strong></p><p>端口号使用<strong>16比特</strong>表示，取值范围<code>0~65535</code>。</p><ul><li><strong>熟知端口号：0~1023</strong>，<code>IANA</code>把这些端口号指派给了<code>TCP/IP</code>体系中最重要的一些应用协议</li><li><strong>登记端口号：1024~49151</strong>，为没有熟知端口号的应用程序使用。使用这类端口号必须在<code>IANA</code>按照规定的手续登记，以防止重复。如<code>Microsoft RDP</code>微软远程桌面使用的端口是<code>3389</code></li><li><strong>短暂端口号：49152~65535</strong>，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的的动态端口号。<strong>通信结束后，这个端口号可供其他客户进程以后使用</strong></li></ul><blockquote><p>注：</p><p>端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。</p></blockquote><img src="https://s2.loli.net/2022/03/29/rVK2oCIJ9nScLlN.png" alt="image-20210407092941219" style="zoom:50%;" /><h2 id="2-复用"><a href="#2-复用" class="headerlink" title="2. 复用"></a>2. 复用</h2><ul><li>发送方的某些应用进程所发送的不同应用报文，<strong>在传输层使用UDP协议进行封装，这是UDP复用；若用TCP封装则称TCP复用</strong></li><li>传输层使用端口号区分不同进程，不管使用何种协议封装的报文，<strong>在网络层都需要使用IP协议封装成IP数据报，这是IP复用</strong>，数据报中协议字段的值用来表名封装的是何种协议数据单元</li><li>根据协议字段的值，<strong>将IP数据报封装的协议数据单元上交传输层的过程叫IP分用</strong></li><li>同理，<strong>UDP根据端口号将数据交给应用进程叫做UDP分用；TCP根据端口号将数据交给应用进程叫做TCP分用</strong></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614102218231.png" alt="image-20220614102218231"></p><p>下面介绍两个传输层的重要协议：</p><ul><li>用户数据报协议UDP(<strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol)—–&gt;<strong>无连接的</strong></li><li>传输控制协议TCP(<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol)—–&gt;<strong>面向连接的</strong></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614105033828.png" alt="image-20220614105033828"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614105315273.png" alt="image-20220614105315273"></p><h2 id="3-用户数据报协议UDP"><a href="#3-用户数据报协议UDP" class="headerlink" title="3. 用户数据报协议UDP"></a>3. 用户数据报协议UDP</h2><ul><li><p><code>UDP</code>是<strong>无连接</strong>的，随时可向目的主机发送报文，<strong>支持单播、多播和广播</strong></p></li><li><p><code>UDP</code>收到应用层报文后直接为报文添加<code>UDP</code>首部就进行发送（既不拆分也不合并），即<strong>面向应用报文</strong></p></li><li><p><code>UDP</code>数据报<strong>首部仅8字节</strong></p></li><li><p><code>UDP</code>向上层提供不可靠传输服务，适用于IP电话、视频会议等实时应用</p><img src="https://s2.loli.net/2022/03/29/Z4dbhMaEHJBpXKl.png" alt="image-20210407094446337" style="zoom: 80%;" /></li></ul><h2 id="4-传输控制协议TCP"><a href="#4-传输控制协议TCP" class="headerlink" title="4. 传输控制协议TCP"></a>4. 传输控制协议TCP</h2><ul><li><p><code>TCP</code>时<strong>面向连接</strong>的。发送数据前需要”<strong>三报文握手</strong>“建立连接，数据传输结束后需要”<strong>四报文挥手</strong>“释放连接</p></li><li><p><strong>仅支持单播</strong></p></li><li><p><strong>TCP是面向字节流的</strong>。其将应用进程交付下来的数据块仅仅看作是一连串的字节流，<code>TCP</code>将这些字节流编号并存储在缓冲中；接收方一边接收数据，一边将缓冲中的数据交给应用进程。</p></li><li><p><strong>接收方收到的字节流必须和发送方收到的字节流完全一致</strong></p></li><li><p><strong>不会出现传输差错</strong>(误码、丢失、乱序、重复)</p></li><li><p><code>TCP</code>报文段首部最小<code>20</code>字节，最大<code>60</code>字节</p></li><li><p><code>TCP</code>协议可以<strong>实现可靠传输、流量控制、拥塞控制</strong></p></li><li><p>采用<code>TCP</code>时，传输层向上提供的是一条<strong>全双工</strong>的可靠逻辑信道</p><img src="https://s2.loli.net/2022/03/29/HwtMzCyxukhmE3Z.png" alt="image-20210407095549799" style="zoom: 67%;" /></li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><blockquote><p>一般来说，我们希望数据传输能快一些，但如果发送方把数据发送得过快，接收方就可能来不及接收，这会造成数据的丢失</p><p>流量控制就是<strong>让发送方的发送速率不要太快，要让接收方来得及接收</strong></p></blockquote><p><strong>利用滑动窗口实现流量控制</strong></p><ul><li>发送方和接收方窗口保持一致，发送方窗口随着接收方窗口变化而变化(通过确认报文告知发送方)</li><li>发送方发送完窗口内数据后需要等到确认报文才会滑动窗口并继续发送，若窗口内的某个值很久没有收到回答报文，则超时重传报文</li></ul><p><strong>若接收方窗口调为0后，一段时间之后又调为200，此时向发送方传递确认报文，可此时报文丢失，则会造成发送方窗口始终为0，接收方以为发送方收到了确认报文而开始等待数据，造成死锁，如何解决？</strong></p><blockquote><p>当发送方窗口大小为<code>0</code>时，其隔一段时间就会发送一个<code>1</code>字节大小的零窗口探测报文，看看此时接收窗口大小是否进行调整</p></blockquote><p><strong>若发送的零窗口探测报文也丢失了，会造成新死锁吗？</strong></p><blockquote><p>不会。因为零窗口探测报文也有超时重传机制</p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614134055328.png" alt="image-20220614134055328"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614134400586.png" alt="image-20220614134400586"></p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><blockquote><p>在某段时间，若<strong>对网络中某一资源的需求超过了该资源所能提供的可用部分</strong>，网络性能就要变坏，这种情况叫做<strong>拥塞</strong></p><p>若出现拥塞而不进行控制，<strong>整个网络的吞吐量将随输入负荷的增大而下降</strong></p></blockquote><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614135236409.png" alt="image-20220614135236409" style="zoom: 67%;" /><h4 id="1-慢开始和拥塞避免"><a href="#1-慢开始和拥塞避免" class="headerlink" title="1. 慢开始和拥塞避免"></a>1. 慢开始和拥塞避免</h4><p>发送方<strong>共需维护两个状态变量</strong>：</p><ul><li><p>发送方维护一个叫做&#x3D;&#x3D;<strong>拥塞窗口cwnd</strong>&#x3D;&#x3D;的状态变量，<strong>其值取决于网络的拥塞程度，是发送端根据网络拥塞情况确定的，并且动态变化</strong></p><ul><li>拥塞窗口<code>cwnd</code>的维护原则：<strong>只要网络没有出现拥塞，拥塞窗口就再增大一些(确认报文段窗口大小)，但只要网络出现拥塞，拥塞窗口就减少一些</strong></li><li>判断出现网络拥塞的依据：没有按时收到应当到达的确认报文(发送超时重传)</li><li>发送方还需维护一个接收窗口<code>rwnd</code>，为接收方根据目前接收缓存大小所允诺的最新窗口值，反映接收方的容量，发送窗口的上限值为<code>min&#123;rwnd,cwnd&#125;</code></li></ul></li><li><p>发送方将拥塞窗口作为<strong>发送窗口swnd</strong>，即<code>swnd=cwnd</code></p></li><li><p>维护一个&#x3D;&#x3D;<strong>慢开始门限ssthresh</strong>&#x3D;&#x3D;状态变量</p><ul><li>当<code>cwnd &lt; ssthresh</code>时，使用慢开始算法</li><li>当<code>cwnd &gt; ssthresh</code>时，停止使用慢开始算法而改用拥塞避免算法</li><li>当<code>cwnd = ssthresh</code>时，既可使用慢开始算法，也可以使用拥塞避免算法</li></ul></li></ul><h5 id="x3D-x3D-慢开始-x3D-x3D"><a href="#x3D-x3D-慢开始-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;慢开始&#x3D;&#x3D;"></a>&#x3D;&#x3D;慢开始&#x3D;&#x3D;</h5><p><strong>拥塞窗口从1开始，根据应答报文大小来扩大拥塞窗口</strong>，如发送方窗口<code>2</code>，应答大小<code>2</code>，则下次发送大小为<code>4</code>[<code>2+2</code>]</p><h5 id="x3D-x3D-拥塞避免-x3D-x3D"><a href="#x3D-x3D-拥塞避免-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;拥塞避免&#x3D;&#x3D;"></a>&#x3D;&#x3D;拥塞避免&#x3D;&#x3D;</h5><p><strong>拥塞窗口每次只扩大1</strong>，而不是向慢开始那样根据发送方的返回窗口进行增加。</p><p>当窗口增加到一定大小，发送方发送的报文出现了超时重传，则判断网络可能出现了拥塞，此时<strong>将拥塞窗口初始化为1</strong>，同时将<strong>慢开始门限ssthresh设置为发生拥塞时窗口大小的一半</strong></p><p><em>“拥塞避免”并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞</em></p><img src="https://s2.loli.net/2022/03/29/hDPsLE3JnlBipOA.png" alt="image-20210407110048100" style="zoom:50%;" /><h4 id="2-快重传和快恢复"><a href="#2-快重传和快恢复" class="headerlink" title="2. 快重传和快恢复"></a>2. 快重传和快恢复</h4><p>快重传是<strong>使发送方尽快进行重传</strong>，而不是等待超时重传计时器超时再重传</p><ul><li><p>要求<strong>接收方</strong>不用等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong></p></li><li><p>即使<strong>收到了失序的报文段(说明有一段丢失了)<strong>也要立即发出</strong>对已收到的报文段的重复确认</strong>[注：确认序号应为期待接收的下一个报文段的序号]</p></li><li><p><strong>发送方一旦收到3个连续的重复确认，就将相应的报文段立即重传</strong>，而不是等该报文段的超时重传计时器超时再重传</p></li><li><p>对于个别丢失的报文段，发送方<strong>不会出现超时重传</strong>[因为收到3个连续的重复确认会立即重传]，也就不会误认为出现了拥塞。使用快重传可以使整个网络的吞吐量提高约<code>20%</code></p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614141553247.png" alt="image-20220614141553247" style="zoom:80%;" /></li></ul><p>发送方一旦收到<code>3</code>个重复确认，就知道现在只是丢失了个别报文段。也是不启动慢开始算法，而执行<strong>快恢复算法</strong>。</p><ul><li>发送方<strong>将慢开始门限ssthresh值和拥塞窗口cwnd值调整为当前窗口的一半，开始执行拥塞避免算法</strong></li><li>也有的快恢复实现是把快恢复开始时的拥塞窗口<code>cwnd</code>值再增大一些，即等于新的<code>ssthresh+3</code><ul><li>既然发送方收到<code>3</code>个重复的确认，就表明有<code>3</code>个数据报文段已经离开了网络</li><li>这三个报文段不再消耗网络资源而是停留在接收方的接收缓存中</li><li>可见现在网络中不是堆积了报文段而是减少了<code>3</code>个报文段。因此可以适当把拥塞窗口扩大些</li></ul></li></ul><img src="https://s2.loli.net/2022/03/29/BR9zpjXI7kEDfd6.png" alt="image-20210407142013666" style="zoom: 67%;" /><h5 id="超时重传时间-RTO-选择"><a href="#超时重传时间-RTO-选择" class="headerlink" title="超时重传时间(RTO)选择"></a>超时重传时间(RTO)选择</h5><blockquote><p>正常情况下，超时重传时间应该设为略大于往返时间。但是由于各区域的速率可能不一致，因此将超时重传时间设置为一个固定值是行不通的</p></blockquote><p>利用每次测量得到的<code>RTT</code>(往返时间,<strong>R</strong>ound-<strong>T</strong>rip <strong>T</strong>ime)样本，计算<strong>加权平均往返时间$RTT_S$</strong>(平滑的往返时间)</p><p>显然，<strong>超时重传时间&#x3D;&#x3D;RTO&#x3D;&#x3D;(Retransmission Timeout)应略大于加权平均往返时间</strong>$RTT_S$</p><img src="https://s2.loli.net/2022/03/29/IlKhjM3FcwAvq6H.png" alt="image-20210407184344967" style="zoom: 80%;" /><p><strong>往返时间测量问题</strong></p><img src="https://s2.loli.net/2022/03/29/4yMUP5ltq3eO8QN.png" alt="image-20210407185821019" style="zoom: 33%;" /><p><strong>针对出现超时重传时无法测准往返时间RTT的问题，有以下解决方法</strong>：</p><blockquote><p>在计算加权平均往返时间$RTT_S$时，只要报文段重传了，就不采用其往返时间<code>RTT</code>样本。也就是<strong>出现重传时，不重新计算$RTT_S$，进而超时重传时间RTO也不会重新计算</strong>。</p><p>此方法的漏洞如下：如果报文段时延突然增大很多，并且之后很长一段时间都会保持这种时延。因此在原来得出的重传时间内，不会收到确认报文段，于是重传，造成死锁</p><p>修正方法：<strong>报文段每重传一次，就把超时重传时间RTO增大一些，典型的做法是将RTO的值取为旧RTO的2倍</strong></p></blockquote><h4 id="3-流量整形-令牌桶算法"><a href="#3-流量整形-令牌桶算法" class="headerlink" title="3. 流量整形(令牌桶算法)"></a>3. 流量整形(令牌桶算法)</h4><p>将用户发出的不平滑的数据包流转变成网络中平滑的数据包流.典型的技术——<strong>漏桶和令牌桶</strong>。</p><ul><li>漏桶算法：漏桶算法能强行限制数据的传输速率</li><li>令牌桶算法：系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220618145812969.png" alt="image-20220618145812969" style="zoom:67%;" /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220618145854467.png" alt="The Token Bucket Algorithm"></p><p>本题类似游泳池问题，一边在流水，一边在产生水，问你什么时候这个泳池会空。</p><p>在突如其来的网络的情况下，最大的传输速率可以达到什么？在用了令牌桶的情况下，M就是你出水的速率，ρ是你进水的速率，C是假设你最开始水是满的，出水的速率大于进水的速率，看什么时候这个池子会空。</p><h3 id="可靠传输-1"><a href="#可靠传输-1" class="headerlink" title="可靠传输"></a>可靠传输</h3><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614145349253.png" alt="image-20220614145349253"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614145502351.png" alt="image-20220614145502351"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614150527907.png" alt="image-20220614150527907"></p><h3 id="传输连接管理"><a href="#传输连接管理" class="headerlink" title="传输连接管理"></a>传输连接管理</h3><blockquote><p><code>TCP</code>的传输连接管理就是使传输连接的建立和释放都能正常地进行</p></blockquote><img src="https://s2.loli.net/2022/03/29/aXUOEKi3TgrQjoC.png" alt="image-20210408094126188" style="zoom: 80%;" /><ul><li><code>SYN</code>(同步序列编号,<strong>Syn</strong>chronize Sequence Numbers)为<code>1</code>的报文段不能携带数据，但会消耗一个<strong>序列号<code>seq</code></strong></li><li><code>ACK=1</code>代表这是普通确认报文段，确认号**<code>ack=x+1</code>表示这是对报文段序列号<code>seq=x</code>的确认**，而服务器的<code>seq=y</code>是服务器为自己选择的初始序号，可以随意指定</li></ul><blockquote><p>注：</p><p>(1)为保证数据传输的可靠性，<code>TCP</code>采用了<strong>对报文段确认</strong>的机制【但<code>TCP</code>是面向字节的协议】；</p><p>(2)<code>ACK</code>表示一方希望收到的<strong>下一个报文段</strong>的数据部分的<strong>第一个字节</strong>在对方发送缓冲区的编号【若前面发送的报文段包含不止一个字节，需要<strong>加上相应个字节</strong>而不是<code>+1</code>】；</p><p>(3)“两报文握手”产生的问题：<img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614152550223.png" alt="image-20220614152550223"></p></blockquote><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220620114303813.png" alt="四报文挥手"></p><ul><li><code>FIN</code>称为报文的终止位，即使不携带数据，也需要消耗掉一个序号；<code>FIN</code>代表的意思是单方面释放连接，表示本方已经无数据发送，但可以接收对方的数据</li><li>客户端发起关闭请求，一去一回后进入半关闭状态【客户端不再发送数据，服务端可能还会发】</li><li>服务器将自己剩余的数据发送完后也发送一个关闭请求，接着客户端给予回应后服务器关闭，客户机则要等到一段时间后完全关闭(<strong>防止发给服务器的确认报文丢失</strong>)</li><li>在这里第二步和第三步服务器发的确认号<code>ack</code>是相同的，而<code>seq</code>在第三步的序号为<code>w</code>，代表可能在此区间内服务器又发送了一些数据</li></ul><img src="https://s2.loli.net/2022/03/29/A2z7nb4o8SwRuVL.png" alt="image-20210408095936148" style="zoom:50%;" /><p>[例题]（9分）假设题33～41图中的H3访问Web服务器S时，S为新建的TCP连接分配了20 KB(K&#x3D;1 024)的接收缓存，最大段长MSS&#x3D;1 KB，平均往返时间RTT&#x3D;200 ms。H3建立连接时的初始序号为100，且持续以MSS大小的段向S发送数据，拥塞窗口初始阈值为32 KB；S对收到的每个段进行确认，并通告新的接收窗口。假定TCP连接建立完成后，S端的TCP接收缓存仅有数据存入而无数据取出。请回答下列问题。</p><ol><li><pre><code>在TCP连接建立过程中，H3收到的S发送过来的第二次握手TCP段的SYN和ACK标志位的值分别是多少?确认序号是多少?</code></pre></li><li><pre><code>H3收到的第8个确认段所通告的接收窗口是多少?此时H3的拥塞窗口变为多少?H3的发送窗口变为多少?</code></pre></li><li><pre><code>当H3的发送窗口等于0时，下一个待发送的数据段序号是多少?H3从发送第1个数据段到发送窗口等于0时刻为止，平均数据传输速率是多少(忽略段的传输延时)?</code></pre></li><li><pre><code>若H3与S之间通信已经结束，在t时刻H3请求断开该连接，则从t时刻起，S释放该连接的最短时间是多少?</code></pre></li></ol><p>【解析】</p><p>1）本小题考查TCP连接建立过程，需要考生掌握如下图所示的细节。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/d53d30f36fe914de87a8821717fb81cecbaabb70.png@942w_669h_progressive.webp" alt="img"></p><p>在本题中，H3收到的S发送过来的第二次握手TCP段的SYN和ACK标志位的值都为1，这是对H3发来的TCP连接请求的确认；由于题目给定H3建立连接时的初始序号为100，则该确认报文段的确认序号为100+1&#x3D;101。</p><p>2）本小题的解题细节如下所示，</p><p>从上图可知，H3收到的第8个确认段所通告的接收窗口是12KB；此时H3的拥塞窗口变为9KB；H3的发送窗口变为9KB。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/df469758c253804f82ffbee00838ce782c4b6a09.png@942w_647h_progressive.webp" alt="img"></p><p>3）根据题意，可将小题2）中的解题步骤继续进行，如下图所示。</p><p>从上图可知，当H3的发送窗口等于0时，H3已发送了20个TCP段，每个1KB（1024B）；由于题目给定H3建立TCP连接时的初始序号为100，则当H3的发送窗口等于0时，下一个待发送段的序号为20×1024+101&#x3D;20581。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/a083202bdf03e76db94f47c68444a5f8e4242e42.png@942w_471h_progressive.webp"></p><p>从上图可知，H3从发送第1个TCP段到发送窗口等于0时刻止，共经历了5个RTT（往返时延），共发送了20个TCP段，每个1KB（1024B），题目给定RTT（往返时延）&#x3D;200ms，因此可计算H3的平均数据传输速率为（20×1KB）÷ （5×200ms）&#x3D; 20.48kB&#x2F;s。</p><p>4）本小题考查TCP连接释放过程，需要考生掌握如下图所示的细节。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/25820244a5e9327672e2c22c8e4c94b80e622d6f.png@942w_678h_progressive.webp" alt="img"></p><p>本小题给定TCP客户端H3与TCP服务器端S之间通信已经结束，在t时刻H3请求断开该连接；结合上图可知，S收到连接释放报文段（FIN&#x3D;1, seq&#x3D;u）后立即给H3发出确认（ACK&#x3D;1, seq&#x3D;v, ack&#x3D;u+1），然后进入CLOSED-WAIT（关闭等待）状态。由于题目给定通信已经结束，也就是S没有数据段要发送给H3了，因此立即给H3发送连接释放报文段（FIN1, ACK&#x3D;1, seq&#x3D;w, ack&#x3D;u+1），然后进入LAST-ACK（最后确认）状态，对于本题可认为上图中的CLOSED-WAIT状态和FIN-WAIT-2状态的持续时间几乎不存在。H3在收到S的连接释放报文段后，必须对此发出确认（ACK&#x3D;1, seq&#x3D;u+1, ack&#x3D;w+1），当S收到该确认时，进入CLOSE（关闭）状态。</p><p>综上所述，若H3与S之间通信已经结束，在t时刻H3请求断开该连接，则从t时刻起，S释放该连接所需的最短时间为1个往返时延RTT加1个端到端传播时延（也就是RTT的一半），共1.5个RTT，即1.5×200ms&#x3D;300ms。</p><h3 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h3><img src="https://s2.loli.net/2022/03/29/DIiPBuM52NhKxaS.png" alt="image-20210408100356000" style="zoom:50%;" /><ul><li><p><strong>源端口</strong>：占<code>16</code>比特，写入源端口号，用来<strong>标识&#x3D;&#x3D;发送&#x3D;&#x3D;该TCP报文段的应用进程</strong></p></li><li><p><strong>目的端口</strong>：占<code>16</code>比特，写入目的端口号，用来<strong>标识&#x3D;&#x3D;接收&#x3D;&#x3D;该TCP报文段的应用进程</strong></p></li><li><p><strong>序号</strong>(序列号)：占<code>32</code>比特，取值范围$[0,2^{32}-1]$，序号增加到最后一个后，下一个序号就又回到<code>0</code>。作用是<strong>指出本TCP报文段数据载荷的第一个字节的序号</strong>，该字段包含在<code>TCP</code>首部中，而不包含在<code>UDP</code>首部中</p></li><li><p><strong>确认标志位ACK</strong>：取值为<code>1</code>时确认号字段才有效，为<code>0</code>时确认号字段无效</p></li><li><p><strong>确认号</strong>：占<code>32</code>比特，取值范围$[0,2^{32}-1]$，序号增加到最后一个后，下一个序号就又回到<code>0</code>。可理解为<strong>若确认号&#x3D;n，则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据</strong></p></li><li><p><strong>数据偏移</strong>：占<code>4</code>比特，并<strong>以4字节为单位</strong></p><p>用来指出<code>TCP</code>报文段的数据载荷部分的起始处距离<code>TCP</code>报文段的起始处。这个字段<strong>实际上是指出TCP报文段的首部长度</strong></p><p><strong>首部固定长度为20字节，因此数据偏移字段的最小值$(0101)_2$；首部最大长度为60字节，因此数据偏移字段最大值为$(1111)_2$</strong></p></li><li><p><strong>保留字段</strong>：占<strong>6比特</strong>，保留为今后使用，但是目前应置为<code>0</code></p></li><li><p><strong>窗口</strong>：占<strong>16比特</strong>，以字节为单位。指出<strong>发送本报文段一方的接收窗口</strong></p><p>窗口值作为接收方让发送方设置其发送窗口的依据，这是<strong>以接收方的接收能力来控制发送方的发送能力</strong>，称为流量控制</p></li><li><p><strong>检验和</strong>：占<strong>16比特</strong>，检测范围<strong>包括TCP报文段的首部和数据载荷两部分</strong></p><p>在计算校验和时，要在<code>TCP</code>报文段的前面加上<code>12</code>字节的伪首部</p></li><li><p><strong>同步标志位SYN</strong>：在<code>TCP</code>连接建立时用来同步序号</p></li><li><p><strong>终止标志位FIN</strong>：用来释放<code>TCP</code>连接</p></li><li><p><strong>复位标志位RST</strong>：用来复位<code>TCP</code>连接</p><p>当<code>RST=1</code>时，表明<code>TCP</code>连接出现了异常，必须释放连接，然后再重新建立连接；<code>RST</code>置<code>1</code>还用来拒绝一个非法的报文段或拒绝打开一个<code>TCP</code>连接</p></li><li><p><strong>推送标志位PSH</strong>：接收方的<code>TCP</code>收到该<strong>标志位为1的报文段会尽快上交应用进程</strong>，而不必等到接收缓存都填满后再向上交付</p></li><li><p><strong>紧急标志位URG</strong>：取值<strong>为1</strong>时<strong>紧急指针字段有效</strong>；取值为<code>0</code>时紧急指针字段无效。</p></li><li><p><strong>紧急指针</strong>：占<code>16</code>比特，以字节为单位，用来指明紧急数据的长度</p><p>当发送方有紧急数据时，可<strong>将紧急数据插队到发送缓存的最前面</strong>，并立刻封装到一个<code>TCP</code>报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据</p></li><li><p><strong>选项</strong>：增加选项可以增加<code>TCP</code>的功能</p><ul><li><strong>最大报文段长度MSS选项</strong>：<code>TCP</code>报文段数据载荷部分的最大长度</li><li><strong>窗口扩大选项</strong>：为了扩大窗口(提高吞吐率)</li><li><strong>时间戳选项</strong>：<ul><li>用来计算往返时间<code>RTT</code></li><li>用于处理序号超范围的情况，又称为防止序号绕回<code>PAWS</code></li></ul></li><li><strong>选择确认选项</strong>：实现选择确认功能</li></ul></li><li><p><strong>填充</strong>：由于选项长度可变，因此<strong>使用填充来保证报文段首部能被4整除</strong></p></li></ul><h1 id="第6章-应用层"><a href="#第6章-应用层" class="headerlink" title="第6章 应用层"></a>第6章 应用层</h1><blockquote><p>解决通过应用进程的交互来实现特定网络应用的问题</p><p>应用层是计算机网络体系结构的<strong>最顶层</strong>，是<strong>设计和建立计算机网络的最终目的</strong></p></blockquote><h2 id="客户-x2F-服务器方式-C-x2F-S"><a href="#客户-x2F-服务器方式-C-x2F-S" class="headerlink" title="客户&#x2F;服务器方式(C&#x2F;S)"></a>客户&#x2F;服务器方式(C&#x2F;S)</h2><ul><li><strong>客户&#x2F;服务器</strong><ul><li>客户和服务器是指通信中所涉及的两个应用进程</li><li>客户&#x2F;服务器方式所描述的是进程之间服务和被服务的关系</li><li><strong>客户是服务请求方，服务器是服务提供方</strong>；客户机是面向用户的，服务器是面向任务的</li><li><strong>服务器总是处于&#x3D;&#x3D;运行等待状态&#x3D;&#x3D;，并等待客户的服务请求。服务器具有固定端口号(例如HTTP服务器的默认端口号为80)，而运行服务器的主机也具有固定的IP地址</strong></li></ul></li><li>基于<code>C/S</code>方式的应用服务通常是<strong>服务集中型</strong>的，即应用服务集在网络中比客户计算机少得多的服务器计算机上<ul><li>由于一台服务器计算机要为多个客户机提供服务，在<code>C/S</code>应用中，<strong>常会出现服务器计算机跟不上众多客户机请求的情况</strong></li><li>为此，在<code>C/S</code>应用中，常用<strong>计算机群集</strong>(或服务器场)构建一个强大的<strong>虚拟服务器</strong></li></ul></li></ul><h2 id="对等方式-P2P方式"><a href="#对等方式-P2P方式" class="headerlink" title="对等方式(P2P方式)"></a>对等方式(P2P方式)</h2><img src="https://s2.loli.net/2022/03/29/7W2U8hXDJTQycnk.png" alt="image-20210408111938739" style="zoom:50%;" /><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="*动态主机配置协议DHCP"></a>*动态主机配置协议DHCP</h2><blockquote><p>通过<code>DHCP</code>服务器为指定网段主机分配<code>IP</code>地址</p></blockquote><img src="https://s2.loli.net/2022/03/29/1IsVUaBpoScNlew.png" alt="image-20210408113125059" style="zoom:50%;" /><ul><li><p><code>DHCP</code>客户机首先进行广播寻找<code>DHCP</code>服务器(“<strong>DHCP发现</strong>“消息)，源地址为本机<code>0.0.0.0</code>，目的地址为广播地址<code>255.255.255.255</code></p></li><li><p><code>DHCP</code>服务器收到后，返回”<strong>DHCP提供</strong>“消息，其中包含提供给<code>DHCP</code>客户机的<code>IP</code>地址和相关配置信息。源地址为<code>DHCP</code>服务器地址，目的地址为<strong>广播地址(因为此时目的客户机还没有IP地址)</strong></p></li><li><p>客户机可能会收到<strong>多个DHCP提供消息，一般以收到的第一个为准</strong>。此时客户机知道<code>DHCP</code>服务器可以给它分配地址，因此发送”<strong>DHCP请求</strong>“报文来请求分配<code>IP</code>地址，报文的源地址为<code>0.0.0.0</code>，目的地址为<code>255.255.255.255</code></p></li><li><p><code>DHCP</code>收到请求信息后，查看其中<strong>事务ID</strong>是否相符，若不符则丢弃；符合则从地址池中取得一个<code>IP</code>地址，并通过<code>ARP</code>协议确认此地址未被使用后，将其封装进”<strong>DHCP确认</strong>“信息中，报文源地址为<code>DHCP</code>服务器地址，目的地址为广播地址</p></li><li><p>客户机收到<code>DHCP</code>确认信息后，查看其中事务<code>ID</code>是否相符，不符则丢弃；符合则<strong>再次使用ARP确认IP地址没有被使用，确认成功后将此IP地址应用(有一定租约)。</strong></p></li><li><p><strong>当IP地址租约达到0.5倍时间时</strong>，客户机会再次向<code>DHCP</code>服务器发送请求信息，此时<code>DHCP</code>服务器会出现以下三种情况</p><ol><li>收到请求后，返回一个<strong>确认报文</strong>，其中有新的<code>IP</code>地址租期</li><li>收到请求后，返回<strong>否认报文</strong>，则客户机收到后立刻停止使用IP地址并重新发送”<code>DHCP</code>发现”报文</li><li>不响应。则在租期达到<strong>0.875倍</strong>时，<code>DHCP</code>客户必须重新发送”<strong>DHCP请求</strong>“报文，继续等待<code>DHCP</code>服务器可能做出的反应。若依然无反应，则租用期到后，客户机必须立刻停止使用当前<code>IP</code>地址</li></ol></li><li><p><strong>客户端可随时终止DHCP服务器提供的租用期</strong>，这时只需要向<code>DHCP</code>服务器发送<code>DHCP</code>释放报文即可。源地址<code>0.0.0.0</code>，目的地址<code>255.255.255.255</code></p></li></ul><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><blockquote><p>我们通过输入网址来访问网页，可实际上计算机间的通信是通过IP地址，所以网址的本质上是<code>IP</code>地址，将网址与IP地址映射起来就是<code>DNS</code>的作用</p></blockquote><p><strong>因特网是否可以只适用一台DNS服务器？</strong></p><blockquote><p>这种做法不可取。因为因特网的规模很大，如果只有一个服务器，那么一旦其出现故障，整个因特网就会瘫痪</p><p>因此现实中采用**&#x3D;&#x3D;层次结构的命名树&#x3D;&#x3D;**作为主机的名字(即域名)，并使用分布式的域名系统<code>DNS</code></p><p><strong><code>DNS</code>使大多数域名都在本地解析</strong>，仅少量解析需要在因特网上通信，因此系统效率很高。由于<code>DNS</code>是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行</p><p><code>DNS</code>报文使用传输层的**<code>UDP</code>协议**进行封装，可以使用传输层的无连接服务，传输层的端口号为53</p><p><code>DNS</code>基于<code>C/S</code>模式</p></blockquote><img src="https://s2.loli.net/2022/03/29/95erbkyKc7ATPIJ.png" alt="image-20210408125953774" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/LhYUbSvtcBK5DjP.png" alt="image-20210408130151667" style="zoom:50%;" /><img src="https://s2.loli.net/2022/03/29/gy8YQpdk3HFXOso.png" alt="image-20210408130609042" style="zoom:50%;" /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614190901605.png" alt="image-20220614190901605"></p><img src="https://s2.loli.net/2022/03/29/bfzOvwR2DCB49aj.png" alt="image-20210408131224716" style="zoom: 80%;" /><p>【2016年题40】假设所有域名服务器均采用迭代查询方式进行域名解析，当H4访问规范域名为<a href="http://www.abc.xyz.com的网站时,域名服务器201.1.1.1在完成该域名解析过程中,可能发出dns查询的最少和最多次数分别是c/">www.abc.xyz.com的网站时，域名服务器201.1.1.1在完成该域名解析过程中，可能发出DNS查询的最少和最多次数分别是C</a><br>A.0，3B.1，3C.0，4D.1，4</p><p>【解析】若主机H4的DNS高速缓存中有该域名的DNS信息时，不需要查询任何域名服务器。这样，H4无需向图中的默认域名服务器(本地域名服务器）发出DNS查询，该域名服务器也无需发出DNS查询。</p><p>题目给定采用迭代查询进行域名解析，在最坏的情况下，需要图中的本地域名服务器依次向以下域名服务器发出共4次DNS查询：</p><ul><li><p><strong>根域名服务器</strong></p></li><li><p><strong>顶级域名服务器(.com)</strong></p></li><li><p><strong>权限域名服务器(xyz.com)</strong></p></li><li><p><strong>权限域名服务器(abc.xyz.com)</strong></p></li></ul><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="*文件传送协议FTP"></a>*文件传送协议FTP</h2><blockquote><p>将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即<strong>文件传送</strong></p></blockquote><p><code>FTP</code>的常见用途是在计算机之间传输文件，尤其是<strong>用于批量传输文件</strong>。<code>FTP</code>的另一个常见用途是<strong>让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器</strong></p><ul><li><strong>FTP提供交互式的访问</strong>，运行客户指明文件的类型与格式(如指明是否使用<code>ASCII</code>码)，并<strong>允许文件具有存取权限</strong>(如访问文件的用户必须经过授权，并输入有效的口令)</li><li><strong>FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件</strong></li></ul><img src="https://s2.loli.net/2022/03/29/eAuwnULDTEMxgZ4.png" alt="image-20210408132633263" style="zoom:50%;" /><ul><li>用于<strong>传送控制命令</strong>的<code>TCP</code>连接在<strong>整个会话过程都保持开启状态</strong></li><li>用于<strong>传送数据</strong>的<code>TCP</code>连接只会在<strong>有数据传送时开启，数据结束传送后就关闭</strong></li></ul><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p>电子邮件系统的三个主要组成构件：<strong>用户代理，邮件服务器，以及电子邮件所需的协议</strong></p><ul><li><strong>用户代理</strong>是用户与电子邮件系统的接口，又称为<strong>电子邮件客户端软件</strong></li><li><strong>邮件服务器</strong>是电子邮件系统的基础设施。因特网上所有的<code>ISP</code>都有邮件服务器，其<strong>功能是发送和接收邮件，同时还要负责维护用户的邮箱</strong></li><li><strong>协议</strong>包括邮件<strong>发送协议</strong>(如<code>SMTP</code>,Simple Mail Transfer Protocol)和邮件<strong>读取协议</strong>(如<code>POP3</code>(<strong>P</strong>ost <strong>O</strong>ffice <strong>P</strong>rotocol - Version 3)，<code>IMAP</code>)</li></ul><img src="https://s2.loli.net/2022/03/29/OkCvHou7tTa84Lf.png" alt="image-20210408135731725" style="zoom: 80%;" /><h3 id="简单邮件传送协议SMTP"><a href="#简单邮件传送协议SMTP" class="headerlink" title="简单邮件传送协议SMTP"></a>简单邮件传送协议SMTP</h3><img src="https://s2.loli.net/2022/03/29/Ym5r3ceuVtPkOHx.png" alt="image-20210408140138068"  /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614194153036.png" alt="image-20220614194153036"></p><ul><li>SMTP协议<strong>只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象</strong></li><li>SMTP不能满足传送多媒体邮件（例如带有图片、音频或视频数据）的需要。并且许多其他非英语国家的文字(例如中文、俄文、甚至带有重音符号的法文或德文)也无法用SMTP传送。</li><li>为解决SMTP传送非ASCII码文本的问题，提出了<strong>多用途因特网邮件扩展MIME</strong> (<strong>M</strong>ultipurpose <strong>I</strong>nternet <strong>M</strong>ail<strong>E</strong>xtensions)。<ul><li>增加了5个新的邮件首部字段，这些字段提供了有关邮件主体的信息；</li><li>定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化；</li><li>定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。</li></ul></li><li><code>SMTP</code>只支持传输<code>7</code>比特<code>ASCII</code>码内容，支持从用户代理向邮件服务器发送文件，不支持从邮件服务器向用户代理发送文件</li></ul><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614194409778.png" alt="image-20220614194409778" style="zoom: 67%;" /><h3 id="邮件读取协议"><a href="#邮件读取协议" class="headerlink" title="邮件读取协议"></a>邮件读取协议</h3><p>常用的邮件读取协议有以下两个：</p><ul><li><p>邮局协议<strong>POP</strong>(<strong>邮局协议</strong>)，POP3是其第三个版本，是因特网正式标准。<em>主要用于支持使用客户端远程管理在服务器上的电子邮件</em></p><p>非常简单、功能有限的邮件读取协议.用户只能以下载并删除方式或下载并保留方式从邮件服务器下载邮件到用户方计算机.不允许用户在邮件服务器上管理自己的邮件.(例如创建文件夹，对邮件进行分类管理等)。</p></li><li><p>因特网邮件访问协议<strong>IMAP</strong>(Internet Message Access Protocol,<strong>Internet消息访问协议</strong>)，IMAP4是其第四个版本，目前还只是因特网建议标准，是功能比POP3强大的邮件读取协议。用户在自己的计算机上就可以操控邮件服务器中的邮箱，就像在本地操控一样，因此IMAP是一个联机协议.</p></li></ul><blockquote><p>注：</p><p><code>POP3</code>和<code>IMAP4</code>都采用基于<strong>TCP连接</strong>的客户&#x2F;服务器方式。<code>POP3</code>使用熟知端口110，<code>IMAP4</code>使用熟知端口143。</p></blockquote><h3 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h3><ul><li>通过浏览器登录（提供用户名和口令）邮件服务器万维网网站就可以撰写、收发、阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。</li><li>邮件服务器网站通常都提供非常强大和方便的邮件管理功能，用户可以在邮件服务器网站上管理和处理自己的邮件，而不需要将邮件下载到本地进行管理。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614195125566.png" alt="image-20220614195125566"></p><h2 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h2><blockquote><p>万维网并非某种特殊的计算机网络。它是一个大规模的、联机式的信息储藏所，<strong>是运行在因特网上的一个分布式应用</strong></p><p>万维网利用网页之间的超链接将不同网站的网页链接成一张逻辑上的信息网</p></blockquote><p>浏览器最重要的部分是<strong>渲染引擎，也就是浏览器内核</strong>。负责对网页内容进行解析和显示</p><ul><li><p>不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里显示的效果可能不同</p></li><li><p>网页编写者需要在不同内核的浏览器中测试网页显示效果</p></li><li><p>为了方便地访问在世界范围的文档，万维网使用统一资源定位符<code>URL</code>来指明因特网上任何种类”资源”的位置</p></li><li><p><code>URLs</code>(统一资源定位器,<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocators)的一般形式由以下四个部分组成：</p><img src="https://s2.loli.net/2022/03/29/1LuWqngmTpflzbH.png" alt="image-20210408142436226" style="zoom:50%;" /></li></ul><p>万维网的文档：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614201712475.png" alt="image-20220614201712475"></p><h3 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h3><blockquote><p><code>HTTP</code>定义了浏览器(即万维网进程)怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614202106057.png" alt="image-20220614202106057" style="zoom:67%;" /></blockquote><p>HTTP&#x2F;1.0采用<strong>非持续连接方式</strong>。在该方式下，每次浏览器要请求一个文件都要与服务器建立TCP连接,当收到响应后就立即关闭连接。</p><ul><li>每请求一个文档就要有两倍的RTT的开销。若一个网页上有很多引用对象（例如图片等)，那么请求每一个对象都需要花费2RTT的时间；</li><li>为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重；</li><li>端口<code>80</code>为超文本传输协议<code>HTTP</code>开放。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614202347414.png" alt="image-20220614202347414"></p><p>HTTP&#x2F;1.1采用<strong>持续连接方式</strong>。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户(浏览器）和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。</p><ul><li><p>这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。</p></li><li><p>为了进一步提高效率，HTTP&#x2F;1.1的持续连接还可以使用<strong>流水线方式</strong>工作，即<strong>浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文</strong>。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。</p></li></ul><h4 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h4><p>HTTP的报文格式：</p><p>HTTP是面向文本的，其报文中的每一个字段都是一些<strong>ASCII码串</strong>，并且每个字段的长度都是不确定的。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614202935352.png" alt="image-20220614202935352"></p><blockquote><p>注：</p><p>上图中URL指<strong>统一资源定位符</strong>(<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator)，是万维网上每个页面的唯一地址。</p></blockquote><h4 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h4><img src="https://s2.loli.net/2022/03/29/6NBf7SMgRbXITyh.png" alt="image-20210408143853025" style="zoom:50%;" /><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614203134373.png" alt="image-20220614203134373"></p><blockquote><p>仅需Web服务器对HTTP报文进行响应，但不需要返回请求对象时，HTTP请求报文应该使用的方法是<code>HEAD</code>。</p></blockquote><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote><p>早期的万维网应用非常简单，仅仅是用户查看存放在不同服务器上的各种静态的文档。因此HTTP被设计为—种无状态的协议。这样可以简化服务器的设计。</p><p><code>Cookie</code>提供了一种机制使得万维网服务器能够”记住”用户，而无需用户主动提供用户标识信息。也就是说，<strong>Cookie是一种对无状态的HTTP进行状态化的技术</strong>。</p></blockquote><p>下图介绍使用Cookie在服务器上记录用户信息：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614203748249.png" alt="image-20220614203748249"></p><h3 id="万维网缓存与代理服务器"><a href="#万维网缓存与代理服务器" class="headerlink" title="万维网缓存与代理服务器"></a>万维网缓存与代理服务器</h3><p>在万维网中还可以使用缓存机制以提高万维网的效率。</p><ul><li><p>万维网缓存又称为<strong>Web缓存</strong>(Web Cache)，可位于客户机，也可位于中间系统上，位于中间系统上的Web缓存又称为<strong>代理服务器</strong>(Proxy Server) 。</p></li><li><p>Web缓存把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若发现这个请求与暂时存放的请求相同，就返回暂存的响应，而不需要按URL的地址再次去因特网访问该资源。</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614204105218.png" alt="image-20220614204105218"></p><p><strong>如果原始服务器中的文档已经修改，但是代理服务器中仍然有缓存，那么主机访问文档时是否会访问到未修改的文档从而发送错误呢？</strong></p><blockquote><p>实际上，原始服务器会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong>。当请求到达代理服务器时，若文档未过期则直接返回响应报文，否则向原始服务器发送请求。请求头部中有<strong>If-modified-since字段，记录了上次文档的修改时间</strong>，如果代理服务器中文档的修改时间与原始服务器中文档的修改时间一致，说明文档没有发送变化，因此原始服务器返回一个空文档，否则返回新文档。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614204351740.png" alt="image-20220614204351740"></p></blockquote><p>[例]假设HTTP1.1协议以持续的非流水线方式工作一次请求-响应的时间为RTT，rfc.html页面引用了2个JPEG小图像，则浏览器<strong>从开始建立TCP连接到收到全部内容为止</strong>，需要多少个RTT?</p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220614204707641.png" alt="image-20220614204707641" style="zoom:67%;" /><p>【注意】TCP三报文握手只算一个RTT，第三次握手就可以发送数据。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机学科理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 理论知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.数学知识</title>
      <link href="/2022/08/13/suan-fa-04-shu-xue-zhi-shi/"/>
      <url>/2022/08/13/suan-fa-04-shu-xue-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、质数"><a href="#一、质数" class="headerlink" title="一、质数"></a>一、质数</h1><p>在大于1的整数中，如果只包含1和本身这两个约数，就被称为质数/素数。</p><h2 id="1-1-质数的判定"><a href="#1-1-质数的判定" class="headerlink" title="1.1 质数的判定"></a>1.1 质数的判定</h2><p><strong>试除法判定质数</strong>：若<code>d|n</code>，则<code>n/d|n</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-分解质因数"><a href="#1-2-分解质因数" class="headerlink" title="1.2 分解质因数"></a>1.2 分解质因数</h2><p><strong>试除法分解质因数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//若此条件成立,i一定是质数</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">,</span> s <span class="token operator">++</span> <span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//单独处理,唯一一个大于sqrt(n)的质因子</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：</p><ul><li>若<code>x % i = 0</code>成立，则已经将在<code>i = 2~ (n - 1)</code>中的所有质因子除尽，<code>i</code>不包含其中的所有质因子，故<code>i</code>一定是质数；</li><li><code>n</code>中最多只包含一个大于<code>sqrt(n)</code>的质因子；</li><li>当<code>n = 2^k</code>时，时间复杂度为<code>O(log n)</code>，而最坏时间复杂度为<code>O(sqrt(n))</code>，平均情况是介于两者之间。</li></ul></blockquote><h2 id="1-3-求素数"><a href="#1-3-求素数" class="headerlink" title="1.3 求素数"></a>1.3 求素数</h2><p><strong>朴素筛法求素数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>     <span class="token comment">// primes[]存储所有素数</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// st[x]存储x是否被筛掉</span><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//被筛过</span>        primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线性筛法求素数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>     <span class="token comment">// primes[]存储所有素数</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// st[x]存储x是否被筛掉</span><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.搜索与图论</title>
      <link href="/2022/08/13/suan-fa-03-sou-suo-yu-tu-lun/"/>
      <url>/2022/08/13/suan-fa-03-sou-suo-yu-tu-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DFS和BFS"><a href="#一、DFS和BFS" class="headerlink" title="一、DFS和BFS"></a>一、DFS和BFS</h1><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">数据结构</th><th style="text-align:center">空间</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">DFS</td><td style="text-align:center">stack</td><td style="text-align:center">$O(h)$（树的高度相关）</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">BFS</td><td style="text-align:center">queue</td><td style="text-align:center">$O(2^{h})$（树的层相关）</td><td style="text-align:center">具有<strong>最短路径</strong>的性质</td></tr></tbody></table></div><h2 id="1-1-DFS"><a href="#1-1-DFS" class="headerlink" title="1.1 DFS"></a>1.1 DFS</h2><p><strong>回溯、恢复现场</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727164858902.png" alt="image-20220727164858902"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> path<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//路径保存(存储方案)</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//检验这个点是否被用过</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token comment">//递归到最后一层</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//未递归到最后一层</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//如果该点未被使用过</span><span class="token punctuation">&#123;</span>path<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//将该点记录</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//恢复现场</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一种搜索顺序：按行枚举</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727211718696.png" alt="image-20220727211718696"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727211246336.png" alt="image-20220727211246336"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//对角线需要两倍的n</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储棋子情况</span><span class="token keyword">bool</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> udg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//列、对角线、反对角线情况</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出每行的棋子情况</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span><span class="token punctuation">;</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//记录为true</span><span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//恢复现场</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种搜索顺序：一个一个格子进行搜索。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//对角线需要两倍的n</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储棋子情况</span><span class="token keyword">bool</span> row<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> udg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//行、列、对角线、反对角线情况</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token comment">//行列坐标及当前皇后的数量</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> n<span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token comment">//找到了一种成功的方案</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//枚举两种情况:不放皇后</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放皇后</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dg<span class="token punctuation">[</span>x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>udg<span class="token punctuation">[</span>x <span class="token operator">-</span> y <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span><span class="token punctuation">;</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>x <span class="token operator">-</span> y <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>x <span class="token operator">-</span> y <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span><span class="token comment">//恢复现场</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-BFS"><a href="#1-2-BFS" class="headerlink" title="1.2 BFS"></a>1.2 BFS</h2><p>当所有边的权重都为1时，才可以使用<code>BFS</code>求解最短路径问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储地图</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储最短路径</span>PII q<span class="token punctuation">[</span>N <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义空队列</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//记录开始点坐标</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化最短距离为-1</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//向量表示(-1,0),(0,1),(1,0),(0,-1)</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将队首元素入队</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> t<span class="token punctuation">.</span>first <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> t<span class="token punctuation">.</span>second <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//g数组等于0表示该点是路径上的点,d数组为-1表示未被选过</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span>y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//将该点记录</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> d<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    若需要<strong>输出路径</strong>，则可以在<code>d[x][y] = d[t.first][t.second] + 1;</code>后添加一句代码用于存储当前元素的前一个元素<code>Prev[x][y] = t;</code>【记录路径】，然后在函数返回前输出路径：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">||</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> t <span class="token operator">=</span> Prev<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-图的存储方式与遍历"><a href="#1-3-图的存储方式与遍历" class="headerlink" title="1.3 图的存储方式与遍历"></a>1.3 图的存储方式与遍历</h2><p>树是<strong>无环连通图</strong>，是一种特殊的图。图分为有向图和无向图。</p><ul><li>邻接矩阵</li><li><strong>邻接表</strong>：每个节点开了一个单链表</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220802160521020.png" alt="image-20220802160521020"></p><p>给定一颗树，树中包含 n 个结点（编号 1∼n）和 n−1 条无向边。</p><p>请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。</p><p>重心定义：重心是指树中的一个结点，<strong>如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心</strong>。</p><p><strong>输入格式</strong></p><p>第一行包含整数 n，表示树的结点数。</p><p>接下来 n−1 行，每行包含两个整数 a 和 b，表示点 a 和点 b 之间存在一条边。</p><p><strong>输出格式</strong></p><p>输出一个整数 m，表示将重心删除后，剩余各个连通块中点数的最大值。</p><p><strong>数据范围</strong></p><p>$1≤n≤10^5$</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220802160530398.png" alt="image-20220802160530398"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//h数组存储每个链表的链表头,e数组存储每个节点的编号,ne存储的是每个节点的next指针</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记是否已经被访问</span><span class="token keyword">int</span> ans <span class="token operator">=</span> N<span class="token punctuation">;</span><span class="token comment">//记录答案</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//以u为根的子树中点的数量</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//标记一下,已经被搜过</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//sum记录当前子树的点, res记录当前子树的连通块点数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得子树连通块点的数量</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将s与res取大</span>sum <span class="token operator">+=</span> s<span class="token punctuation">;</span><span class="token comment">//将子树的数量加入点数</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> n <span class="token operator">-</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n - sum为除了以该点为子树的剩余部分</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录结果</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment">//返回子树数量</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无向边,需要添加不同方向的两条边</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从任意节点开始深度优先</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//d数组记录最远距离,q数组记录队列</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//扩展每个点的邻边</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//第一次被访问</span><span class="token punctuation">&#123;</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-有向图的拓扑序列"><a href="#1-4-有向图的拓扑序列" class="headerlink" title="1.4 有向图的拓扑序列"></a>1.4 有向图的拓扑序列</h2><p>若一个由图中所有点构成的序列 A 满足：对于图中的每条边 (x,y)，x 在 A 中都出现在 y 之前，则称 A 是该图的一个拓扑序列。</p><p><strong>有向无环图称为拓扑图。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">queue <span class="token operator">&lt;</span><span class="token operator">-</span> 所有入度为<span class="token number">0</span>的点<span class="token keyword">while</span> queue不为空<span class="token punctuation">&#123;</span>t <span class="token operator">&lt;</span><span class="token operator">-</span> 队头枚举 t 的所有出边 t <span class="token operator">-></span> j删去t <span class="token operator">-></span> j<span class="token punctuation">,</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">:</span>queue <span class="token operator">&lt;</span><span class="token operator">-</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">topsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh <span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span> d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tt <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">topsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、最短路径问题"><a href="#二、最短路径问题" class="headerlink" title="二、最短路径问题"></a>二、最短路径问题</h1><p>[<strong>注意算法的时间复杂度</strong>]</p><p><strong>单源最短路径</strong></p><ul><li>所有边权都是正数<ul><li>朴素<code>Dijkstra</code>算法    $O(n^2)$  边稠密图   <code>m~n^2</code></li><li>堆优化版的<code>Dijkstra</code>算法    $O(mlogn)$   边稀疏图   <code>m~n</code></li></ul></li><li>存在负权边<ul><li><code>Bellman-Ford</code>算法    <code>O(nm)</code></li><li><code>SPFA</code>算法    一般<code>O(m)</code>，最坏<code>O(nm)</code></li></ul></li></ul><p><strong>多源汇最短路径</strong>(起点、终点任选)</p><ul><li><code>Floyd</code>算法   $O(n^3)$</li></ul><h2 id="2-1-朴素Dijkstra算法"><a href="#2-1-朴素Dijkstra算法" class="headerlink" title="2.1 朴素Dijkstra算法"></a>2.1 朴素Dijkstra算法</h2><ol><li><p><code>dist[1]=0</code>，<code>dist[i]=+∞</code>，<code>s</code>为当前已确定最短路径的点</p></li><li><p><code>for i: 0~n</code></p><p><code>t&lt;-</code> 不在<code>s</code>中的、距离最近的点</p><p><code>s&lt;-t</code>，用<code>t</code>更新其他点的距离，<code>dist[x] &gt; dist[t] + w</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//t为-1表示还未选择一个点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//选取还未被选择的且距离最近的点</span><span class="token punctuation">&#125;</span>st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不连通</span><span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-堆优化版的Dijkstra算法"><a href="#2-2-堆优化版的Dijkstra算法" class="headerlink" title="2.2 堆优化版的Dijkstra算法"></a>2.2 堆优化版的Dijkstra算法</h2><p>堆：</p><ul><li>手写堆（n个数）</li><li><strong>优先队列</strong>（m个数）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">>></span> heap<span class="token punctuation">;</span><span class="token comment">//小根堆</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//被更新过，是冗余备份</span>        st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-Bellman-Ford算法"><a href="#2-3-Bellman-Ford算法" class="headerlink" title="2.3 Bellman-Ford算法"></a>2.3 Bellman-Ford算法</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> n次<span class="token keyword">for</span> 所有边a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>wdist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//松弛操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有<strong>三角不等式</strong>：<code>dist[b] &lt;= dist[a] + w</code>。</p><p><code>k</code>次—-&gt;经过不超过<code>k</code>条边的最短路径的距离</p><p><code>n</code>次—-&gt;存在一条最短路径，上面有<code>n</code>条边，则路径上一定存在<strong>负环</strong></p><p>算法时间复杂度 <code>O(nm)</code>，<code>n</code>表示点数，<code>m</code>表示边数。</p><p>注意在模板题中需要对下面的模板稍作修改，加上备份数组，详情见模板题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>       <span class="token comment">// n表示点数，m表示边数</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// dist[x]存储1到x的最短路距离</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span>     <span class="token comment">// 边，a表示出点，b表示入点，w表示边的权重</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edges<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><span class="token keyword">int</span> <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span>                dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edges<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> last<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//用于备份</span><span class="token keyword">void</span> <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化</span>    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将当前的值赋值到last数组中来备份</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> e <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>e<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> last<span class="token punctuation">[</span>e<span class="token punctuation">.</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取最小值</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">bellman_ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//除以2的原因是0x3f3f3f3f也可能经历一些小的改变</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-SPFA算法"><a href="#2-4-SPFA算法" class="headerlink" title="2.4 SPFA算法"></a>2.4 SPFA算法</h2><p>考虑到<code>dist[e.b] = min(dist[e.b], last[e.a] + e.c);</code>一式只有当<code>a</code>变化的时候<code>dist[e.b]</code>才会发生改变，故有：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> queue 不空<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t <span class="token operator">&lt;</span><span class="token operator">-</span> q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>更新t的所有出边<span class="token operator">:</span> t <span class="token operator">-</span>w<span class="token operator">-></span> b<span class="token punctuation">;</span><span class="token comment">//待更新的点的集合</span>queue <span class="token operator">&lt;</span><span class="token operator">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-1-SPFA算法求最短路径"><a href="#2-4-1-SPFA算法求最短路径" class="headerlink" title="2.4.1 SPFA算法求最短路径"></a>2.4.1 SPFA算法求最短路径</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将队首元素取出</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//设为false代表已经出队</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果不在队列里,将其入队</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-2-SPFA算法判断负环"><a href="#2-4-2-SPFA算法判断负环" class="headerlink" title="2.4.2 SPFA算法判断负环"></a>2.4.2 SPFA算法判断负环</h3><p>​    有：<code>dist[x] = dist[t] + w[i]; cnt[x] = cnt[t] + 1</code>，若有<code>cnt[x] &gt;= n</code>，则在这个路径上有<code>n+1</code>个点，由<strong>抽屉原理</strong>可知，存在有两个相同的点，该路径存在负环。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-Floyd算法"><a href="#2-5-Floyd算法" class="headerlink" title="2.5 Floyd算法"></a>2.5 Floyd算法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">210</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> Q<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>Q <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> d<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> INF <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.数据结构</title>
      <link href="/2022/08/13/suan-fa-02-shu-ju-jie-gou/"/>
      <url>/2022/08/13/suan-fa-02-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h1><p>这里讲解的是用<strong>数组</strong>模拟链表的实现。</p><h2 id="1-1-单链表"><a href="#1-1-单链表" class="headerlink" title="1.1 单链表"></a>1.1 单链表</h2><p>应用：使用邻接表来存储(树和图)。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220723223002534.png" alt="image-20220723223002534"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// head存储链表头,e[]存储节点的值,ne[]存储节点的next指针,idx表示当前用到了哪个节点</span><span class="token keyword">int</span> head<span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在链表头插入一个数x</span><span class="token keyword">void</span> <span class="token function">insert_head</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">,</span> head <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当前idx已经被使用,自增</span><span class="token punctuation">&#125;</span><span class="token comment">//在k后插入一个数x</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将头结点删除,需要保证头结点存在</span><span class="token keyword">void</span> <span class="token function">remove_head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    head <span class="token operator">=</span> ne<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将下标是k的点后面的点删掉</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-双链表"><a href="#1-2-双链表" class="headerlink" title="1.2 双链表"></a>1.2 双链表</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// e[]表示节点的值,l[]表示节点的左指针,r[]表示节点的右指针,idx表示当前用到了哪个节点</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//0是左端点,1是右端点(边界)</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在节点a的右边插入一个数x(若为左边,则调用add(l[a],x)即可)</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">,</span> r<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">,</span> r<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除节点a</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span>l<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、栈和队列"><a href="#二、栈和队列" class="headerlink" title="二、栈和队列"></a>二、栈和队列</h1><p>栈：后进先出；队列：先进先出</p><h2 id="2-1-栈"><a href="#2-1-栈" class="headerlink" title="2.1 栈"></a>2.1 栈</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// tt表示栈顶</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 向栈顶插入一个数</span>stk<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">// 从栈顶弹出一个数</span>tt <span class="token operator">--</span> <span class="token punctuation">;</span><span class="token comment">// 栈顶的值</span>stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 判断栈是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//not empty</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-队列"><a href="#2-2-队列" class="headerlink" title="2.2 队列"></a>2.2 队列</h2><h3 id="2-2-1-普通队列"><a href="#2-2-1-普通队列" class="headerlink" title="2.2.1 普通队列"></a>2.2.1 普通队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// hh 表示队头，tt表示队尾</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 向队尾插入一个数</span>q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">// 从队头弹出一个数</span>hh <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token comment">// 队头的值</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 判断队列是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//not empty</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-循环队列"><a href="#2-2-2-循环队列" class="headerlink" title="2.2.2 循环队列"></a>2.2.2 循环队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// hh 表示队头，tt表示队尾的后一个位置</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 向队尾插入一个数</span>q<span class="token punctuation">[</span>tt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tt <span class="token operator">==</span> N<span class="token punctuation">)</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 从队头弹出一个数</span>hh <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">==</span> N<span class="token punctuation">)</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 队头的值</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 判断队列是否为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">!=</span> tt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-单调栈"><a href="#2-3-单调栈" class="headerlink" title="2.3 单调栈"></a>2.3 单调栈</h2><p>常见模型：找出每个数左边离它最近的比它大&#x2F;小的数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tt <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> tt <span class="token operator">--</span> <span class="token punctuation">;</span>    stk<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//若当前栈顶比x大时,其不会再被用到,直接删去</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tt <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span>tt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">//若栈为空,则输出-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tt<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stk<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//将x置入栈顶</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[分析]每个元素只会有一次进栈和出栈操作，算法时间复杂度为<code>O(n)</code>。</p><h2 id="2-4-单调队列"><a href="#2-4-单调队列" class="headerlink" title="2.4 单调队列"></a>2.4 单调队列</h2><p>常见模型：找出<strong>滑动窗口</strong>中的最大值&#x2F;最小值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> <span class="token function">check_out</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> hh <span class="token operator">++</span> <span class="token punctuation">;</span>  <span class="token comment">// 判断队头是否滑出窗口</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> tt <span class="token operator">--</span> <span class="token punctuation">;</span>    q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>朴素算法—<strong>栈&#x2F;队列哪些元素是无用的，删去后是否具有单调性</strong>—&gt;优化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> hh <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tt <span class="token operator">--</span> <span class="token punctuation">;</span>        q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> hh <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tt <span class="token operator">--</span> <span class="token punctuation">;</span>        q<span class="token punctuation">[</span> <span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、KMP算法"><a href="#三、KMP算法" class="headerlink" title="三、KMP算法"></a>三、KMP算法</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span><span class="token comment">// s[]是长文本,p[]是模式串,n是s的长度,m是p的长度</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> m <span class="token operator">>></span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">++</span> <span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Trie树"><a href="#四、Trie树" class="headerlink" title="四、Trie树"></a>四、Trie树</h1><p>用于高效地<strong>存储和查找字符串集合</strong>的数据结构。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220724161401751.png" alt="image-20220724161401751"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> son<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token comment">// 0号点既是根节点，又是空节点</span><span class="token comment">// son[][]存储树中每个节点的子节点</span><span class="token comment">// cnt[]存储以每个节点结尾的单词数量</span><span class="token comment">// 插入一个字符串</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span> idx<span class="token punctuation">;</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询字符串出现的次数</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如何理解单(双)链表，<code>Trie</code>树和堆中的<code>idx</code>：</p><p><a href="https://www.acwing.com/solution/content/5673/">https://www.acwing.com/solution/content/5673/</a></p></blockquote><h1 id="五、并查集"><a href="#五、并查集" class="headerlink" title="五、并查集"></a>五、并查集</h1><p><strong>操作</strong>：</p><ul><li>将两个集合合并</li><li>询问两个元素是否在一个集合之中</li></ul><p>并查集在近乎<code>O(1)</code>时间内快速支持两个操作。</p><p><strong>基本原理</strong>：每个集合用一棵树来表示，树根的编号就是整个集合的编号。每个节点存储它的父节点，<code>p[x]</code>表示<code>x</code>的父节点。</p><ul><li>判断树根的方法：<code>if(p[x] == x)</code></li><li>求<code>x</code>的集合编号的方法：<code>while(p[x] != x) x = p[x];</code></li><li>合并两个集合的方法：<code>p[x]</code>是<code>x</code>的集合编号，<code>p[y]</code>是<code>y</code>的集合编号，<code>p[x] = y</code></li></ul><p><strong>优化(路径压缩)<strong>：找到某节点后，将路径中所有节点的前驱都</strong>指向根节点</strong></p><h2 id="5-1-朴素并查集"><a href="#5-1-朴素并查集" class="headerlink" title="5.1 朴素并查集"></a>5.1 朴素并查集</h2><ul><li><strong><code>find()</code>函数</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储每个点的祖宗节点</span><span class="token comment">// 返回x的祖宗节点 + 路径压缩</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化，假定节点编号是1~n</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 合并a和b所在的两个集合：</span>p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当需要读取一个字母时,使用字符串进行读取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>op <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-维护size的并查集"><a href="#5-2-维护size的并查集" class="headerlink" title="5.2 维护size的并查集"></a>5.2 维护size的并查集</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><span class="token comment">// 返回x的祖宗节点</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化，假定节点编号是1~n</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 合并a和b所在的两个集合：</span>size<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string op<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">"Q1"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cin <span class="token operator">>></span> a<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、堆"><a href="#六、堆" class="headerlink" title="六、堆"></a>六、堆</h1><p>这里讲述的是手写堆。堆是一个完全二叉树。以小根堆为例，堆使用数组存储，根节点在第一号单元，<code>x</code>的左儿子是<code>2x</code>，右儿子是<code>2x+1</code>；<code>down(x)</code>往下调整，<code>up(x)</code>往上调整。</p><p>堆需要完成以下操作：（下标从<code>1</code>开始）</p><ul><li><p><strong>插入一个数</strong>：<code>heap[++size] = x; up(size);</code></p></li><li><p><strong>求集合中的最小值</strong>：<code>heap[1]</code></p></li><li><p><strong>删除最小值</strong>：<code>heap[1] = heap[size]; size--; down(1);</code></p></li><li><p><strong>删除任意一个元素</strong>：<code>heap[k] = heap[size]; size--; down(k); up(k);</code></p></li><li><p><strong>修改任意一个元素</strong>：<code>heap[k] = x; down(k); up(k);</code></p></li></ul><h2 id="6-1-堆排序"><a href="#6-1-堆排序" class="headerlink" title="6.1 堆排序"></a>6.1 堆排序</h2><ul><li>熟练掌握<code>down()</code>、<code>up()</code>函数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token comment">//t为点、左孩子、右孩子三个点中最小的一个点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> size <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> size <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> t<span class="token punctuation">)</span><span class="token comment">//根节点不是最小的</span><span class="token punctuation">&#123;</span><span class="token comment">//与最小的点交换</span><span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归处理</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//u /= 2换上去</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O(n)的时间复杂度建堆</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>cnt<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-带映射关系的堆排序"><a href="#6-2-带映射关系的堆排序" class="headerlink" title="6.2 带映射关系的堆排序"></a>6.2 带映射关系的堆排序</h2><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220724232309449.png" alt="image-20220724232309449"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//ph[j]存储第j个插入的数的下标,hp[k]存储堆内下标为k的点的插入顺序</span><span class="token comment">//ph[j] = k, hp[k] = jp 下标(pointer), h 堆(heap)</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> cnt <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> u <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> t<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">heap_swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> u <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token comment">//堆的元素加1</span>            m <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token comment">//第m个插入的数</span>            ph<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">,</span> hp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            h<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"DM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">heap_swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt <span class="token operator">--</span> <span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//删除第k个插入的位置</span>        <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">heap_swap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt <span class="token operator">--</span> <span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span><span class="token comment">//将第k个插入的数修改</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> ph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、哈希表"><a href="#七、哈希表" class="headerlink" title="七、哈希表"></a>七、哈希表</h1><ul><li><strong>存储结构</strong><ul><li>开放寻址法</li><li>拉链法</li></ul></li><li><strong>字符串哈希方式</strong></li></ul><p>时间复杂度为<code>O(1)</code>。</p><h2 id="7-1-一般哈希"><a href="#7-1-一般哈希" class="headerlink" title="7.1 一般哈希"></a>7.1 一般哈希</h2><p>（1）拉链法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token comment">// 向哈希表中插入一个数</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在哈希表中查询某个数是否存在</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>通过<code>memset(h,-1,sizeof h)</code>对<code>h[]</code>数组进行初始化，<code>memset</code>函数按字节来进行初始化，在<code>cpp</code>中每个字节赋<code>-1</code>即每一位都是<code>1</code>，整体结果即为<code>-1</code>。</p></blockquote><p>（2）&#x3D;&#x3D;<strong>开放寻址法</strong>&#x3D;&#x3D;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token comment">//有人且不是x</span><span class="token punctuation">&#123;</span>t <span class="token operator">++</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> N<span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//已经到底,循环到第一个坑位</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p><code>null</code>可以设为<code>null = 0x3f3f3f3f</code>。</p></blockquote><h2 id="7-2-字符串哈希"><a href="#7-2-字符串哈希" class="headerlink" title="7.2 字符串哈希"></a>7.2 字符串哈希</h2><p><strong>求前缀的哈希值</strong>。</p><ul><li><strong>核心思想</strong>：将字符串看成<code>P</code>进制数，<code>P</code>的经验值是<code>131</code>或<code>13331</code>，取这两个值的冲突概率低；然后将其转化为十进制，即$x_{n}*p^{n}+x_{n-1}*p^{n-1}+…+x_{0}*p^{0}$，再<code>mod Q</code>，即可将任何一个字符串映射到<code>0-Q-1</code>之间的数。</li><li><strong>小技巧</strong>：取模的数用$2^{64}$，这样直接用<code>unsigned long long</code>存储，溢出的结果就是取模的结果。</li><li><strong>运用场景</strong>：[例]判断两个字符串是否相等</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> P <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span>ULL h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><span class="token comment">// 初始化</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算子串 str[l ~ r] 的哈希值</span>ULL <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、C-STL"><a href="#八、C-STL" class="headerlink" title="八、C++ STL"></a>八、C++ STL</h1><h2 id="8-1-vector"><a href="#8-1-vector" class="headerlink" title="8.1 vector"></a>8.1 vector</h2><p>变长数组：倍增的思想</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回元素个数<span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回是否为空<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  清空<span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历的三种形式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//2</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//3</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> a<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持比较运算，按字典序：</p><p><code>vector&lt;int&gt; a(4,3),b(3,4)//a初始化4个3</code>，则有<code>a&lt;b</code>。</p><h2 id="8-2-pair-lt-int-int-gt"><a href="#8-2-pair-lt-int-int-gt" class="headerlink" title="8.2 pair&lt;int, int&gt;"></a>8.2 pair&lt;int, int&gt;</h2><ul><li><code>first</code>, 第一个元素</li><li><code>second</code>, 第二个元素</li></ul><p><strong>支持比较运算</strong>，以<code>first</code>为<strong>第一关键字</strong>，以<code>second</code>为第二关键字（字典序）。</p><p><code>pair</code>相当于<strong>两个变量的结构体+比较函数</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"yxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"abc"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//存储三种属性</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-string"><a href="#8-3-string" class="headerlink" title="8.3 string"></a>8.3 string</h2><p>字符串<code>string a = &quot;yxc&quot;; a += &quot;def&quot;;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回字符串长度<span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">substr</span><span class="token punctuation">(</span>起始下标<span class="token punctuation">,</span><span class="token punctuation">(</span>子串长度<span class="token punctuation">)</span><span class="token punctuation">)</span>  返回子串<span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回字符串所在字符数组的起始地址<span class="token comment">//printf("%s\n",a.c_str());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-队列"><a href="#8-4-队列" class="headerlink" title="8.4 队列"></a>8.4 队列</h2><h3 id="8-4-1-queue"><a href="#8-4-1-queue" class="headerlink" title="8.4.1 queue"></a>8.4.1 queue</h3><p>队列：<code>queue&lt;int&gt; q;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  向队尾插入一个元素<span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回队头元素<span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回队尾元素<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   弹出队头元素q <span class="token operator">=</span> <span class="token generic-function"><span class="token function">queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空队列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-2-priority-queue"><a href="#8-4-2-priority-queue" class="headerlink" title="8.4.2 priority_queue"></a>8.4.2 priority_queue</h3><p> <strong>优先队列</strong>，默认是<strong>大根堆</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> heap<span class="token punctuation">;</span>    <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入一个元素    <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   返回堆顶元素    <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   弹出堆顶元素定义成小根堆的方式：priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-3-deque"><a href="#8-4-3-deque" class="headerlink" title="8.4.3 deque"></a>8.4.3 deque</h3><p><strong>双端队列</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//从队首弹出一元素</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//支持随机访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-5-stack"><a href="#8-5-stack" class="headerlink" title="8.5 stack"></a>8.5 stack</h2><p>栈<code>stack</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  向栈顶插入一个元素<span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   返回栈顶元素<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   弹出栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-6-set和map"><a href="#8-6-set和map" class="headerlink" title="8.6 set和map"></a>8.6 set和map</h2><h3 id="8-6-1-set-map-multiset-multimap"><a href="#8-6-1-set-map-multiset-multimap" class="headerlink" title="8.6.1 set, map, multiset, multimap"></a>8.6.1 set, map, multiset, multimap</h3><p>基于平衡二叉树（红黑树），动态维护有序序列。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">--</span> 返回前驱和后继 时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>set<span class="token operator">/</span><span class="token function">multiset</span><span class="token punctuation">(</span>set不能有重复元素<span class="token punctuation">,</span>multiset可以<span class="token punctuation">)</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入一个数    <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  查找一个数<span class="token punctuation">,</span>不存在则返回end迭代器    <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回某一个数的个数    <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 输入是一个数x，删除所有x   <span class="token function">O</span><span class="token punctuation">(</span>k <span class="token operator">+</span> logn<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 输入一个迭代器，删除这个迭代器    <span class="token comment">//离散数学中的最小上界</span>    <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">lower_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  返回大于等于x的最小的数的迭代器       <span class="token function">upper_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  返回大于x的最小的数的迭代器map<span class="token operator">/</span>multimap    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入的数是一个pair    <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  输入的参数是pair或者迭代器    <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>  注意multimap不支持此操作。 时间复杂度是 <span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>    <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Example<span class="token operator">:</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token string">"yxc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token string">"yxc"</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//可和数组一样来取数据,但时间复杂度比数组高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-2-unordered-set-unordered-map-unordered-multiset-unordered-multimap"><a href="#8-6-2-unordered-set-unordered-map-unordered-multiset-unordered-multimap" class="headerlink" title="8.6.2 unordered_set, unordered_map, unordered_multiset, unordered_multimap"></a>8.6.2 unordered_set, unordered_map, unordered_multiset, unordered_multimap</h3><p>基于哈希表。</p><ul><li>和上面类似，增删改查的时间复杂度是 <code>O(1)</code></li><li>不支持基于排序的操作：<code>lower_bound()/upper_bound()</code>， 迭代器的++，–</li></ul><h2 id="8-7-bitset"><a href="#8-7-bitset" class="headerlink" title="8.7 bitset"></a>8.7 bitset</h2><p><strong>压位</strong>，每个字节中存八位</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bitset<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//&lt;>中写明个数</span><span class="token comment">//支持位运算操作</span><span class="token operator">~</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token punctuation">,</span> <span class="token operator">^</span><span class="token operator">>></span> <span class="token punctuation">,</span> <span class="token operator">&lt;&lt;</span><span class="token operator">==</span><span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token comment">//支持随机访问</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    返回有多少个<span class="token number">1</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      判断是否至少有一个<span class="token number">1</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     判断是否全为<span class="token number">0</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     把所有位置成<span class="token number">1</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>  将第k位变成v<span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    把所有位变成<span class="token number">0</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     等价于<span class="token operator">~</span><span class="token function">flip</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    把第k位取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.JavaWeb前置知识</title>
      <link href="/2022/08/13/java01-qian-zhi/"/>
      <url>/2022/08/13/java01-qian-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-利用断言来进行测试"><a href="#1-利用断言来进行测试" class="headerlink" title="1 利用断言来进行测试"></a>1 利用断言来进行测试</h1><ol><li>定义一个测试类(测试用例)</li></ol><ul><li>建议：<ul><li>测试类名：被测试的类名Test        CalculatorTest</li><li>包名：xxx.xxx.xx.test        cn.itcast.test</li></ul></li></ul><ol><li>定义测试方法：可以独立运行</li></ol><ul><li><p>建议：</p><ul><li><p>方法名：test测试的方法名        testAdd()  </p></li><li><p>返回值：void</p></li><li><p>参数列表：空参</p></li></ul></li></ul><ol><li>给方法加@Test</li><li>导入<strong>junit</strong>依赖环境</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">No1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建计算器对象</span>        <span class="token class-name">Calculator</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.调用add方法</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.断言</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Before：修饰的方法会在测试方法之前被自动执行</li><li>@After：修饰的方法会在测试方法执行之后自动被执行</li></ul><h1 id="2-反射"><a href="#2-反射" class="headerlink" title="2 反射"></a>2 反射</h1><ul><li>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li>好处：<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li></ul></li><li><p>获取Class对象的方式：</p><ol><li><strong>Class.forName(“全类名”)</strong>：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><strong>类名.class</strong>：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li><strong>对象.getClass()</strong>：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><ul><li>结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.JavaScript</title>
      <link href="/2022/08/13/java02-javascript/"/>
      <url>/2022/08/13/java02-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1 JavaScript简介"></a>1 JavaScript简介</h1><ul><li>JavaScript是一门客户端脚本语言<ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul></li><li>功能：可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li><li><p>JavaScript发展史：</p><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C—    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ol></li><li><p>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</p></li></ul><h1 id="2-ECMAScript基础语法"><a href="#2-ECMAScript基础语法" class="headerlink" title="2 ECMAScript基础语法"></a>2 ECMAScript基础语法</h1><p>ECMAScript：客户端脚本语言的标准</p><h2 id="2-1-与html结合方式"><a href="#2-1-与html结合方式" class="headerlink" title="2.1 与html结合方式"></a>2.1 与html结合方式</h2><ol><li>内部JS：<ul><li>定义<script>，标签体内容就是js代码</li></ul></li><li>外部JS：<ul><li>定义<script>，通过src属性引入外部的js文件</li></ul></li></ol><ul><li>注意：<ol><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</li><li><code>&lt;script&gt;</code>可以定义多个。</li></ol></li></ul><h2 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h2><ol><li>单行注释：//注释内容</li><li>多行注释：/<em>注释内容</em>/</li></ol><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3 数据类型"></a>2.3 数据类型</h2><ol><li><p>原始数据类型(基本数据类型)：</p><ol><li>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li>string：字符串。 字符串  “abc” “a” ‘abc’</li><li>boolean: true和false</li><li>null：一个对象为空的占位符</li><li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li><li><p>引用数据类型：对象</p></li></ol><h2 id="2-4-变量"><a href="#2-4-变量" class="headerlink" title="2.4 变量"></a>2.4 变量</h2><ul><li>变量：一小块存储数据的内存空间</li><li>Java语言是强类型语言，而JavaScript是弱类型语言。<ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul></li><li><p>语法：</p><ul><li>var 变量名 = 初始化值;</li></ul></li><li><p>typeof运算符：获取变量的类型。</p><ul><li>注：null运算后得到的是object</li></ul></li></ul><h2 id="2-5-运算符"><a href="#2-5-运算符" class="headerlink" title="2.5 运算符"></a>2.5 运算符</h2><ol><li><p>一元运算符：只有一个运算数的运算符<br> ++，— ， +(正号)  </p><ul><li>++ —: 自增(自减)<ul><li>++(—) 在前，先自增(自减)，再运算</li><li>++(—) 在后，先运算，再自增(自减)</li></ul></li><li>+(-)：正负号</li><li>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换<pre><code>  * 其他类型转number：      * string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）      * boolean转number：true转为1，false转为0</code></pre></li></ul></li><li><p>算数运算符</p><p><code>+ - * / %</code> …</p></li><li><p>赋值运算符</p><p><code>= += -+</code>…</p></li><li><p>比较运算符</p><blockquote><p>&lt; &gt;= &lt;= == ===(全等于)</p><ul><li>比较方式<pre><code>1. 类型相同：直接比较    * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。2. 类型不同：先进行类型转换，再比较    * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</code></pre></li></ul></blockquote></li><li><p>逻辑运算符</p><pre><code>  &amp;&amp; || !</code></pre><ul><li>其他类型转boolean：<pre><code>     1. number：0或NaN为假，其他为真     2. string：除了空字符串(&quot;&quot;)，其他都是true     3. null&amp;undefined:都是false            对象：所有对象都为true</code></pre></li></ul></li><li><p>三元运算符</p><p>   ​    ? : 表达式<br>   ​            var a = 3;<br>   ​            var b = 4;<br>   ​    var c = a &gt; b ? 1:0;</p><p>   语法：</p><p>   表达式? 值1:值2;</p><p>   判断表达式的值，如果是true则取值1，如果是false则取值2；</p></li></ol><h2 id="2-6-流程控制语句"><a href="#2-6-流程控制语句" class="headerlink" title="2.6 流程控制语句"></a>2.6 流程控制语句</h2><ol><li><p>if…else…</p></li><li><p>switch:</p><pre><code>在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)在JS中,switch语句可以接受任意的原始数据类型</code></pre></li><li><p>while</p></li><li><p>do…while</p></li><li><p>for</p></li></ol><h2 id="2-7-JS特殊语法"><a href="#2-7-JS特殊语法" class="headerlink" title="2.7 JS特殊语法"></a>2.7 JS特殊语法</h2><ol><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ol><h2 id="2-8-练习：99乘法表"><a href="#2-8-练习：99乘法表" class="headerlink" title="2.8 练习：99乘法表"></a>2.8 练习：99乘法表</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>九九乘法表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">td</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;table align='center'>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.完成基本的for循环嵌套</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;tr>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.完成表格嵌套</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-基本对象"><a href="#3-基本对象" class="headerlink" title="3 基本对象"></a>3 基本对象</h1><h2 id="3-1-Function：函数-方法-对象"><a href="#3-1-Function：函数-方法-对象" class="headerlink" title="3.1 Function：函数(方法)对象"></a>3.1 Function：函数(方法)对象</h2><p><strong>创建</strong></p><ul><li>var fun = new Function(形式参数列表,方法体);</li><li>function 方法名称(形式参数列表){<pre><code>        //方法体</code></pre>}</li><li>var 方法名 = function(形式参数列表){<pre><code>         //方法体</code></pre>}</li></ul><p><strong>属性</strong></p><p>length：代表形参的个数。</p><p><strong>特点</strong></p><ol><li>方法定义时，形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol><p><strong>调用</strong></p><p>方法名称(实际参数列表);</p><h2 id="3-2-Array：数组对象"><a href="#3-2-Array：数组对象" class="headerlink" title="3.2 Array：数组对象"></a>3.2 Array：数组对象</h2><p><strong>创建</strong></p><ul><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ul><p><strong>方法</strong></p><ul><li>join(参数)：将数组中的元素<strong>按照指定的分隔符</strong>拼接为字符串</li><li>push()：向数组的末尾添加一个或更多元素，并返回新的长度。</li></ul><p><strong>属性</strong></p><p>length：数组的长度</p><p><strong>特点</strong></p><ol><li>JS中，<strong>数组元素的类型可变的</strong>。</li><li>JS中，<strong>数组长度可变的</strong>，与Java中的集合类似。</li></ol><h2 id="3-3-Date：日期对象"><a href="#3-3-Date：日期对象" class="headerlink" title="3.3 Date：日期对象"></a>3.3 Date：日期对象</h2><p><strong>创建</strong></p><p>var date = new Date();</p><p><strong>方法</strong></p><ul><li><strong>toLocaleString()</strong>：返回当前date对象对应的时间<strong>本地字符串格式</strong>（中国）</li><li>getTime()：获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul><h2 id="3-4-Math：数学对象"><a href="#3-4-Math：数学对象" class="headerlink" title="3.4 Math：数学对象"></a>3.4 Math：数学对象</h2><p><strong>创建</strong></p><p>Math对象不用创建，直接使用：Math.方法名();</p><p><strong>方法</strong></p><ul><li>random():返回 0 ~ 1 之间的随机数。 含0不含1</li><li>ceil(x)：对数进行上舍入。</li><li>floor(x)：对数进行下舍入。</li><li>round(x)：把数四舍五入为最接近的整数。</li></ul><h2 id="3-5-RegExp：正则表达式对象"><a href="#3-5-RegExp：正则表达式对象" class="headerlink" title="3.5 RegExp：正则表达式对象"></a>3.5 RegExp：正则表达式对象</h2><h3 id="3-5-1-正则表达式"><a href="#3-5-1-正则表达式" class="headerlink" title="3.5.1 正则表达式"></a>3.5.1 正则表达式</h3><p>定义字符串的组成规则。</p><p><strong>单个字符</strong>：</p><ul><li><p>[]</p><p>如：<code>[a],[ab],[a-zA-Z0-9_]</code></p></li><li><p>特殊符号代表特殊含义的单个字符：</p><ul><li><p><code>\d</code>：单个数字字符<code>[0-9]</code></p></li><li><p><code>\w</code>：单个单词字符<code>[a-zA-Z0-9_]</code></p></li></ul></li></ul><p><strong>量词符号</strong>：</p><ul><li><p>?：表示出现0次或1次</p></li><li><p>*：表示出现0次或多次</p></li><li><p>+：出现1次或多次</p></li><li><p>{m,n}：表示【 <strong>m&lt;= 数量 &lt;= n</strong>】</p><ul><li><p>m如果缺省：{,n}:最多n次</p></li><li><p>n如果缺省：{m,} 最少m次</p></li></ul></li></ul><p><strong>开始结束符号</strong>：</p><ul><li>^：开始</li><li>$：结束</li></ul><h3 id="3-5-2-正则对象"><a href="#3-5-2-正则对象" class="headerlink" title="3.5.2 正则对象"></a>3.5.2 正则对象</h3><p><strong>创建</strong></p><ul><li><p>var reg = new RegExp(“正则表达式”);</p><blockquote><p>注：使用该方法时<code>\w</code>需用<code>\\w</code>（使之取消转义含义）</p></blockquote></li><li><p><strong>var reg = /正则表达式/;</strong></p></li></ul><p><strong>方法</strong></p><p><strong>test(参数)</strong>：验证指定的字符串是否符合正则定义的规范，返回<code>true</code>或<code>false</code>。表单校验需要依赖正则表达式。</p><p><code>var flag = reg2.test(username);</code></p><h2 id="3-6-Global：全局对象"><a href="#3-6-Global：全局对象" class="headerlink" title="3.6 Global：全局对象"></a>3.6 Global：全局对象</h2><p><strong>特点</strong></p><p><code>Global</code>中封装的方法不需要对象就可以直接调用。    方法名();</p><p><strong>方法</strong></p><ul><li><p>encodeURI()：<strong>url编码</strong></p><blockquote><p>注：一个是i的大写，一个是L的小写。</p></blockquote></li><li><p>decodeURI()：url解码</p></li><li><p>encodeURIComponent()：url编码,编码的字符更多[<code>:</code>，<code>/</code>等]</p></li><li><p>decodeURIComponent()：url解码</p></li><li><p>parseInt()：将字符串转为数字。逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</p></li><li><p>isNaN()：判断一个值是否是NaN。NaN六亲不认，连自己都不认，NaN参与的<code>==</code>比较全部问false</p></li><li><p>eval()：将 JavaScript 字符串，并把它作为<strong>脚本代码</strong>来执行。</p></li></ul><p>【知识点】<strong>URL编码</strong>：传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2，使用<code>UTF-8</code>编码，一个汉字字符占<code>3</code>个字节。</p><h1 id="4-DOM基础与事件"><a href="#4-DOM基础与事件" class="headerlink" title="4 DOM基础与事件"></a>4 DOM基础与事件</h1><h2 id="4-1-DOM简介"><a href="#4-1-DOM简介" class="headerlink" title="4.1 DOM简介"></a>4.1 DOM简介</h2><p><strong>文档对象模型</strong>（Document Object Model，简称DOM）：</p><p>功能：控制<code>html</code>文档的内容。</p><p>代码：获取页面标签(元素)对象：Element</p><p>​            <strong>document.getElementById(“id值”)</strong>：通过元素的id获取元素对象</p><p><strong>操作Element对象</strong>：</p><ol><li><p><strong>修改属性值</strong>：</p><ul><li>明确获取的对象是哪一个？</li><li>查看API文档，找其中有哪些属性可以设置</li></ul></li><li><p><strong>修改标签体内容</strong>：属性：<strong>innerHTML</strong></p></li></ol><ul><li><p>获取元素对象</p></li><li><p>使用innerHTML属性修改标签体内容</p></li></ul><h2 id="4-2-事件"><a href="#4-2-事件" class="headerlink" title="4.2 事件"></a>4.2 事件</h2><p><strong>功能</strong>： 某些组件被执行了某些操作后，触发某些代码的执行。</p><p><strong>绑定事件的方法</strong>：</p><ol><li>直接在<code>html</code>标签上，指定事件的属性(操作)，属性值就是<code>js</code>代码<ul><li>事件：<code>onclick</code>—- 单击事件</li></ul></li><li><strong>通过<code>js</code>获取元素对象，指定事件属性，设置一个函数</strong>[耦合度低]</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>light2<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我又被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'咋老点我？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//1.获取light2对象</span>        <span class="token keyword">var</span> light2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.绑定事件</span>        light2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun2<span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-常见的事件"><a href="#4-3-常见的事件" class="headerlink" title="4.3 常见的事件"></a>4.3 常见的事件</h2><ol><li><p><strong>点击事件</strong>：</p><ul><li>onclick：单击事件</li></ul></li></ol><pre><code> - ondblclick：双击事件</code></pre><ol><li><strong>焦点事件</strong>：<ul><li>onblur：失去焦点</li><li>onfocus:元素获得焦点</li></ul></li><li><strong>加载事件</strong>：<ul><li>onload：一张页面或一幅图像完成加载。</li></ul></li></ol><ol><li><p><strong>鼠标事件</strong>：</p><ul><li>onmousedown    鼠标按钮被按下<ul><li>定义方法时，定义一个形参，接受<code>event</code>对象；</li><li><code>event</code>对象的<code>button</code>属性可以获取鼠标按钮键被点击了。</li></ul></li></ul></li></ol><pre><code> - onmouseup         鼠标按键被松开 - onmousemove    鼠标被移动 - onmouseover      鼠标移到某元素之上 - onmouseout        鼠标从某元素移开</code></pre><ol><li><p><strong>键盘事件</strong>：</p><ul><li>onkeydown    某个键盘按键被按下。    </li><li>onkeyup         某个键盘按键被松开。</li><li>onkeypress    某个键盘按键被按下并松开。</li></ul></li><li><p><strong>选择和改变</strong>：</p><ul><li><p>onchange      域的内容被改变。</p></li><li><p>onselect         文本被选中。</p></li></ul></li></ol><ol><li><p><strong>表单事件</strong>：</p><ul><li><strong>onsubmit       确认按钮被点击。</strong>【用于表单校验】</li></ul></li></ol>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//校验用户名格式是否正确</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//...</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code> - onreset           重置按钮被点击。</code></pre>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">//2.加载完成事件 onload</span>      window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//1.失去焦点事件</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"失去焦点了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//3.绑定鼠标事件</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"鼠标来了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-案例：电灯开关"><a href="#4-4-案例：电灯开关" class="headerlink" title="4.4 案例：电灯开关"></a>4.4 案例：电灯开关</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>电灯开关<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/off.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token comment">/*        分析：            1.获取图片对象            2.绑定单击事件            3.每次点击切换图片                * 规则：                    * 如果灯是开的 on,切换图片为 off                    * 如果灯是关的 off,切换图片为 on                * 使用标记flag来完成     */</span>            <span class="token comment">//1.获取图片对象</span>            <span class="token keyword">var</span> light <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//代表灯是灭的。 off图片</span>            <span class="token comment">//2.绑定单击事件</span>            light<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断如果灯是开的，则灭掉</span>                    light<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/off.gif"</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//如果灯是灭的，则打开</span>                    light<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-BOM"><a href="#5-BOM" class="headerlink" title="5 BOM"></a>5 BOM</h1><h2 id="5-1-BOM的概念与组成"><a href="#5-1-BOM的概念与组成" class="headerlink" title="5.1 BOM的概念与组成"></a>5.1 BOM的概念与组成</h2><p>概念：Browser Object Model <strong>浏览器对象模型</strong>，将浏览器的各个组成部分封装成对象。</p><p>组成：</p><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h2 id="5-2-Window：窗口对象"><a href="#5-2-Window：窗口对象" class="headerlink" title="5.2 Window：窗口对象"></a>5.2 Window：窗口对象</h2><h3 id="5-2-1-特点"><a href="#5-2-1-特点" class="headerlink" title="5.2.1 特点"></a>5.2.1 特点</h3><ul><li>Window对象不需要创建可以直接使用 window使用。 window.方法名();</li><li>window引用可以省略。  方法名();</li></ul><h3 id="5-2-2-方法"><a href="#5-2-2-方法" class="headerlink" title="5.2.2 方法"></a>5.2.2 方法</h3><p>1.与<strong>弹出框</strong>有关的方法：</p><ul><li><p>alert()    显示带有一段消息和一个确认按钮的警告框。</p></li><li><p><strong>confirm()</strong>    显示带有一段消息以及确认按钮和取消按钮的对话框。[<strong>防止误操作</strong>]</p><ul><li>如果用户点击确定按钮，则方法返回<code>true</code></li><li>如果用户点击取消按钮，则方法返回<code>false</code></li></ul></li><li><p>prompt()    显示可提示用户输入的对话框。</p><p> 返回值：获取用户输入的值</p></li></ul><p>2.与<strong>打开关闭</strong>有关的方法：</p><ul><li><p>open()    打开一个新的浏览器窗口    <strong>返回新的Window对象</strong>[里面可以加入网址]</p></li><li><p>close()    关闭浏览器窗口                    谁调用我 ，我关谁</p></li></ul><p>3.与<strong>定时器</strong>有关的方式：</p><ul><li><p>setTimeout()    在指定的毫秒数后调用函数或计算表达式。</p><p>参数：</p><ul><li>js代码或者方法对象</li><li>毫秒值</li></ul><p>返回值：唯一标识，用于取消定时器</p></li><li><p>clearTimeout()    取消由 setTimeout() 方法设置的 timeout，参数可以是 setTimeout() 的返回值[唯一标识]。</p></li><li><p><strong>setInterval()</strong>       <strong>循环定时器</strong>，按照指定的周期（以毫秒计）来调用函数或计算表达式。</p></li><li><p>clearInterval()      取消由 setInterval() 设置的 timeout。</p></li></ul><h3 id="5-2-3-属性"><a href="#5-2-3-属性" class="headerlink" title="5.2.3 属性"></a>5.2.3 属性</h3><ol><li><p>获取其他BOM对象：</p><ul><li>history</li><li>location</li><li>Navigator</li><li>Screen</li></ul></li><li><p>获取DOM对象document：<code>window.document.getElementById(&quot;&quot;);</code></p></li></ol><h2 id="5-3-案例：轮播图"><a href="#5-3-案例：轮播图" class="headerlink" title="5.3 案例：轮播图"></a>5.3 案例：轮播图</h2><p>分析：</p><ol><li>在页面上使用<code>img</code>标签展示图片；</li><li>定义一个方法，修改图片对象的<code>src</code>属性；</li><li>定义一个定时器，每隔3秒调用方法一次。</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>轮播图案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mark/banner_1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//修改图片src属性</span>        <span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//判断number是否大于3</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//获取img对象</span>            <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"mark/banner_"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.定义定时器</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-Location：地址栏对象"><a href="#5-4-Location：地址栏对象" class="headerlink" title="5.4 Location：地址栏对象"></a>5.4 Location：地址栏对象</h2><h3 id="5-4-1-内容"><a href="#5-4-1-内容" class="headerlink" title="5.4.1 内容"></a>5.4.1 内容</h3><p><strong>创建(获取)</strong>：</p><ul><li>window.location</li><li>location</li></ul><p><strong>方法</strong>：</p><p>reload()    重新加载当前文档。刷新</p><p><strong>属性</strong>：</p><p>href    设置或返回完整的 URL。</p><h3 id="5-4-2-案例：自动跳转首页"><a href="#5-4-2-案例：自动跳转首页" class="headerlink" title="5.4.2 案例：自动跳转首页"></a>5.4.2 案例：自动跳转首页</h3><p>分析：</p><ol><li><p>显示页面效果<code>&lt;p&gt;</code></p></li><li><p>倒计时读秒效果实现</p><p>2.1 定义一个方法，获取span标签，修改span标签体内容，时间—</p><p>2.2 定义一个定时器，1秒执行一次该方法</p></li><li><p>3.在方法中判断时间如果&lt;= 0 ，则跳转到首页</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">p</span><span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">span</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>秒之后，自动跳转到首页...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">                <span class="token comment">// 2.倒计时读秒效果实现</span>        <span class="token keyword">var</span> second <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> time <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个方法，获取span标签，修改span标签体内容，时间--</span>        <span class="token keyword">function</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            second <span class="token operator">--</span> <span class="token punctuation">;</span>            <span class="token comment">//判断时间如果&lt;= 0 ，则跳转到首页</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>second <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//跳转到首页</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            time<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> second <span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//+""转化为字符串</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//设置定时器，1秒执行一次该方法</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span>showTime<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-History：历史记录对象"><a href="#5-5-History：历史记录对象" class="headerlink" title="5.5 History：历史记录对象"></a>5.5 History：历史记录对象</h2><p><strong>创建(获取)</strong>：</p><ul><li><p>window.history</p></li><li><p>history</p></li></ul><p><strong>方法</strong>：</p><ul><li><p>back()        加载 history 列表中的前一个 URL。</p></li><li><p>forward()  加载 history 列表中的下一个 URL。</p></li><li><p>go(参数)    加载 history 列表中的某个具体页面。</p><p>参数：</p><ul><li>正数：前进几个历史记录</li><li>负数：后退几个历史记录</li></ul></li></ul><p><strong>属性</strong>：</p><p>length    返回当前窗口历史列表中的 URL 数量。</p><h1 id="6-DOM"><a href="#6-DOM" class="headerlink" title="6 DOM"></a>6 DOM</h1><h2 id="6-1-DOM的概念与DOM标准"><a href="#6-1-DOM的概念与DOM标准" class="headerlink" title="6.1 DOM的概念与DOM标准"></a>6.1 DOM的概念与DOM标准</h2><p>Document Object Model <strong>文档对象模型</strong></p><p>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD[增删改查]的动态操作。</p><p><strong>W3C DOM 标准被分为 3 个不同的部分：</strong></p><ul><li><p>核心 DOM - 针对任何结构化文档的标准模型</p><ul><li><p>Document：文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment:注释对象</p></li></ul><ul><li>Node：节点对象，其他5个的父对象</li></ul></li></ul><ul><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220730205546072.png" alt="image-20220730205546072"></p><h2 id="6-2-核心DOM模型"><a href="#6-2-核心DOM模型" class="headerlink" title="6.2 核心DOM模型"></a>6.2 核心DOM模型</h2><h3 id="6-2-1-Document：文档对象"><a href="#6-2-1-Document：文档对象" class="headerlink" title="6.2.1 Document：文档对象"></a>6.2.1 Document：文档对象</h3><p><strong>创建(获取)</strong>：在html dom模型中可以使用window对象来获取    window.document/document</p><p><strong>方法</strong>：</p><ol><li><strong>获取Element对象</strong>：<ul><li>getElementById()：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName()：根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName()：根据name属性值获取元素对象们。返回值是一个数组</li></ul></li><li><strong>创建其他DOM对象</strong>：<ul><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createTextNode()</li></ul></li></ol><h3 id="6-2-2-Element：元素对象"><a href="#6-2-2-Element：元素对象" class="headerlink" title="6.2.2 Element：元素对象"></a>6.2.2 Element：元素对象</h3><p><strong>获取/创建</strong>：通过<code>document</code>来获取和创建</p><p><strong>方法</strong>：</p><ol><li><p>removeAttribute()：删除属性，参数为属性名</p></li><li><p>setAttribute()：设置属性，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> element_a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>element_a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="6-2-3-Node：节点对象"><a href="#6-2-3-Node：节点对象" class="headerlink" title="6.2.3 Node：节点对象"></a>6.2.3 Node：节点对象</h3><p><code>Node</code>是其他5个的父对象。</p><p><strong>特点</strong>：所有dom对象都可以被认为是一个节点</p><p><strong>方法</strong>：</p><p>对CRUD dom树：</p><ul><li>appendChild()：向节点的子节点列表的结尾添加新的子节点。</li><li>removeChild()：删除（并返回）当前节点的指定子节点。</li><li>replaceChild()：用新节点替换一个子节点。</li></ul><p><strong>属性</strong>：</p><p>parentNode 返回节点的父节点。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Node对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#div1</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#div2</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#div3</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        div1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加子节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;input type="button" id="del" value="删除子节点">--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//1.获取超链接</span>        <span class="token keyword">var</span> element_a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.绑定单击事件</span>        element_a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div1<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//1.获取超链接</span>        <span class="token keyword">var</span> element_add <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.绑定单击事件</span>        element_add<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给div1添加子节点</span>            <span class="token comment">//创建div节点</span>            <span class="token keyword">var</span> div3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div3<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"div3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            div1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*            超链接功能：                1.可以被点击：样式                2.点击后跳转到href指定的url                需求：保留1功能，去掉2功能            实现：href="javascript:void(0);"         */</span>        <span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> div1 <span class="token operator">=</span> div2<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>div1<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3-案例：动态表格"><a href="#6-3-案例：动态表格" class="headerlink" title="6.3 案例：动态表格"></a>6.3 案例：动态表格</h2><ul><li>添加：</li></ul><ol><li>给添加按钮绑定单击事件</li><li>获取文本框的内容</li><li>创建td，设置td的文本为文本框的内容。</li><li>创建tr</li><li>将td添加到tr中</li><li>获取table，将tr添加到table中</li></ol><ul><li>删除：</li></ul><ol><li><p>确定点击的是哪一个超链接</p><p><code>&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delTr(this);&quot; &gt;删除&lt;/a&gt;</code></p></li><li><p>怎么删除？</p><p> removeChild()：通过父节点删除子节点</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>动态表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">table</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">td,        th</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入编号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn_add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>学生信息表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>令狐冲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">delTr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>任我行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">delTr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>岳不群<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">delTr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//1.获取按钮</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn_add"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//2.获取文本框的内容</span>            <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> gender <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment">//3.创建td,赋值td的标签体</span>            <span class="token comment">//id的td</span>            <span class="token keyword">var</span> td_id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> text_id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            td_id<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//name的td</span>            <span class="token keyword">var</span> td_name <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> name_id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            td_name<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>name_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//gender的td</span>            <span class="token keyword">var</span> td_gender <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> gender_id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>            td_gender<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gender_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//a标签的td</span>            <span class="token keyword">var</span> td_a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> ele_a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ele_a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token string">"javascript:void(0);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ele_a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span> <span class="token string">"delTr(this);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> text_a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ele_a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text_a<span class="token punctuation">)</span><span class="token punctuation">;</span>            td_a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ele_a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.创建tr</span>            <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5.添加td到tr中</span>            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td_gender<span class="token punctuation">)</span><span class="token punctuation">;</span>            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td_a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//6.获取table</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">delTr</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> obj<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>            <span class="token keyword">var</span> tr <span class="token operator">=</span> obj<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一节有相关代码优化。</p><h2 id="6-4-HTML-DOM"><a href="#6-4-HTML-DOM" class="headerlink" title="6.4 HTML DOM"></a>6.4 HTML DOM</h2><p>1.<strong>标签体的设置和获取</strong>：<code>innerHTML</code></p><p>上一节添加学生信息相关代码可改为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取table</span><span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//追加一行</span>table<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">"&lt;tr>\n"</span> <span class="token operator">+</span><span class="token string">"        &lt;td>"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"&lt;/td>\n"</span> <span class="token operator">+</span><span class="token string">"        &lt;td>"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"&lt;/td>\n"</span> <span class="token operator">+</span><span class="token string">"        &lt;td>"</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">"&lt;/td>\n"</span> <span class="token operator">+</span><span class="token string">"        &lt;td>&lt;a href=\"javascript:void(0);\" onclick=\"delTr(this);\" >删除&lt;/a>&lt;/td>\n"</span> <span class="token operator">+</span><span class="token string">"    &lt;/tr>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用<code>html</code>元素对象的属性</p><p>3.<strong>控制元素样式</strong>：</p><ul><li>使用元素的<code>style</code>属性来设置，如：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//修改样式方式1</span>div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid red"</span><span class="token punctuation">;</span>div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span><span class="token comment">//font-size --> fontSize</span>div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>提前定义好类选择器的样式，通过元素的<code>className</code>属性来设置其<code>class</code>属性值。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>控制样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.d1</span><span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.d2</span><span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        div1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        div2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//修改样式方式1</span>        div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid red"</span><span class="token punctuation">;</span>        div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>        <span class="token comment">//font-size --> fontSize</span>        div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        div2<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"d1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.XML</title>
      <link href="/2022/08/13/java05-xml/"/>
      <url>/2022/08/13/java05-xml/</url>
      
        <content type="html"><![CDATA[<h1 id="一、XML简介"><a href="#一、XML简介" class="headerlink" title="一、XML简介"></a>一、XML简介</h1><p>Extensible Markup Language 可扩展标记语言</p><p>功能：<strong>存储数据</strong></p><ul><li>配置文件</li><li>在网络中传输</li></ul><p><code>xml</code>与<code>html</code>的区别：</p><ul><li><code>xml</code>标签都是自定义的，<code>html</code>标签是预定义</li><li><code>xml</code>的语法严格，<code>html</code>语法松散</li><li><code>xml</code>是存储数据的，<code>html</code>是展示数据</li></ul><h1 id="二、XML语法"><a href="#二、XML语法" class="headerlink" title="二、XML语法"></a>二、XML语法</h1><h2 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h2><ol><li><code>xml</code>文档的后缀名 <code>.xml</code></li><li><code>xml</code>第一行必须定义为文档声明</li><li><code>xml</code>文档中<strong>有且仅有一个根标签</strong></li><li><strong>属性值必须使用引号</strong>(单双都可)<strong>引起来</strong></li><li>标签必须正确关闭</li><li><code>xml</code>标签名称区分大小写</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version='1.0' ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>lisi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">></span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-组成部分"><a href="#2-2-组成部分" class="headerlink" title="2.2 组成部分"></a>2.2 组成部分</h2><p><strong>文档声明</strong></p><ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表：</li></ol><ul><li><p>version：版本号，必须的属性</p></li><li><p>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</p></li><li><p>standalone：是否独立</p><p>取值：</p><ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul><p><strong>指令</strong>(了解)：结合<code>css</code>的</p><p><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</code></p><p><strong>标签</strong>：标签名称是自定义的</p><p>规则：</p><ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 <code>xml</code>（或者 <code>XML</code>、<code>Xml</code> 等等）开始 </li><li>名称不能包含空格 </li></ul><p><strong>属性</strong>：id属性值唯一</p><p><strong>文本</strong>：<code>CDATA</code>区：在该区域中的数据会被原样展示</p><p>​            格式： <code>&lt;![CDATA[ 数据 ]]&gt;</code></p><h2 id="2-3-约束"><a href="#2-3-约束" class="headerlink" title="2.3 约束"></a>2.3 约束</h2><h3 id="2-3-1-约束概述"><a href="#2-3-1-约束概述" class="headerlink" title="2.3.1 约束概述"></a>2.3.1 约束概述</h3><p>规定<code>xml</code>文档的书写规则。作为<strong>框架</strong>的使用者(程序员)，需要：</p><pre><code> 1. 能够在`xml`中引入约束文档 2. 能够简单的读懂约束文档</code></pre><p>分类：</p><ul><li><code>DTD</code>：一种简单的约束技术</li><li><code>Schema</code>：一种复杂的约束技术</li></ul><h3 id="2-3-2-DTD"><a href="#2-3-2-DTD" class="headerlink" title="2.3.2 DTD"></a>2.3.2 DTD</h3><p><code>DTD</code>文档：</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ELEMENT students (student+) &gt;&lt;!ELEMENT student (name,age,sex)&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT age (#PCDATA)&gt;&lt;!ELEMENT sex (#PCDATA)&gt;&lt;!ATTLIST student number ID #REQUIRED&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入<code>dtd</code>文档到<code>xml</code>文档中</p><ul><li>内部<code>dtd</code>：将约束规则定义在<code>xml</code>文档中</li><li>外部<code>dtd</code>：将约束的规则定义在外部的<code>dtd</code>文件中<ul><li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code></li><li>网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">students</span> <span class="token name">SYSTEM</span> <span class="token string">"student.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>hehe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s002<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>lisi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-3-Schema"><a href="#2-3-3-Schema" class="headerlink" title="2.3.3 Schema"></a>2.3.3 Schema</h3><p><code>Schema</code>文档：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>schema</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.itcast.cn/xml<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span>        <span class="token attr-name">targetNamespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.itcast.cn/xml<span class="token punctuation">"</span></span> <span class="token attr-name">elementFormDefault</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qualified<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentsType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>complexType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentsType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>sequence</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentType<span class="token punctuation">"</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unbounded<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>sequence</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>complexType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>complexType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>sequence</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xsd:string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sexType<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>sequence</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberType<span class="token punctuation">"</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>complexType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>simpleType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sexType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>restriction</span> <span class="token attr-name">base</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xsd:string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>enumeration</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>enumeration</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>restriction</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>simpleType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>simpleType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ageType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>restriction</span> <span class="token attr-name">base</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xsd:integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>minInclusive</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>maxInclusive</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>256<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>restriction</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>simpleType</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>simpleType</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>restriction</span> <span class="token attr-name">base</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xsd:string<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsd:</span>pattern</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heima_\d&#123;4&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>restriction</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>simpleType</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsd:</span>schema</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入<code>Schema</code>文档到<code>xml</code>文档中</p><ol><li>填写<code>xml</code>文档的根元素</li><li>引入<code>xsi</code>前缀 <code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></li><li>引入<code>xsd</code>文件命名空间 <code>xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;</code></li><li>为每一个<code>xsd</code>约束声明一个前缀,作为标识  <code>xmlns=&quot;http://www.itcast.cn/xml&quot;</code></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.itcast.cn/xml<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.itcast.cn/xml  student.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="三、解析"><a href="#三、解析" class="headerlink" title="三、解析"></a>三、解析</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p><strong>操作<code>xml</code>文档，将文档中的数据读取到内存中。</strong></p><p>操作<code>xml</code>文档：</p><ol><li><strong>解析(读取)</strong>：将文档中的数据读取到内存中</li><li><strong>写入</strong>：将内存中的数据保存到<code>xml</code>文档中。持久化的存储</li></ol><p>解析<code>xml</code>的方式：</p><ol><li><p><code>DOM</code>：将标记语言文档<strong>一次性加载进内存</strong>，在内存中形成一颗<code>dom</code>树【<strong>服务器端</strong>】</p><ul><li>优点：操作方便，可以对文档进行<code>CRUD</code>（增删改查）的所有操作</li><li>缺点：占内存</li></ul></li><li><p><code>SAX</code>：<strong>逐行读取，是基于事件驱动的</strong></p><ul><li><p>优点：不占内存</p></li><li><p>缺点：只能读取，不能增删改</p></li></ul></li></ol><h2 id="3-2-xml常见的解析器"><a href="#3-2-xml常见的解析器" class="headerlink" title="3.2 xml常见的解析器"></a>3.2 xml常见的解析器</h2><ol><li><code>JAXP</code>：<code>sun</code>公司提供的解析器，支持<code>dom</code>和<code>sax</code>两种思想</li><li><code>DOM4J</code>：一款非常优秀的解析器</li><li><code>Jsoup</code>：<code>jsoup</code> 是一款<code>Java</code>的<code>HTML</code>解析器，可直接解析某个<code>URL</code>地址、<code>HTML</code>文本内容。它提供了一套非常省力的<code>API</code>，可通过<code>DOM</code>，<code>CSS</code>以及类似于<code>jQuery</code>的操作方法来取出和操作数据</li><li><code>PULL</code>：<code>Android</code>操作系统内置的解析器，<code>sax</code>方式的</li></ol><h1 id="四、Jsoup"><a href="#四、Jsoup" class="headerlink" title="四、Jsoup"></a>四、Jsoup</h1><p>​    <code>Jsoup</code> 是一款<code>Java</code>的<code>HTML</code>解析器，可直接解析某个<code>URL</code>地址、<code>HTML</code>文本内容。它提供了一套非常省力的<code>API</code>，可通过<code>DOM</code>，<code>CSS</code>以及类似于<code>jQuery</code>的操作方法来取出和操作数据。</p><h2 id="4-1-获取对象的步骤"><a href="#4-1-获取对象的步骤" class="headerlink" title="4.1 获取对象的步骤"></a>4.1 获取对象的步骤</h2><ol><li><strong>导入jar包</strong></li><li><strong>获取Document对象</strong></li><li><p><strong>获取对应的标签Element对象</strong>        </p></li><li><p><strong>获取数据</strong></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span></span><span class="token class-name">Jsoup</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>select<span class="token punctuation">.</span></span><span class="token class-name">Elements</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsoupDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取Document对象,根据xml文档获取</span>        <span class="token comment">//获取student.xml的path</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">JsoupDemo1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析xml文档,加载文档进内存,获取dom树--->document</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取元素对象</span>        <span class="token class-name">Elements</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//ArrayList集合</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Element</span> element <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-对象的使用"><a href="#4-2-对象的使用" class="headerlink" title="4.2 对象的使用"></a>4.2 对象的使用</h2><h3 id="4-2-1-Jsoup：工具类"><a href="#4-2-1-Jsoup：工具类" class="headerlink" title="4.2.1 Jsoup：工具类"></a>4.2.1 Jsoup：工具类</h3><p>工具类，可以解析<code>html</code>或<code>xml</code>文档，返回<code>Document</code>。</p><p><code>parse</code>：解析<code>html</code>或<code>xml</code>文档，返回<code>Document</code></p><ul><li>parse(File in, String charsetName)：解析<code>xml</code>或<code>html</code>文件的。</li><li>parse(String html)：解析<code>xml</code>或<code>html</code>字符串</li><li>parse(URL url, int timeoutMillis)：通过网络路径获取指定的<code>html</code>或<code>xml</code>的文档对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span></span><span class="token class-name">Jsoup</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>select<span class="token punctuation">.</span></span><span class="token class-name">Elements</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token comment">/** * Jsoup对象功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsoupDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//2.1获取student.xml的path</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">JsoupDemo2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2解析xml文档，加载文档进内存，获取dom树--->Document</span>       <span class="token comment">/* Document document = Jsoup.parse(new File(path), "utf-8");        System.out.println(document);*/</span>       <span class="token comment">//2.parse(String html)：解析xml或html字符串</span>       <span class="token comment">/* String str = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +                "\n" +                "&lt;students>\n" +                "\t&lt;student number=\"heima_0001\">\n" +                "\t\t&lt;name>tom&lt;/name>\n" +                "\t\t&lt;age>18&lt;/age>\n" +                "\t\t&lt;sex>male&lt;/sex>\n" +                "\t&lt;/student>\n" +                "\t&lt;student number=\"heima_0002\">\n" +                "\t\t&lt;name>jack&lt;/name>\n" +                "\t\t&lt;age>18&lt;/age>\n" +                "\t\t&lt;sex>female&lt;/sex>\n" +                "\t&lt;/student>\n" +                "\n" +                "&lt;/students>";        Document document = Jsoup.parse(str);        System.out.println(document);*/</span>       <span class="token comment">//3.parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://baike.baidu.com/item/jsoup/9012509?fr=aladdin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代表网络中的一个资源路径</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-Document：文档对象"><a href="#4-2-2-Document：文档对象" class="headerlink" title="4.2.2 Document：文档对象"></a>4.2.2 Document：文档对象</h3><p>代表内存中的<code>dom</code>树。主要用于<strong>获取<code>Element</code>对象</strong>。</p><ul><li>getElementById(String id)：根据<code>id</code>属性值获取唯一的<code>element</code>对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的<strong>属性名和属性值</strong>获取元素对象集合</li></ul><h3 id="4-2-3-Elements：元素Element对象的集合"><a href="#4-2-3-Elements：元素Element对象的集合" class="headerlink" title="4.2.3 Elements：元素Element对象的集合"></a>4.2.3 Elements：元素Element对象的集合</h3><p>可以当做<code>ArrayList&lt;Element&gt;</code>来使用。</p><h3 id="4-2-4-Element：元素对象"><a href="#4-2-4-Element：元素对象" class="headerlink" title="4.2.4 Element：元素对象"></a>4.2.4 Element：元素对象</h3><ol><li><strong>获取子元素对象</strong></li></ol><ul><li>getElementById(String id)：根据id属性值获取唯一的<code>element</code>对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul><ol><li><strong>获取属性值</strong><pre><code>* String attr(String key)：根据属性名称获取属性值(属性名称不区分大小写)</code></pre></li><li><strong>获取文本内容</strong><ul><li>String text()：获取文本内容</li><li>String html()：获取标签体的所有内容(<strong>包括子标签的字符串内容</strong>)</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取文本内容</span><span class="token class-name">String</span> text <span class="token operator">=</span> ele_name<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> html <span class="token operator">=</span> ele_name<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220807202741313.png" alt="image-20220807202741313"></p><h3 id="4-2-5-Node：节点对象"><a href="#4-2-5-Node：节点对象" class="headerlink" title="4.2.5 Node：节点对象"></a>4.2.5 Node：节点对象</h3><p><code>Node</code>是<code>Document</code>和<code>Element</code>的父类。</p><h2 id="4-3-快捷查询方式"><a href="#4-3-快捷查询方式" class="headerlink" title="4.3 快捷查询方式"></a>4.3 快捷查询方式</h2><h3 id="4-3-1-selector：选择器"><a href="#4-3-1-selector：选择器" class="headerlink" title="4.3.1 selector：选择器"></a>4.3.1 selector：选择器</h3><p>使用的方法：Elements select(String cssQuery)</p><p>语法：参考<code>Selector</code>类中定义的语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span></span><span class="token class-name">Jsoup</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Element</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>select<span class="token punctuation">.</span></span><span class="token class-name">Elements</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/** *选择器查询 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsoupDemo5</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取student.xml的path</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">JsoupDemo5</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取Document对象</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.查询name标签</span>        <span class="token comment">/*            div&#123;            &#125;         */</span>        <span class="token class-name">Elements</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.查询id值为itcast的元素</span>        <span class="token class-name">Elements</span> elements1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"#itcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.获取student标签并且number属性值为heima_0001的age子标签</span>        <span class="token comment">//5.1.获取student标签并且number属性值为heima_0001</span>        <span class="token class-name">Elements</span> elements2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"student[number=\"heima_0001\"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.2获取student标签并且number属性值为heima_0001的age子标签</span>        <span class="token class-name">Elements</span> elements3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"student[number=\"heima_0001\"] > age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elements3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-XPath"><a href="#4-3-2-XPath" class="headerlink" title="4.3.2 XPath"></a>4.3.2 XPath</h3><p><code>XPath</code>即为<code>XML</code>路径语言，它是一种用来确定<code>XML</code>（标准通用标记语言的子集）文档中某部分位置的语言。</p><ul><li><p>使用<code>Jsoup</code>的<code>Xpath</code>需要额外导入<code>jar</code>包</p></li><li><p>查询<code>w3cshool</code>参考手册，使用<code>xpath</code>的语法完成查询</p></li></ul><p><strong>选取节点</strong>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nodename</td><td style="text-align:center">选取此节点的所有子节点</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">从根节点选取</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center">..</td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">选取属性</td></tr></tbody></table></div><p><strong>谓语（Predicates）</strong>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">路径表达式</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">/bookstore/book[1]</td><td style="text-align:center">选取属于 bookstore 子元素的第一个 book 元素</td></tr><tr><td style="text-align:center">/bookstore/book[last()]</td><td style="text-align:center">选取属于 bookstore 子元素的最后一个 book 元素</td></tr><tr><td style="text-align:center">/bookstore/book[last()-1]</td><td style="text-align:center">选取属于 bookstore 子元素的倒数第二个 book 元素</td></tr><tr><td style="text-align:center">/bookstore/book[position()&lt;3]</td><td style="text-align:center">选取最前面的两个属于 bookstore 元素的子元素的 book 元素</td></tr><tr><td style="text-align:center">//title[@lang]</td><td style="text-align:center">选取所有拥有名为 lang 的属性的 title 元素</td></tr><tr><td style="text-align:center">//title[@lang=’eng’]</td><td style="text-align:center">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性</td></tr><tr><td style="text-align:center">/bookstore/book[price&gt;35.00]</td><td style="text-align:center">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00</td></tr><tr><td style="text-align:center">/bookstore/book[price&gt;35.00]/title</td><td style="text-align:center">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00</td></tr></tbody></table></div><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>wanghaomiao<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">XpathSyntaxErrorException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>wanghaomiao<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">JXDocument</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>wanghaomiao<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">JXNode</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span></span><span class="token class-name">Jsoup</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jsoup<span class="token punctuation">.</span>select<span class="token punctuation">.</span></span><span class="token class-name">Elements</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** *XPath查询 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsoupDemo6</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">XpathSyntaxErrorException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取student.xml的path</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">JsoupDemo6</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"student.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取Document对象</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.根据document对象，创建JXDocument对象</span>        <span class="token class-name">JXDocument</span> jxDocument <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JXDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.结合xpath语法查询</span>        <span class="token comment">//4.1查询所有student标签</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JXNode</span><span class="token punctuation">></span></span> jxNodes <span class="token operator">=</span> jxDocument<span class="token punctuation">.</span><span class="token function">selN</span><span class="token punctuation">(</span><span class="token string">"//student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JXNode</span> jxNode <span class="token operator">:</span> jxNodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jxNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.2查询所有student标签下的name标签</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JXNode</span><span class="token punctuation">></span></span> jxNodes2 <span class="token operator">=</span> jxDocument<span class="token punctuation">.</span><span class="token function">selN</span><span class="token punctuation">(</span><span class="token string">"//student/name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JXNode</span> jxNode <span class="token operator">:</span> jxNodes2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jxNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.3查询student标签下带有id属性的name标签</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JXNode</span><span class="token punctuation">></span></span> jxNodes3 <span class="token operator">=</span> jxDocument<span class="token punctuation">.</span><span class="token function">selN</span><span class="token punctuation">(</span><span class="token string">"//student/name[@id]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JXNode</span> jxNode <span class="token operator">:</span> jxNodes3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jxNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JXNode</span><span class="token punctuation">></span></span> jxNodes4 <span class="token operator">=</span> jxDocument<span class="token punctuation">.</span><span class="token function">selN</span><span class="token punctuation">(</span><span class="token string">"//student/name[@id='itcast']"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JXNode</span> jxNode <span class="token operator">:</span> jxNodes4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jxNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.JDBC</title>
      <link href="/2022/08/13/java04-jdbc/"/>
      <url>/2022/08/13/java04-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JDBC概述"><a href="#1-JDBC概述" class="headerlink" title="1 JDBC概述"></a>1 JDBC概述</h1><h2 id="1-1-JDBC概念"><a href="#1-1-JDBC概念" class="headerlink" title="1.1 JDBC概念"></a>1.1 JDBC概念</h2><p><strong>J</strong>ava <strong>D</strong>ata<strong>B</strong>ase <strong>C</strong>onnectivity，Java数据库连接。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220801111511302.png" alt="image-20220801111511302"></p><h2 id="1-2-操作步骤"><a href="#1-2-操作步骤" class="headerlink" title="1.2 操作步骤"></a>1.2 操作步骤</h2><ol><li>导入驱动<code>jar</code>包<ul><li>复制<code>jar</code>包到项目的<code>libs</code>目录下</li><li>右键<code>Add As Library</code></li></ul></li><li>注册驱动</li><li>获取数据库连接对象<code>Connection</code></li><li>定义<code>sql</code></li><li>获取执行<code>sql</code>语句的对象<code>statement</code></li><li>执行<code>sql</code>，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.导入驱动jar包</span>        <span class="token comment">//2.注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//Class.forName查找并加载指定的类,加载数据库连接驱动并连接</span>        <span class="token comment">//3.获取数据库连接对象</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/login?useSSL=false&amp;allowPublicKeyRetrieval=true"</span><span class="token punctuation">;</span>    <span class="token comment">//连接数据库的url,login是数据库名</span>        <span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token comment">//mysql登录名</span>        <span class="token class-name">String</span> pass <span class="token operator">=</span> <span class="token string">"qzc789654"</span><span class="token punctuation">;</span>   <span class="token comment">//mysql登录密码</span>        <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//建立连接</span>        <span class="token comment">//4.定义sql语句</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span> <span class="token string">"select username,password,picture_path from client where username=? and password=?"</span><span class="token punctuation">;</span>        <span class="token comment">//5.获取执行sql的对象</span>        <span class="token class-name">PreparedStatement</span> ptmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ptmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ptmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ptmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.执行sql</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//存在此人</span>            <span class="token class-name">String</span> path <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//7.处理结果</span>        <span class="token comment">//8.释放资源</span>        ptmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-各个类解析"><a href="#2-各个类解析" class="headerlink" title="2 各个类解析"></a>2 各个类解析</h1><h2 id="2-1-DriverManager：驱动管理对象"><a href="#2-1-DriverManager：驱动管理对象" class="headerlink" title="2.1 DriverManager：驱动管理对象"></a>2.1 DriverManager：驱动管理对象</h2><p>其功能有：</p><ul><li><strong>注册驱动</strong>：告诉程序该使用哪一个数据库驱动jar</li></ul><p>static void registerDriver(Driver driver) ：注册与给定的驱动程序 DriverManager 。 </p><p>写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);</p><p>通过查看源码发现：在com.mysql.cj.jdbc.Driver类中存在静态代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>mysql5</code>之后的驱动<code>jar</code>包可以省略注册驱动的步骤。</p><ul><li>获取数据库连接：</li></ul><p>方法：static Connection getConnection(String url, String user, String password) </p><p>参数：</p><ul><li><p>url：指定连接的路径</p><p>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</p><p>例子：jdbc:mysql://localhost:3306/db3</p><p>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</p></li><li><p>user：用户名</p></li><li><p>password：密码 </p></li></ul><h2 id="2-2-Connection：数据库连接对象"><a href="#2-2-Connection：数据库连接对象" class="headerlink" title="2.2 Connection：数据库连接对象"></a>2.2 Connection：数据库连接对象</h2><p>其功能有：</p><ul><li><p>获取执行 sql 的对象：</p><ul><li><p>Statement createStatement()</p></li><li><p>PreparedStatement prepareStatement(String sql)  </p></li></ul></li><li><p>管理事务：</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit() </li><li>回滚事务：rollback()</li></ul></li></ul><h2 id="2-3-Statement：执行sql的对象"><a href="#2-3-Statement：执行sql的对象" class="headerlink" title="2.3 Statement：执行sql的对象"></a>2.3 Statement：执行sql的对象</h2><p>其功能是<strong>执行sql</strong>：</p><ol><li><p>boolean execute(String sql) ：可以执行任意的 sql 了解 </p></li><li><p>int executeUpdate(String sql) ：<strong>执行DML (insert、update、delete) 语句、DDL (create，alter、drop) 语句</strong></p><p>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功：返回值&gt;0的则执行成功，反之，则失败。</p></li><li><p>ResultSet executeQuery(String sql)  ：<strong>执行DQL (select) 语句</strong></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">//1.注册驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.定义sql</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into account values(null,'王五',3000)"</span><span class="token punctuation">;</span>            <span class="token comment">//3.获取Connection对象</span>            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///db3"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.获取执行sql的对象 Statement</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5.执行sql</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//影响的行数</span>            <span class="token comment">//6.处理结果</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token comment">//stmt.close();</span>            <span class="token comment">//7. 释放资源</span>            <span class="token comment">//避免空指针异常</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-ResultSet：结果集对象-封装查询结果"><a href="#2-4-ResultSet：结果集对象-封装查询结果" class="headerlink" title="2.4 ResultSet：结果集对象,封装查询结果"></a>2.4 ResultSet：结果集对象,封装查询结果</h2><ul><li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li>getXxx(参数):获取数据<ul><li>Xxx：代表数据类型   如： int getInt() ,    String getString()</li><li>参数：<pre><code>    1. **int：代表列的编号,从1开始**     如： getString(1) 1. String：代表列名称                   如： getDouble(&quot;balance&quot;)</code></pre></li></ul></li></ul><p>使用步骤：</p><ul><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//循环判断游标是否是最后一行末尾。</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取数据</span><span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> balance <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-PreparedStatement：执行sql的对象"><a href="#2-5-PreparedStatement：执行sql的对象" class="headerlink" title="2.5 PreparedStatement：执行sql的对象"></a>2.5 PreparedStatement：执行sql的对象</h2><h3 id="2-5-1-SQL注入问题"><a href="#2-5-1-SQL注入问题" class="headerlink" title="2.5.1 SQL注入问题"></a>2.5.1 SQL注入问题</h3><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入随意用户，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’ </li></ol><p>解决sql注入问题：使用PreparedStatement对象来解决。</p><h3 id="2-5-2-PreparedStatement对象的引入"><a href="#2-5-2-PreparedStatement对象的引入" class="headerlink" title="2.5.2 PreparedStatement对象的引入"></a>2.5.2 PreparedStatement对象的引入</h3><p>预编译的SQL：参数使用<code>?</code>作为占位符。</p><p>步骤：</p><ol><li><p>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</p></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象 Connection</p></li><li><p>定义sql</p><ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li><p>获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </p></li><li><p>给？赋值：</p><p>方法： setXxx(参数1,参数2)</p><ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li><li><p>执行sql，接受返回结果，不需要传递sql语句</p></li><li><p>处理结果</p></li><li><p>释放资源</p></li></ol><p>注意：后期都会使用PreparedStatement来完成增删改查的所有操作</p><ol><li>可以防止SQL注入</li><li>效率更高</li></ol><h2 id="2-6-抽取JDBC工具类-：-JDBCUtils"><a href="#2-6-抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="2.6 抽取JDBC工具类 ： JDBCUtils"></a>2.6 抽取JDBC工具类 ： JDBCUtils</h2><p> 目的：简化书写</p><p>分析：</p><ol><li>注册驱动也抽取</li><li>抽取一个方法获取连接对象</li></ol><p>​    需求：不想传递参数（麻烦），还得保证工具类的通用性。</p><p>​    解决：配置文件</p><pre class="line-numbers language-none"><code class="language-none">jdbc.propertiesurl&#x3D;user&#x3D;password&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>抽取一个方法释放资源</li></ol><h1 id="3-JDBC控制事务"><a href="#3-JDBC控制事务" class="headerlink" title="3 JDBC控制事务"></a>3 JDBC控制事务</h1><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo10</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> pstmt1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> pstmt2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.获取连接</span>            conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//开启事务</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.定义sql</span>            <span class="token comment">//2.1 张三 - 500</span>            <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"update account set balance = balance - ? where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment">//2.2 李四 + 500</span>            <span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">"update account set balance = balance + ? where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment">//3.获取执行sql对象</span>            pstmt1 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2 <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4. 设置参数</span>            pstmt1<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt1<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5.执行sql</span>            pstmt1<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 手动制造异常</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            pstmt2<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提交事务</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//事务回滚</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt1<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pstmt2<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-数据库连接池"><a href="#4-数据库连接池" class="headerlink" title="4 数据库连接池"></a>4 数据库连接池</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>​    数据库连接池其实就是一个<strong>容器(集合)</strong>，存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p><p>好处：节约资源；用户访问高效</p><h2 id="4-2-标准接口：DataSource"><a href="#4-2-标准接口：DataSource" class="headerlink" title="4.2 标准接口：DataSource"></a>4.2 标准接口：DataSource</h2><p><strong>javax.sql包下</strong></p><p>方法：</p><ul><li><p><strong>获取连接</strong>：getConnection()</p></li><li><p><strong>归还连接</strong>：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接，而是归还连接</p></li></ul><p>一般我们不去实现它，有数据库厂商来实现。</p><ol><li><p>C3P0：数据库连接池技术</p></li><li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p></li></ol><h2 id="4-3-C3P0：数据库连接池技术"><a href="#4-3-C3P0：数据库连接池技术" class="headerlink" title="4.3 C3P0：数据库连接池技术"></a>4.3 C3P0：数据库连接池技术</h2><p> 步骤：</p><ol><li>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，<ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p></li><li>获取连接： getConnection</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span></span><span class="token class-name">ComboPooledDataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0Demo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建数据库连接对象</span>        <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取连接对象</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-Druid：数据库连接池实现技术"><a href="#4-4-Druid：数据库连接池实现技术" class="headerlink" title="4.4 Druid：数据库连接池实现技术"></a>4.4 Druid：数据库连接池实现技术</h2><h3 id="4-4-1-步骤"><a href="#4-4-1-步骤" class="headerlink" title="4.4.1 步骤"></a>4.4.1 步骤</h3><ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件：Properties<ul><li>需加入一条语句：<code>validationQuery=SELECT 1</code></li></ul></li><li>获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.加载配置文件</span>        <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">DruidDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取连接池对象</span>        <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取连接</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-2-定义工具类"><a href="#4-4-2-定义工具类" class="headerlink" title="4.4.2 定义工具类"></a>4.4.2 定义工具类</h3><ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法：<ul><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * Druid连接池的工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.定义成员变量 DataSource</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds <span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.加载配置文件</span>            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.获取DataSource</span>            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 释放资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">/* if(stmt != null)&#123;            try &#123;                stmt.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;        if(conn != null)&#123;            try &#123;                conn.close();//归还连接            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;*/</span>       <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token punctuation">,</span> <span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//归还连接</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取连接池方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  ds<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-Spring-JDBC"><a href="#4-5-Spring-JDBC" class="headerlink" title="4.5 Spring JDBC"></a>4.5 Spring JDBC</h2><p>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化JDBC的开发。</p><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><p>JdbcTemplate template = new JdbcTemplate(ds);</p></li></ol><ol><li>调用JdbcTemplate的方法来完成CRUD的操作<ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li><strong>query()</strong>:查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol><blockquote><p>注：<strong>JavaBean的定义</strong></p><p>一个Java类满足以下2点 ，就可以称为JavaBean：</p><ol><li>public 修饰的类 ,public 无参构造</li><li>所有属性(如果有) 都是private，并且提供set/get (如果boolean 则get 可以替换成is)</li></ol></blockquote><p>【需求】</p><ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合        </li><li>查询总记录数</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Emp</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JDBCUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BeanPropertyRowMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RowMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//Junit单元测试，可以让方法独立执行</span>    <span class="token comment">//1. 获取JDBCTemplate对象</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 1. 修改1号数据的 salary 为 10000     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//2. 定义sql</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update emp set salary = 10000 where id = 1001"</span><span class="token punctuation">;</span>        <span class="token comment">//3. 执行sql</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 2. 添加一条记录     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1015</span><span class="token punctuation">,</span> <span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 3.删除刚才添加的记录     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from emp where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 4.查询id为1001的记录，将其封装为Map集合     * 注意：这个方法查询的结果集长度只能是1     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp where id = ? or id = ?"</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 5. 查询所有记录，将其封装为List     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> stringObjectMap <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringObjectMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 6. 查询所有记录，将其封装为Emp对象的List集合     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Emp</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span><span class="token comment">//匿名内部类</span>                <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> ename <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> job_id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"job_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> mgr <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"mgr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Date</span> joindate <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">"joindate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> salary <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> bonus <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"bonus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> dept_id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"dept_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setEname</span><span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setJob_id</span><span class="token punctuation">(</span>job_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setMgr</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setJoindate</span><span class="token punctuation">(</span>joindate<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setBonus</span><span class="token punctuation">(</span>bonus<span class="token punctuation">)</span><span class="token punctuation">;</span>                emp<span class="token punctuation">.</span><span class="token function">setDept_id</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> emp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 6. 查询所有记录，将其封装为Emp对象的List集合     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 7. 查询总记录数     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select count(id) from emp"</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> total <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[<code>Emp</code>类]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> job_id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> mgr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> joindate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> bonus<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> dept_id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span><span class="token class-name">String</span> ename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getJob_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> job_id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJob_id</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> job_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job_id <span class="token operator">=</span> job_id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mgr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMgr</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> mgr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> mgr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getJoindate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> joindate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJoindate</span><span class="token punctuation">(</span><span class="token class-name">Date</span> joindate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>joindate <span class="token operator">=</span> joindate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token class-name">Double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getBonus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bonus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBonus</span><span class="token punctuation">(</span><span class="token class-name">Double</span> bonus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bonus <span class="token operator">=</span> bonus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getDept_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dept_id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept_id</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> dept_id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept_id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Emp&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", ename='"</span> <span class="token operator">+</span> ename <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", job_id="</span> <span class="token operator">+</span> job_id <span class="token operator">+</span>                <span class="token string">", mgr="</span> <span class="token operator">+</span> mgr <span class="token operator">+</span>                <span class="token string">", joindate="</span> <span class="token operator">+</span> joindate <span class="token operator">+</span>                <span class="token string">", salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span>                <span class="token string">", bonus="</span> <span class="token operator">+</span> bonus <span class="token operator">+</span>                <span class="token string">", dept_id="</span> <span class="token operator">+</span> dept_id <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Bootstrap</title>
      <link href="/2022/08/13/java03-bootstrap/"/>
      <url>/2022/08/13/java03-bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Bootstrap简介"><a href="#1-Bootstrap简介" class="headerlink" title="1 Bootstrap简介"></a>1 Bootstrap简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>概念： <code>Bootstrap</code>，一个前端开发的框架，来自 <code>Twitter</code>，是目前很受欢迎的前端框架。<code>Bootstrap</code> 是基于 <code>HTML</code>、<code>CSS</code>、<code>JavaScript</code> 的，它简洁灵活，使得 <code>Web</code> 开发更加快捷。</p><p>框架：一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</p><p>好处：</p><ul><li>定义了很多的<code>css</code>样式和<code>js</code>插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li><strong>响应式布局</strong>：同一套页面可以兼容不同分辨率的设备。</li></ul><h2 id="1-2-代码模板"><a href="#1-2-代码模板" class="headerlink" title="1.2 代码模板"></a>1.2 代码模板</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-响应式布局"><a href="#2-响应式布局" class="headerlink" title="2 响应式布局"></a>2 响应式布局</h1><p>同一套页面可以兼容不同分辨率的设备。</p><p>实现：依赖于<strong>栅格系统</strong>：将一行平均分成<strong>12个格子</strong>，可以指定元素占几个格子</p><p>步骤：</p><ol><li>定义容器。相当于之前的table</li></ol><p>容器分类：</p><ul><li>container：两边留白<ul><li>container-fluid：每一种设备都是100%宽度</li></ul></li></ul><ol><li><p>定义行。相当于之前的tr   样式：<strong>row</strong></p></li><li><p>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：<strong>col-设备代号-格子数目</strong></p></li></ol><p>设备代号：</p><ul><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ul><p><strong>注意</strong>：</p><ol><li>一行中如果格子数目超过12，则超出部分自动换行；</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备；</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.inner</span><span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--1.定义容器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 2.定义行--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-1 col-sm-2 inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>栅格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220731152512402.png" alt="image-20220731152512402"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220731152522197.png" alt="image-20220731152522197"></p><h1 id="3-CSS样式和JS插件"><a href="#3-CSS样式和JS插件" class="headerlink" title="3 CSS样式和JS插件"></a>3 CSS样式和JS插件</h1><p>更多内容参考：<a href="https://v3.bootcss.com/css/#images">https://v3.bootcss.com/css/#images</a></p><ul><li>按钮：<code>class=&quot;btn btn-default&quot;</code></li><li>图片：<ul><li><code>class=&quot;img-responsive&quot;</code>：图片在任意尺寸都占100%</li><li>图片形状<ul><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;</code>：方形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt;</code>： 圆形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt;</code>：相框</li></ul></li></ul></li><li>表格：<code>class=</code><ul><li><code>table</code></li><li><code>table-bordered</code></li><li><code>table-hover</code></li></ul></li><li>表单<ul><li>给表单项添加：<code>class=&quot;form-control&quot;</code></li></ul></li></ul><ul><li><p>组件：</p><ul><li><p>导航条</p></li><li><p>分页条</p></li></ul></li><li><p>插件：轮播图</p></li></ul><h1 id="4-黑马旅游网"><a href="#4-黑马旅游网" class="headerlink" title="4 黑马旅游网"></a>4 黑马旅游网</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.paddtop</span><span class="token punctuation">&#123;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.search-btn</span><span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>1px solid #ffc900<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>#ffc900 <span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.search-input</span><span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span>2px solid #ffc900<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.jx</span><span class="token punctuation">&#123;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid #ffc900<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.company</span><span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc900<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span>40px <span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 1.页眉部分--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/top_banner.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-responsive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row paddtop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/logo.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-responsive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search-input<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入线路名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search-btn<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/hotel_tel.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-responsive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--导航栏--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token comment">&lt;!-- Brand and toggle get grouped for better mobile display --></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token comment">&lt;!-- 定义汉堡按钮 --></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggle collapsed<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#bs-example-navbar-collapse-1<span class="token punctuation">"</span></span> <span class="token attr-name">aria-expanded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Toggle navigation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token comment">&lt;!-- Collect the nav links, forms, and other content for toggling --></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bs-example-navbar-collapse-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /.navbar-collapse --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /.container-fluid --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--轮播图--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel slide<span class="token punctuation">"</span></span> <span class="token attr-name">data-ride</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token comment">&lt;!-- Indicators --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel-indicators<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide-to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>               <span class="token comment">&lt;!-- Wrapper for slides --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel-inner<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/banner_1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/banner_2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/banner_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token comment">&lt;!-- Controls --></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left carousel-control<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-chevron-left<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Previous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right carousel-control<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#carousel-example-generic<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-slide</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>glyphicon glyphicon-chevron-right<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 2.主体部分--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row jx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/icon_5.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>黑马精选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row paddtop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row jx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/icon_6.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>国内游<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row paddtop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/guonei_1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/jiangxuan_3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&yen;">&amp;yen;</span> 699<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 3.页脚部分--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/footer_service.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-responsive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row company<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           江苏传智播客教育科技股份有限公司 版权所有Copyright 2006-2018, All Rights Reserved 苏ICP备16007882       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Web开发</title>
      <link href="/2022/08/13/java07-web-kai-fa/"/>
      <url>/2022/08/13/java07-web-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、会话技术概述"><a href="#一、会话技术概述" class="headerlink" title="一、会话技术概述"></a>一、会话技术概述</h1><ol><li>会话：<strong>一次会话中包含多次请求和响应</strong>。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在<strong>一次会话的范围内的多次请求</strong>间，共享数据</li><li>方式：<ul><li>客户端会话技术：<code>Cookie</code></li><li>服务器端会话技术：<code>Session</code></li></ul></li></ol><h1 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h1><h2 id="2-1-Cookie定义"><a href="#2-1-Cookie定义" class="headerlink" title="2.1 Cookie定义"></a>2.1 Cookie定义</h2><p>客户端会话技术，<strong>将数据保存到客户端</strong>。</p><h2 id="2-2-Cookie使用步骤"><a href="#2-2-Cookie使用步骤" class="headerlink" title="2.2 Cookie使用步骤"></a>2.2 Cookie使用步骤</h2><ol><li><p>创建<code>Cookie</code>对象，绑定数据</p><ul><li><code>new Cookie(String name, String value)</code></li></ul></li><li><p>发送<code>Cookie</code>对象</p><ul><li><code>response.addCookie(Cookie cookie)</code></li></ul></li><li><p>获取<code>Cookie</code>，拿到数据</p><ul><li><code>Cookie[] request.getCookies()</code></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/cookieDemo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 创建Cookie对象</span>        <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 发送Cookie</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/cookieDemo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 获取Cookie</span>        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数据，遍历Cookies</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span> cs<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-实现原理"><a href="#2-3-实现原理" class="headerlink" title="2.3 实现原理"></a>2.3 实现原理</h2><p>基于<strong>响应头</strong><code>set-cookie</code>和<strong>请求头</strong><code>cookie</code>实现。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220812223918896.png" alt="image-20220812223918896"></p><h2 id="2-4-Cookie使用细节"><a href="#2-4-Cookie使用细节" class="headerlink" title="2.4 Cookie使用细节"></a>2.4 Cookie使用细节</h2><h3 id="2-4-1-发送多个Cookie"><a href="#2-4-1-发送多个Cookie" class="headerlink" title="2.4.1 发送多个Cookie"></a>2.4.1 发送多个Cookie</h3><p>可以创建多个<code>Cookie</code>对象，使用<code>response</code>调用多次<code>addCookie</code>方法发送<code>cookie</code>即可。</p><h3 id="2-4-2-Cookie存活时间"><a href="#2-4-2-Cookie存活时间" class="headerlink" title="2.4.2 Cookie存活时间"></a>2.4.2 Cookie存活时间</h3><ol><li>默认情况下，当浏览器关闭后，<code>Cookie</code>数据被销毁</li><li><p><strong>持久化存储</strong>：<code>setMaxAge(int seconds)</code></p><ul><li><p>正数：将<code>Cookie</code>数据写到硬盘的文件中。持久化存储，并指定<code>cookie</code>存活时间；时间到后，<code>cookie</code>文件自动失效</p></li><li><p>负数：默认值</p></li><li><p>零：删除<code>cookie</code>信息</p></li></ul></li></ol><pre><code>    3. cookie能不能存中文？        * 在tomcat 8 之前 cookie中不能直接存储中文数据。            * 需要将中文数据转码---一般采用URL编码(%E3)        * 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析    4. cookie共享问题？        1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？            * 默认情况下cookie不能共享            * setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录                * 如果要共享，则可以将path设置为&quot;/&quot;</code></pre><p>​            </p><pre><code>        2. 不同的tomcat服务器间cookie共享问题？            * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享                * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享5. Cookie的特点和作用    1. cookie存储数据在客户端浏览器    2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)    * 作用：        1. cookie一般用于存出少量的不太敏感的数据        2. 在不登录的情况下，完成服务器对客户端的身份识别6. 案例：记住上一次访问时间    1. 需求：        1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。        2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串    2. 分析：        1. 可以采用Cookie来完成        2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie            1. 有：不是第一次访问                1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20                2. 写回Cookie：lastTime=2018年6月10日11:50:01            2. 没有：是第一次访问                1. 响应数据：您好，欢迎您首次访问                2. 写回Cookie：lastTime=2018年6月10日11:50:01    3. 代码实现：        package cn.itcast.cookie;        import javax.servlet.ServletException;        import javax.servlet.annotation.WebServlet;        import javax.servlet.http.Cookie;        import javax.servlet.http.HttpServlet;        import javax.servlet.http.HttpServletRequest;        import javax.servlet.http.HttpServletResponse;        import java.io.IOException;        import java.net.URLDecoder;        import java.net.URLEncoder;        import java.text.SimpleDateFormat;        import java.util.Date;    @WebServlet(&quot;/cookieTest&quot;)    public class CookieTest extends HttpServlet &#123;        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            //设置响应的消息体的数据格式以及编码            response.setContentType(&quot;text/html;charset=utf-8&quot;);            //1.获取所有Cookie            Cookie[] cookies = request.getCookies();            boolean flag = false;//没有cookie为lastTime            //2.遍历cookie数组            if(cookies != null &amp;&amp; cookies.length &gt; 0)&#123;                for (Cookie cookie : cookies) &#123;                    //3.获取cookie的名称                    String name = cookie.getName();                    //4.判断名称是否是：lastTime                    if(&quot;lastTime&quot;.equals(name))&#123;                        //有该Cookie，不是第一次访问                        flag = true;//有lastTime的cookie                        //设置Cookie的value                        //获取当前时间的字符串，重新设置Cookie的值，重新发送cookie                        Date date  = new Date();                        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);                        String str_date = sdf.format(date);                        System.out.println(&quot;编码前：&quot;+str_date);                        //URL编码                        str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;);                        System.out.println(&quot;编码后：&quot;+str_date);                        cookie.setValue(str_date);                        //设置cookie的存活时间                        cookie.setMaxAge(60 * 60 * 24 * 30);//一个月                        response.addCookie(cookie);</code></pre><p>​        </p><pre><code>                        //响应数据                        //获取Cookie的value，时间                        String value = cookie.getValue();                        System.out.println(&quot;解码前：&quot;+value);                        //URL解码：                        value = URLDecoder.decode(value,&quot;utf-8&quot;);                        System.out.println(&quot;解码后：&quot;+value);                        response.getWriter().write(&quot;&lt;h1&gt;欢迎回来，您上次访问时间为:&quot;+value+&quot;&lt;/h1&gt;&quot;);                        break;                    &#125;                &#125;            &#125;</code></pre><p>​        </p><pre><code>            if(cookies == null || cookies.length == 0 || flag == false)&#123;                //没有，第一次访问                //设置Cookie的value                //获取当前时间的字符串，重新设置Cookie的值，重新发送cookie                Date date  = new Date();                SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);                String str_date = sdf.format(date);                System.out.println(&quot;编码前：&quot;+str_date);                //URL编码                str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;);                System.out.println(&quot;编码后：&quot;+str_date);                Cookie cookie = new Cookie(&quot;lastTime&quot;,str_date);                //设置cookie的存活时间                cookie.setMaxAge(60 * 60 * 24 * 30);//一个月                response.addCookie(cookie);                response.getWriter().write(&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;);            &#125;</code></pre><p>​        </p><pre><code>        &#125;        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            this.doPost(request, response);        &#125;    &#125;</code></pre><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><pre><code>1. 概念：    * Java Server Pages： java服务器端页面        * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码        * 用于简化书写！！！2. 原理    * JSP本质上就是一个Servlet3. JSP的脚本：JSP定义Java代码的方式    1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。    2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。    3. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。4. JSP的内置对象：    * 在jsp页面中不需要获取和创建，可以直接使用的对象    * jsp一共有9个内置对象。    * 今天学习3个：        * request        * response        * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似            * response.getWriter()和out.write()的区别：                * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。                * response.getWriter()数据输出永远在out.write()之前5. 案例:改造Cookie案例</code></pre><h2 id="Session：主菜"><a href="#Session：主菜" class="headerlink" title="Session：主菜"></a>Session：主菜</h2><pre><code>1. 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession2. 快速入门：    1. 获取HttpSession对象：        HttpSession session = request.getSession();    2. 使用HttpSession对象：        Object getAttribute(String name)          void setAttribute(String name, Object value)        void removeAttribute(String name)  3. 原理    * Session的实现是依赖于Cookie的。</code></pre><p>​    </p><pre><code>4. 细节：    1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？        * 默认情况下。不是。        * 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。             Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId());             c.setMaxAge(60*60);             response.addCookie(c);    2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？        * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作            * session的钝化：                * 在服务器正常关闭之前，将session对象系列化到硬盘上            * session的活化：                * 在服务器启动后，将session文件转化为内存中的session对象即可。    3. session什么时候被销毁？        1. 服务器关闭        2. session对象调用invalidate() 。        3. session默认失效时间 30分钟            选择性配置修改                &lt;session-config&gt;                &lt;session-timeout&gt;30&lt;/session-timeout&gt;            &lt;/session-config&gt; 5. session的特点     1. session用于存储一次会话的多次请求的数据，存在服务器端     2. session可以存储任意类型，任意大小的数据    * session与Cookie的区别：        1. session存储数据在服务器端，Cookie在客户端        2. session没有数据大小限制，Cookie有        3. session数据安全，Cookie相对于不安全</code></pre><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><pre><code>1. 案例需求：    1. 访问带有验证码的登录页面login.jsp    2. 用户输入用户名，密码以及验证码。        * 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误        * 如果验证码输入有误，跳转登录页面，提示：验证码错误        * 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您2. 分析：</code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Web基础</title>
      <link href="/2022/08/13/java06-web-ji-chu/"/>
      <url>/2022/08/13/java06-web-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、web相关概念回顾"><a href="#一、web相关概念回顾" class="headerlink" title="一、web相关概念回顾"></a>一、web相关概念回顾</h1><h2 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h2><ol><li>C/S：客户端/服务器端</li><li><strong>B/S：浏览器/服务器端</strong></li></ol><h2 id="1-2-资源分类"><a href="#1-2-资源分类" class="headerlink" title="1.2 资源分类"></a>1.2 资源分类</h2><ol><li><p><strong>静态资源</strong>：所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析。</p><p>如：<code>html</code>,<code>css</code>,<code>JavaScript</code></p></li><li><p><strong>动态资源</strong>：每个用户访问相同资源后，得到的结果可能不一样，称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</p><p> 如：<code>servlet/jsp</code>,<code>php</code>,<code>asp</code>….</p></li></ol><h2 id="1-3-网络通信三要素"><a href="#1-3-网络通信三要素" class="headerlink" title="1.3 网络通信三要素"></a>1.3 网络通信三要素</h2><ol><li><strong>IP</strong>：电子设备(计算机)在网络中的唯一标识。</li><li><strong>端口</strong>：应用程序在计算机中的唯一标识。 0~65536</li><li><p><strong>传输协议</strong>：规定了数据传输的规则。有关的<strong>基础协议</strong>有：</p><ul><li><code>tcp</code>：安全协议，三次握手，速度稍慢</li><li><code>udp</code>：不安全协议，速度快</li></ul></li></ol><h2 id="1-4-web服务器软件"><a href="#1-4-web服务器软件" class="headerlink" title="1.4 web服务器软件"></a>1.4 web服务器软件</h2><h3 id="1-4-1-概念"><a href="#1-4-1-概念" class="headerlink" title="1.4.1 概念"></a>1.4.1 概念</h3><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li><code>web</code>服务器软件：接收用户的请求，处理请求，做出响应。<ul><li>在<code>web</code>服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>也称<code>web</code>容器</li></ul></li></ul><h3 id="1-4-2-常见的Java相关的web服务器软件"><a href="#1-4-2-常见的Java相关的web服务器软件" class="headerlink" title="1.4.2 常见的Java相关的web服务器软件"></a>1.4.2 常见的Java相关的web服务器软件</h3><ul><li>webLogic：oracle公司，大型的<code>JavaEE</code>服务器，支持所有的<code>JavaEE</code>规范，收费的；</li><li>webSphere：IBM公司，大型的<code>JavaEE</code>服务器，支持所有的<code>JavaEE</code>规范，收费的；</li><li>JBOSS：JBOSS公司的，大型的<code>JavaEE</code>服务器，支持所有的<code>JavaEE</code>规范，收费的；</li><li>Tomcat：Apache基金组织，中小型的<code>JavaEE</code>服务器，仅仅支持少量的<code>JavaEE</code>规范<code>servlet/jsp</code>。开源的，免费的。</li></ul><blockquote><p><strong>[注]</strong><code>JavaEE</code>：</p><p><code>Java</code>语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范。</p></blockquote><h1 id="二、Tomcat：web服务器软件"><a href="#二、Tomcat：web服务器软件" class="headerlink" title="二、Tomcat：web服务器软件"></a>二、Tomcat：web服务器软件</h1><h2 id="2-1-下载、安装与卸载"><a href="#2-1-下载、安装与卸载" class="headerlink" title="2.1 下载、安装与卸载"></a>2.1 下载、安装与卸载</h2><p>（1）下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p>（2）安装：解压压缩包即可。注意：安装目录建议不要有中文和空格</p><p>（3）卸载：删除目录就行了</p><h2 id="2-2-启动与关闭"><a href="#2-2-启动与关闭" class="headerlink" title="2.2 启动与关闭"></a>2.2 启动与关闭</h2><p>（1）启动：</p><ol><li>bin/startup.bat ,双击运行该文件即可</li><li>访问：浏览器输入：<ul><li><a href="http://localhost:8080">http://localhost:8080</a> 回车访问自己</li><li><a href="http://别人的ip:8080">http://别人的ip:8080</a> 访问别人</li></ul></li></ol><p>（2）关闭：</p><ol><li>正常关闭：<ul><li><code>bin/shutdown.bat</code></li><li><code>ctrl+c</code></li></ul></li><li>强制关闭：<ul><li>点击启动窗口的×</li></ul></li></ol><h2 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h2><p>（1）直接将项目放到<code>webapps</code>目录下即可。</p><ul><li><code>/hello</code>：项目的访问路径—&gt;虚拟目录</li></ul><p><strong>简化部署</strong>：将项目打成一个<code>war</code>包，再将<code>war</code>包放置到<code>webapps</code>目录下，<code>war</code>包会自动解压缩。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808105253349.png" alt="image-20220808105253349"></p><p>（2）配置<code>conf/server.xml</code>文件</p><p>在<code>&lt;Host&gt;</code>标签体中配置<code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p><ul><li><code>docBase</code>：项目存放的路径</li><li><code>path</code>：虚拟目录</li></ul><p>（3）在<code>conf\Catalina\localhost</code>创建任意名称的<code>xml</code>文件。在文件中编写<code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code></p><ul><li>虚拟目录：<code>xml</code>文件的名称</li></ul><h2 id="2-4-静态项目和动态项目"><a href="#2-4-静态项目和动态项目" class="headerlink" title="2.4 静态项目和动态项目"></a>2.4 静态项目和动态项目</h2><p><code>Java</code><strong>动态项目</strong>的目录结构：</p><ul><li>项目的根目录</li><li><code>WEB-INF</code>目录：<ul><li><code>web.xml</code>：<code>web</code>项目的核心配置文件</li><li><code>classes</code>目录：<strong>放置字节码文件的目录</strong></li><li><code>lib</code>目录：放置依赖的<code>jar</code>包</li></ul></li></ul><h2 id="2-5-JavaEE项目部署"><a href="#2-5-JavaEE项目部署" class="headerlink" title="2.5 JavaEE项目部署"></a>2.5 JavaEE项目部署</h2><p>将<code>Tomcat</code>集成到<code>IDEA</code>中，并且创建<code>JavaEE</code>的项目，部署项目。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808123459525.png" alt="image-20220808123459525"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808123517632.png" alt="image-20220808123517632"></p><p>【注】</p><ol><li><p>IDEA会为每一个<code>tomcat</code>部署的项目单独建立一份配置文件</p><ul><li>查看控制台的<code>log</code>：Using CATALINA_BASE:   “C:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li></ul></li><li><p>工作空间项目和<code>tomcat</code>部署的<code>web</code>项目：</p><ul><li><code>tomcat</code>真正访问的是“<code>tomcat</code>部署的<code>web</code>项目”，”<code>tomcat</code>部署的<code>web</code>项目”对应着”工作空间项目” 的<code>web</code>目录下的所有资源</li><li><code>WEB-INF</code>目录下的资源不能被浏览器直接访问</li></ul></li><li>断点调试：使用”小虫子”启动<code>debug</code></li></ol><p><strong>参考文章</strong>：</p><p><a href="https://blog.csdn.net/weixin_44797182/article/details/124745744?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165993233916781818736284%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165993233916781818736284&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124745744-null-null.142^v39^pc_rank_v37,185^v2^control&amp;utm_term=idea%20%E6%96%B0%E5%BB%BAjavaweb&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_44797182/article/details/124745744?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165993233916781818736284%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165993233916781818736284&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124745744-null-null.142^v39^pc_rank_v37,185^v2^control&amp;utm_term=idea%20%E6%96%B0%E5%BB%BAjavaweb&amp;spm=1018.2226.3001.4187</a></p><h1 id="三、Servlet"><a href="#三、Servlet" class="headerlink" title="三、Servlet"></a>三、Servlet</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>server applet，<strong>运行在服务器端的小程序</strong></p><p><code>Servlet</code>就是一个<strong>接口</strong>，<strong>定义了<code>Java</code>类被浏览器访问到(<code>tomcat</code>识别)的规则</strong>。将来我们自定义一个类，实现<code>Servlet</code>接口，复写方法。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808171520362.png" alt="image-20220808171520362"></p><h2 id="3-2-配置步骤"><a href="#3-2-配置步骤" class="headerlink" title="3.2 配置步骤"></a>3.2 配置步骤</h2><ol><li>创建<code>JavaEE</code>项目</li><li>定义一个类，实现<code>Servlet</code>接口<ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li>实现接口中的抽象方法</li><li>配置<code>Servlet</code></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置Servlet --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当访问<code>http://localhost:8899/web/demo1</code>时，执行：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808173023676.png" alt="image-20220808173023676"></p><h2 id="3-3-Servlet执行原理"><a href="#3-3-Servlet执行原理" class="headerlink" title="3.3 Servlet执行原理"></a>3.3 Servlet执行原理</h2><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求<code>URL</code>路径，获取访问的<code>Servlet</code>的资源路径</li><li>查找<code>web.xml</code>文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code><strong>全类名</strong></li><li><code>tomcat</code>会<strong>将字节码文件加载进内存，并且创建其对象</strong></li><li>调用其方法</li></ol><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808173239397.png" alt="image-20220808173239397"></p><h2 id="3-4-生命周期方法"><a href="#3-4-生命周期方法" class="headerlink" title="3.4 生命周期方法"></a>3.4 生命周期方法</h2><p>（1）<strong>被创建</strong>：执行<code>init</code>方法，只执行一次。<code>Servlet</code>被创建的时机是：</p><ul><li>默认情况下，第一次被访问时，<code>Servlet</code>被创建</li><li>可以配置执行<code>Servlet</code>的创建时机。在<code>&lt;servlet&gt;</code>标签下配置：<ol><li>第一次被访问时，创建，<code>&lt;load-on-startup&gt;</code>的值为负数</li><li>在服务器启动时，创建，<code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ol></li></ul><ul><li><p><code>Servlet</code>的<code>init</code>方法，只执行一次，说明一个<code>Servlet</code>在内存中只存在一个对象，<code>Servlet</code>是单例的</p><ul><li><p>多个用户同时访问时，可能存在线程安全问题；</p></li><li><p>解决：尽量不要在<code>Servlet</code>中定义成员变量。即使定义了成员变量，也不要对修改值。</p></li></ul></li></ul><p>（2）<strong>提供服务</strong>：执行<code>service</code>方法，执行多次。每次访问<code>Servlet</code>时，<code>Service</code>方法都会被调用一次。</p><p>（3）<strong>被销毁</strong>：执行<code>destroy</code>方法，只执行一次</p><ul><li><code>Servlet</code>被销毁时执行。服务器关闭时，<code>Servlet</code>被销毁</li><li>只有<strong>服务器正常关闭</strong>时，才会执行<code>destroy</code>方法。</li><li><code>destroy</code>方法在<code>Servlet</code>被销毁之前执行，一般用于释放资源</li></ul><h2 id="3-5-Servlet-3-0"><a href="#3-5-Servlet-3-0" class="headerlink" title="3.5 Servlet 3.0"></a>3.5 Servlet 3.0</h2><p><code>Servlet 3.0</code>支持注解配置，可以不需要<code>web.xml</code>。</p><p>步骤：</p><ol><li>创建<code>JavaEE</code>项目，选择<code>Servlet</code>的版本<code>3.0</code>以上，可以不创建<code>web.xml</code></li><li>定义一个类，实现<code>Servlet</code>接口</li><li>复写方法</li><li>在类上使用<code>@WebServlet</code>注解，进行配置<ul><li><code>@WebServlet(&quot;资源路径&quot;)</code>[访问资源路径<code>urlPatterns</code>]</li></ul></li></ol><h2 id="3-6-Servlet体系结构"><a href="#3-6-Servlet体系结构" class="headerlink" title="3.6 Servlet体系结构"></a>3.6 Servlet体系结构</h2><p><code>Servlet</code> — 接口</p><p><code>GenericServlet</code> — 抽象类</p><ul><li>将<code>Servlet</code>接口中其他的方法做了<strong>默认空实现</strong>，只将<code>service()</code>方法作为抽象</li><li>将来定义<code>Servlet</code>类时，可以继承<code>GenericServlet</code>，实现<code>service()</code>方法即可</li></ul><p><strong><code>HttpServlet</code> — 抽象类，对<code>http</code>协议的一种封装，简化操作</strong>【经常使用】</p><ul><li>定义类继承<code>HttpServlet</code></li><li>复写<code>doGet/doPost</code>方法</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808214832351.png" alt="image-20220808214832351"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doGet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doPost..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7-Servlet相关配置"><a href="#3-7-Servlet相关配置" class="headerlink" title="3.7 Servlet相关配置"></a>3.7 Servlet相关配置</h2><p><code>urlpartten</code>：<code>Servlet</code>访问路径</p><p>【注】</p><ul><li><p>一个<code>Servlet</code>可以<strong>定义多个访问路径</strong> ： <code>@WebServlet(&#123;&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;&#125;)</code></p></li><li><p><strong>路径定义规则</strong>：</p><ul><li><p><code>/xxx</code>：路径匹配</p></li><li><p><code>/xxx/xxx</code>：<strong>多层路径，目录结构</strong></p></li><li><p><code>*.do</code>：<strong>扩展名匹配</strong>—-&gt;浏览器输入<code>localhost/demo4.do</code>，可以访问到（前面不能输入<code>/</code>）</p></li></ul></li></ul><h1 id="四、HTTP请求消息"><a href="#四、HTTP请求消息" class="headerlink" title="四、HTTP请求消息"></a>四、HTTP请求消息</h1><h2 id="4-1-概念及特点"><a href="#4-1-概念及特点" class="headerlink" title="4.1 概念及特点"></a>4.1 概念及特点</h2><p>Hyper Text Transfer Protocol 超文本传输协议</p><p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p><p>特点：</p><ol><li>基于<code>TCP/IP</code>的高级协议</li><li>默认端口号：<code>80</code></li><li>基于请求/响应模型的：一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><p>历史版本：</p><ul><li><p><code>1.0</code>：每一次请求响应都会建立新的连接</p></li><li><p><code>1.1</code>：复用连接</p></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808221413750.png" alt="image-20220808221413750"></p><h2 id="4-2-请求消息数据格式"><a href="#4-2-请求消息数据格式" class="headerlink" title="4.2 请求消息数据格式"></a>4.2 请求消息数据格式</h2><h3 id="4-2-1-请求行"><a href="#4-2-1-请求行" class="headerlink" title="4.2.1 请求行"></a>4.2.1 请求行</h3><p>格式：<strong>请求方式 请求url 请求协议/版本</strong></p><p><strong>GET /login.html    HTTP/1.1</strong></p><p><code>HTTP</code>协议有<code>7</code>种请求方式，常用的有<code>2</code>种：</p><p>[1]<strong><code>GET</code></strong>：</p><ol><li>请求参数在请求行中，在<code>url</code>后</li><li>请求的<code>url</code>长度有限制的</li><li>不太安全</li></ol><p>[2]<strong><code>POST</code></strong>：</p><ol><li><strong>请求参数在请求体中</strong>【参数位置与<code>GET</code>不一样】</li><li>请求的<code>url</code>长度没有限制的</li><li>相对安全</li></ol><h3 id="4-2-2-请求头"><a href="#4-2-2-请求头" class="headerlink" title="4.2.2 请求头"></a>4.2.2 请求头</h3><p>请求头用于浏览器告诉服务器一些信息</p><p>格式：<strong>请求头名称: 请求头值</strong></p><p>常见的请求头：</p><ol><li><strong><code>User-Agent</code></strong>：浏览器告诉服务器，我访问你使用的浏览器版本信息</li></ol><p>​        可以在服务器端获取该头的信息，解决<strong>浏览器的兼容性问题</strong></p><ol><li><strong><code>Referer</code></strong>：<a href="http://localhost/login.html">http://localhost/login.html</a></li></ol><ul><li>告诉服务器，我(当前请求)从哪里来？</li><li>作用：<strong>防盗链；统计工作</strong>。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808224519479.png" alt="image-20220808224519479"></p><h3 id="4-2-3-请求空行"><a href="#4-2-3-请求空行" class="headerlink" title="4.2.3 请求空行"></a>4.2.3 请求空行</h3><p>空行，用于分割<code>POST</code>请求的请求头和请求体。</p><h3 id="4-2-4-请求体-正文"><a href="#4-2-4-请求体-正文" class="headerlink" title="4.2.4 请求体(正文)"></a>4.2.4 请求体(正文)</h3><p>请求体封装<code>POST</code>请求消息的请求参数。【<code>GET</code>无】</p><h2 id="4-3-字符串格式"><a href="#4-3-字符串格式" class="headerlink" title="4.3 字符串格式"></a>4.3 字符串格式</h2><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;login.htmlHTTP&#x2F;1.1Host: localhostUser-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko&#x2F;20100101 Firefox&#x2F;60.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2Accept-Encoding: gzip, deflateReferer: http:&#x2F;&#x2F;localhost&#x2F;login.htmlConnection: keep-alive[复用]Upgrade-Insecure-Requests: 1username&#x3D;zhangsan[请求体]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、Request"><a href="#五、Request" class="headerlink" title="五、Request"></a>五、Request</h1><h2 id="5-1-request对象和response对象的原理"><a href="#5-1-request对象和response对象的原理" class="headerlink" title="5.1 request对象和response对象的原理"></a>5.1 request对象和response对象的原理</h2><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808230901807.png" alt="image-20220808230901807"></p><p>【注】</p><ol><li><code>request</code>和<code>response</code>对象是由服务器创建的。我们来使用它们</li><li><code>request</code>对象是来<strong>获取请求消息</strong>，<code>response</code>对象是来<strong>设置响应消息</strong></li></ol><h2 id="5-2-request对象继承体系结构"><a href="#5-2-request对象继承体系结构" class="headerlink" title="5.2 request对象继承体系结构"></a>5.2 request对象继承体系结构</h2><p>ServletRequest        —    接口<br>|    继承<br>HttpServletRequest    — 接口<br>|    实现<br>org.apache.catalina.connector.RequestFacade 类(tomcat)</p><h2 id="5-3-request获取请求消息数据功能"><a href="#5-3-request获取请求消息数据功能" class="headerlink" title="5.3 request获取请求消息数据功能"></a>5.3 request获取请求消息数据功能</h2><h3 id="5-3-1-获取请求行数据"><a href="#5-3-1-获取请求行数据" class="headerlink" title="5.3.1 获取请求行数据"></a>5.3.1 获取请求行数据</h3><p>GET /day14/demo1?name=zhangsan HTTP/1.1</p><p>方法：</p><ol><li>获取请求方式 ：<code>GET</code><ul><li><code>String getMethod()</code></li></ul></li><li><strong>(*)</strong>获取虚拟目录：<code>/day14</code><ul><li><code>String getContextPath()</code></li></ul></li><li>获取<code>Servlet</code>路径: <code>/demo1</code><ul><li><code>String getServletPath()</code></li></ul></li><li>获取<code>get</code>方式请求参数：<code>name=zhangsan</code><ul><li><code>String getQueryString()</code></li></ul></li><li><p><strong>(*)</strong>获取请求<code>URI</code>：<code>/day14/demo1</code></p><ul><li><code>String getRequestURI()</code>：<code>/day14/demo1</code></li><li><p><code>StringBuffer getRequestURL()</code>：<a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a></p></li><li><p><code>URL</code>(<strong>统一资源定位符</strong>)： <a href="http://localhost/day14/demo1">http://localhost/day14/demo1</a>    中华人民共和国</p></li><li><code>URI</code>(<strong>统一资源标识符</strong>)： <code>/day14/demo1</code>    共和国</li></ul></li><li><p>获取协议及版本：<code>HTTP/1.1</code></p><ul><li><code>String getProtocol()</code></li></ul></li><li><p>获取客户机的<code>IP</code>地址：</p><ul><li><code>String getRemoteAddr()</code></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/RequestDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 获取请求方式: GET</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.(*)获取虚拟目录: /day14</span>        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 获取Servlet路径: /demo1</span>        <span class="token class-name">String</span> servletPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 获取get方式请求参数:</span>        <span class="token class-name">String</span> queryString <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.(*)获取请求URI: /day14/demo1</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> requestURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6. 获取协议及版本: HTTP/1.1</span>        <span class="token class-name">String</span> protocol <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7. 获取客户机的IP地址:</span>        <span class="token class-name">String</span> remoteAddr <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220808233526032.png" alt="image-20220808233526032"></p><h3 id="5-3-2-获取请求头数据"><a href="#5-3-2-获取请求头数据" class="headerlink" title="5.3.2 获取请求头数据"></a>5.3.2 获取请求头数据</h3><p>方法：</p><ul><li><strong>(*)</strong><code>String getHeader(String name)</code>：通过请求头的名称获取请求头的值</li><li><code>Enumeration&lt;String&gt; getHeaderNames()</code>：获取所有的请求头名称【类似迭代器】</li></ul><p>[例1]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//演示获取请求头数据  </span>        <span class="token comment">//1.获取所有请求头名称</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//根据名称获取请求头的值</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例2]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//演示获取请求头数据:user-agent</span>        <span class="token class-name">String</span> agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断agent的浏览器版本</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Chrome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//谷歌</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谷歌来了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//火狐</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火狐来了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[例3]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//演示获取请求头数据:referer</span>        <span class="token class-name">String</span> referer <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//http://localhost/day14/login.html</span>        <span class="token comment">//防盗链</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>referer <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>referer<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/day14"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//正常访问</span>               <span class="token comment">// System.out.println("播放电影....");</span>                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"播放电影...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//盗链</span>                <span class="token comment">//System.out.println("想看电影吗？来优酷吧...");</span>                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"想看电影吗？来优酷吧..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-3-获取请求体数据"><a href="#5-3-3-获取请求体数据" class="headerlink" title="5.3.3 获取请求体数据"></a>5.3.3 获取请求体数据</h3><p>请求体：只有<code>POST</code>请求方式，才有请求体，在请求体中封装了<code>POST</code>请求的请求参数</p><p>步骤：</p><ol><li><p><strong>获取流对象</strong></p><ul><li><code>BufferedReader getReader()</code>：获取<strong>字符输入流</strong>，只能操作字符数据</li><li><code>ServletInputStream getInputStream()</code>：获取<strong>字节输入流</strong>，可以操作所有类型数据【在文件上传知识点后讲解】</li></ul></li><li><p>再从流对象中拿数据</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求消息体--请求参数</span>        <span class="token comment">//1.获取字符流</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.读取数据</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-request其他功能"><a href="#5-4-request其他功能" class="headerlink" title="5.4 request其他功能"></a>5.4 request其他功能</h2><h3 id="5-4-1-获取请求参数"><a href="#5-4-1-获取请求参数" class="headerlink" title="5.4.1 获取请求参数"></a>5.4.1 获取请求参数</h3><p><strong>获取请求参数</strong>通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</p><ul><li><code>String getParameter(String name)</code>：根据参数名称获取参数值    <code>username=zs&amp;password=123</code></li><li><code>String[] getParameterValues(String name)</code>：根据参数名称获取参数值的数组【多用于复选框】  <code>hobby=xx&amp;hobby=game</code></li><li><code>Enumeration&lt;String&gt; getParameterNames()</code>：获取所有请求的参数名称</li><li><code>Map&lt;String,String[]&gt; getParameterMap()</code>：获取所有参数的map集合</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/requestDemo6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//post 获取请求参数</span>        <span class="token comment">//根据参数名称获取参数值</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//根据参数名称获取参数值的数组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取所有请求的参数名称</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parameterNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取所有参数的map集合</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//遍历</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keyset <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> keyset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//获取键获取值</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//get 获取请求参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[注]<strong>中文乱码问题</strong>：</p><ul><li><code>get</code>方式：<code>tomcat 8</code> 已经将<code>get</code>方式乱码问题解决了</li><li><code>post</code>方式：会乱码<ul><li>解决：在获取参数前，设置<code>request</code>的编码<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ul></blockquote><h3 id="5-4-2-请求转发"><a href="#5-4-2-请求转发" class="headerlink" title="5.4.2 请求转发"></a>5.4.2 请求转发</h3><p>一种在<strong>服务器内部</strong>的资源跳转方式。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220809121511246.png" alt="image-20220809121511246"></p><p>步骤：</p><ul><li><p>通过<code>request</code>对象<strong>获取请求转发器对象</strong>：<code>RequestDispatcher getRequestDispatcher(String path)</code></p></li><li><p>使用<code>RequestDispatcher</code>对象来进行转发：<code>forward(ServletRequest request, ServletResponse response)</code></p></li></ul><p>特点：</p><ul><li><p>浏览器地址栏路径不发生变化</p></li><li><p>只能转发到当前服务器内部资源中</p></li><li><p>转发是一次请求</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/RequestDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo8888被访问了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转发到demo1资源</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/RequestDemo1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220809122505641.png" alt="image-20220809122505641"></p><h3 id="5-4-3-共享数据"><a href="#5-4-3-共享数据" class="headerlink" title="5.4.3 共享数据"></a>5.4.3 共享数据</h3><ul><li>域对象：<strong>一个有作用范围的对象，可以在范围内共享数据</strong></li><li><code>request</code>域：代表一次请求的范围，一般<strong>用于请求转发的多个资源中共享数据</strong></li><li>方法：<code>request.xx</code></li></ul><ol><li><code>void setAttribute(String name,Object obj)</code>：存储数据</li><li><code>Object getAttitude(String name)</code>：通过键获取值</li><li><code>void removeAttribute(String name)</code>：通过键移除键值对</li></ol><h3 id="5-4-4-获取ServletContext"><a href="#5-4-4-获取ServletContext" class="headerlink" title="5.4.4 获取ServletContext"></a>5.4.4 获取ServletContext</h3><ul><li><code>ServletContext getServletContext()</code></li></ul><p><code>ServletContext</code>对象的功能将在下节讲解。</p><h1 id="六、案例：用户登录"><a href="#六、案例：用户登录" class="headerlink" title="六、案例：用户登录"></a>六、案例：用户登录</h1><h2 id="6-1-用户登录案例需求"><a href="#6-1-用户登录案例需求" class="headerlink" title="6.1 用户登录案例需求"></a>6.1 用户登录案例需求</h2><p>1.编写<code>login.html</code>登录页面    <code>username &amp; password</code> 两个输入框</p><p>2.使用<code>Druid</code>数据库连接池技术,操作<code>mysql</code>，day14数据库中user表</p><p>3.使用<code>JdbcTemplate</code>技术封装<code>JDBC</code></p><p>4.登录成功跳转到<code>SuccessServlet</code>展示：登录成功！用户名,欢迎您</p><p>5.登录失败跳转到<code>FailServlet</code>展示：登录失败，用户名或密码错误</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220809165727080.png" alt="image-20220809165727080"></p><h2 id="6-2-开发步骤"><a href="#6-2-开发步骤" class="headerlink" title="6.2 开发步骤"></a>6.2 开发步骤</h2><h3 id="6-2-1-创建项目和数据库环境"><a href="#6-2-1-创建项目和数据库环境" class="headerlink" title="6.2.1 创建项目和数据库环境"></a>6.2.1 创建项目和数据库环境</h3><ol><li><p>创建项目，导入<code>html</code>页面，配置文件，<code>jar</code>包</p><blockquote><p>注意：</p><ul><li>需使用<code>maven</code>框架创建项目！</li><li>项目结构如下，需注意<code>druid.properties</code>配置文件需放在<code>resources</code>文件夹下。</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220810004930906.png" alt="image-20220810004930906"></p></blockquote></li><li><p>创建数据库环境</p></li></ol><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220809172709396.png" alt="image-20220809172709396"></p><h3 id="6-2-2-创建类User"><a href="#6-2-2-创建类User" class="headerlink" title="6.2.2 创建类User"></a>6.2.2 创建类User</h3><p>创建类<code>User</code>，并提供<code>getter</code>和<code>setter</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-3-编写JDBC工具类"><a href="#6-2-3-编写JDBC工具类" class="headerlink" title="6.2.3 编写JDBC工具类"></a>6.2.3 编写JDBC工具类</h3><p>使用<code>Durid</code>连接池。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * JDBC工具类，使用Druid连接池 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.加载配置文件</span>            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//使用ClassLoader加载配置文件，获取字节输入流</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.初始化连接池对象</span>            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取连接池对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取连接Connection对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-创建UserLogin类，提供login方法"><a href="#6-2-4-创建UserLogin类，提供login方法" class="headerlink" title="6.2.4 创建UserLogin类，提供login方法"></a>6.2.4 创建UserLogin类，提供login方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">DataAccessException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BeanPropertyRowMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明JDBCTemplate对象共用</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 登录方法     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.编写sql</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span>            <span class="token comment">//2.调用query方法</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//记录日志</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-5-编写LoginServlet类"><a href="#6-2-5-编写LoginServlet类" class="headerlink" title="6.2.5 编写LoginServlet类"></a>6.2.5 编写LoginServlet类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.设置编码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取请求参数</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.封装user对象</span>        <span class="token class-name">User</span> loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginUser<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        loginUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.调用UserLogin的login方法</span>        <span class="token class-name">UserLogin</span> userLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userLogin<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//查询到的user</span>        <span class="token comment">//5.判断user</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//登录失败</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//登录成功</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//存储数据,键为"user",值为user对象</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/successServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-6-编写FailServlet和SuccessServlet类"><a href="#6-2-6-编写FailServlet和SuccessServlet类" class="headerlink" title="6.2.6 编写FailServlet和SuccessServlet类"></a>6.2.6 编写FailServlet和SuccessServlet类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/successServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuccessServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取request域中共享的user对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给页面写一句话</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment">//防止空指针异常</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//设置编码</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"欢迎您"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//给页面写一句话</span>        <span class="token comment">//设置编码</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录失败！用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【备注】login.html中form表单的action路径的写法：<strong>虚拟目录+Servlet的资源路径</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/loginServlet"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>        用户名<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>        密码<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登录"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-7-演示"><a href="#6-2-7-演示" class="headerlink" title="6.2.7 演示"></a>6.2.7 演示</h3><p>输入正确：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220810005553417.png" alt="image-20220810005553417"></p><p>输入错误：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220810005533641.png" alt="image-20220810005533641"></p><h3 id="6-2-8-改进：BeanUtils"><a href="#6-2-8-改进：BeanUtils" class="headerlink" title="6.2.8 改进：BeanUtils"></a>6.2.8 改进：BeanUtils</h3><p><code>BeanUtils</code>工具类，简化数据封装，用于封装<code>JavaBean</code>的。</p><p>[1]<code>JavaBean</code>是标准的<code>Java</code>类，可以用于封装数据。其需要满足：</p><ul><li>类必须被<code>public</code>修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用<code>private</code>修饰</li><li>提供公共的<code>setter</code>和<code>getter</code>方法</li></ul><p>[2]区分：</p><ul><li><p>成员变量</p></li><li><p>属性：<code>setter</code>和<code>getter</code>方法截取后的产物</p><ul><li>例如：<code>getUsername()</code> —&gt; <code>Username</code> —&gt; <code>username</code></li></ul></li></ul><p>[3]方法：</p><ul><li><p>setProperty()</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220810115832045.png" alt="image-20220810115832045"></p><p>操作的是<strong>属性</strong>。</p></li><li><p>getProperty()</p></li><li>populate(Object obj , Map map)：将<code>map</code>集合的<strong>键值对信息</strong>，封装到对应的<code>JavaBean</code>对象中<ul><li>把键作为属性的名称，把值作为<code>JavaBean</code>对应属性的值</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//2.获取请求参数,map右侧是字符串类型的数组,以解决表单中有多个name值一样的项</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.创建User对象</span><span class="token class-name">User</span> loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//应选择apache的</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、HTTP响应消息"><a href="#七、HTTP响应消息" class="headerlink" title="七、HTTP响应消息"></a>七、HTTP响应消息</h1><h2 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h2><p>[1]<strong>请求消息</strong>：客户端发送给服务器端的数据</p><p>数据格式：</p><ol><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ol><p>[2]<strong>响应消息</strong>：服务器端发送给客户端的数据</p><h2 id="7-2-响应消息数据格式"><a href="#7-2-响应消息数据格式" class="headerlink" title="7.2 响应消息数据格式"></a>7.2 响应消息数据格式</h2><h3 id="7-2-1-响应行"><a href="#7-2-1-响应行" class="headerlink" title="7.2.1 响应行"></a>7.2.1 响应行</h3><p>格式：<strong>协议/版本 响应状态码 状态码描述</strong></p><p><strong>响应状态码</strong>：服务器告诉客户端浏览器本次请求和响应的一个状态。</p><p>下面介绍响应状态码。</p><p>状态码都是<code>3</code>位数字，其分类有：</p><ul><li><p><code>1xx</code>：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送<code>1xx</code>多状态码</p></li><li><p><code>2xx</code>：成功。代表：<code>200</code></p></li><li><p><code>3xx</code>：<strong>重定向</strong>。代表：<code>302</code>(重定向)，<code>304</code>(<strong>访问缓存</strong>)</p></li><li><p><code>4xx</code>：客户端错误。代表有：</p><ul><li><code>404</code>：请求路径没有对应的资源</li><li><code>405</code>：请求方式没有对应的<code>doXXX</code>方法</li></ul></li><li><p><code>5xx</code>：服务器端错误。代表：<code>500</code>(服务器内部出现异常)</p></li></ul><blockquote><p>重定向示意：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220810165524184.png" alt="重定向"></p></blockquote><h3 id="7-2-2-响应头"><a href="#7-2-2-响应头" class="headerlink" title="7.2.2 响应头"></a>7.2.2 响应头</h3><p>格式：<strong>头名称 : 值</strong></p><p>常见的响应头：</p><ol><li><code>Content-Type</code>：服务器告诉客户端本次响应体数据格式以及编码格式<ul><li><code>Content-Type: text/html;charset=UTF-8</code></li></ul></li><li><code>Content-disposition</code>：服务器告诉客户端以什么格式打开响应体数据。值：<ul><li><code>in-line</code>：默认值,在当前页面内打开</li><li><code>attachment;filename=xxx</code>：以附件形式打开响应体。文件下载</li></ul></li></ol><h3 id="7-2-3-响应空行和响应体"><a href="#7-2-3-响应空行和响应体" class="headerlink" title="7.2.3 响应空行和响应体"></a>7.2.3 响应空行和响应体</h3><ol><li>响应空行</li><li>响应体：传输的数据</li></ol><p><strong>响应字符串格式</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">HTTP/1.1 200 OKContent-Type: text/html;charset=UTF-8Content-Length: 101Date: Wed, 06 Jun 2018 07:08:42 GMT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>hello , response<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-Response对象"><a href="#7-3-Response对象" class="headerlink" title="7.3 Response对象"></a>7.3 Response对象</h2><p>功能：<strong>设置响应消息</strong></p><p>​    1. 设置响应行</p><ul><li>格式：<code>HTTP/1.1 200 ok</code></li><li>设置状态码：<code>setStatus(int sc)</code> </li></ul><ol><li><p>设置响应头：<code>setHeader(String name, String value)</code> </p></li><li><p>设置响应体：使用步骤是：</p><ol><li><p>获取输出流</p><ul><li><p><strong>字符输出流</strong>：<code>PrintWriter getWriter()</code></p></li><li><p><strong>字节输出流</strong>：<code>ServletOutputStream getOutputStream()</code></p></li></ul></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li></ol></li></ol><h2 id="7-4-路径"><a href="#7-4-路径" class="headerlink" title="7.4 路径"></a>7.4 路径</h2><p>路径分类：</p><ol><li><p><strong>相对路径</strong>：通过相对路径不可以确定唯一资源</p><ul><li><p>如：<code>./index.html</code></p></li><li><p>不以<code>/</code>开头，以<code>.</code>开头路径</p></li><li>规则：找到当前资源和目标资源之间的相对位置关系<ul><li><code>./</code>：当前目录</li><li><code>../</code>：后退一级目录</li></ul></li></ul></li><li><p>绝对路径：通过绝对路径可以确定唯一资源</p></li></ol><ul><li>如：<code>http://localhost/day15/responseDemo2</code>        <code>/day15/responseDemo2</code></li><li><p>以<code>/</code>开头的路径</p></li><li><p>规则：判断定义的路径是给谁用的？<strong>判断请求将来从哪儿发出</strong></p><ul><li>给<strong>客户端浏览器</strong>使用：需要<strong>加虚拟目录</strong>(项目的访问路径)<ul><li>建议虚拟目录动态获取：<code>request.getContextPath()</code>，然后进行字符串拼接</li><li><code>&lt;a&gt;</code> ，<code>&lt;form&gt;</code>，重定向…</li></ul></li><li>给<strong>服务器</strong>使用：不需要加虚拟目录<ul><li>转发路径</li></ul></li></ul></li></ul><h2 id="7-5-案例解析"><a href="#7-5-案例解析" class="headerlink" title="7.5 案例解析"></a>7.5 案例解析</h2><h3 id="7-5-1-完成重定向"><a href="#7-5-1-完成重定向" class="headerlink" title="7.5.1 完成重定向"></a>7.5.1 完成重定向</h3><p>重定向是<strong>资源跳转的方式</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/responseDemo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo1......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//访问/responseDemo1，会自动跳转/responseDemo2资源</span>        <span class="token comment">//1. 访问状态码为302</span>        <span class="token comment">//response.setStatus(302);</span>        <span class="token comment">//2. 设置响应头location</span>        <span class="token comment">//response.setHeader("location","/responseDemo2");</span>        <span class="token comment">//简单的重定向方法</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>redirect</code> 和 <code>forward</code> 的区别：</p><ul><li><p>重定向的特点：<code>redirect</code></p><ol><li>地址栏发生变化</li><li>重定向<strong>可以访问其他站点(服务器)的资源</strong></li><li>重定向是<strong>两次请求</strong>。不能使用<code>request</code>对象来共享数据</li></ol></li><li><p>转发的特点：<code>forward</code></p><ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用<code>request</code>对象来共享数据</li></ol></li></ul><h3 id="7-5-2-输出字符数据"><a href="#7-5-2-输出字符数据" class="headerlink" title="7.5.2 输出字符数据"></a>7.5.2 输出字符数据</h3><p>服务器输出字符数据到浏览器的步骤：</p><ol><li>获取<strong>字符输出流</strong></li><li>输出数据</li></ol><p>注：乱码问题：</p><ol><li><code>PrintWriter pw = response.getWriter();</code>     获取的流的默认编码是<code>ISO-8859-1</code></li><li>设置该流的默认编码</li><li>告诉浏览器响应体使用的编码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单的形式，设置编码，是在获取流之前设置</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/responseDemo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 获取字符输出流</span>        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 输出数据</span>        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>hello response&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220811213819185.png" alt="image-20220811213819185"></p><h3 id="7-5-3-输出字节数据"><a href="#7-5-3-输出字节数据" class="headerlink" title="7.5.3 输出字节数据"></a>7.5.3 输出字节数据</h3><p>服务器输出字节数据到浏览器</p><p>步骤：</p><ol><li>获取字节输出流</li><li>输出数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.获取字节输出流</span><span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.输出数据</span>sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-4-验证码"><a href="#7-5-4-验证码" class="headerlink" title="7.5.4 验证码"></a>7.5.4 验证码</h3><ol><li>本质：<strong>图片</strong></li><li>目的：防止恶意表单注册</li></ol><p><strong>验证码书写</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token class-name">ImageIO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferedImage</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/checkCodeServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckCodeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment">//1.创建一对象，在内存中图片(验证码图片对象)</span>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token class-name">BufferedImage</span><span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.美化图片</span>        <span class="token comment">//2.1 填充背景色</span>        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画笔对象</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>PINK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置画笔颜色</span>        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2画边框</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span><span class="token punctuation">;</span>        <span class="token comment">//生成随机角标</span>        <span class="token class-name">Random</span> ran <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取字符</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机字符</span>            <span class="token comment">//2.3写验证码</span>            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>width<span class="token operator">/</span><span class="token number">5</span><span class="token operator">*</span>i<span class="token punctuation">,</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.4画干扰线</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//随机生成坐标点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y1 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y2 <span class="token operator">=</span> ran<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.将图片输出到页面展示</span>        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>验证码切换</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">></span></span><span class="token class-name">Title</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>        <span class="token comment">//给超链接和图片绑定单击事件,并重新设置图片的src属性值</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取图片对象</span>            <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"checkCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//绑定单击事件</span>            img<span class="token punctuation">.</span>onclick <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//加时间戳</span>                <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"/checkCodeServlet?"</span> <span class="token operator">+</span> date<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> img2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//绑定单击事件</span>            img2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//加时间戳</span>                <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                img2<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"/checkCodeServlet?"</span> <span class="token operator">+</span> date<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>img id<span class="token operator">=</span><span class="token string">"checkCode"</span> src<span class="token operator">=</span><span class="token string">"/checkCodeServlet"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"change"</span> href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>看不清<span class="token operator">?</span>换一张<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、ServletContext对象"><a href="#八、ServletContext对象" class="headerlink" title="八、ServletContext对象"></a>八、ServletContext对象</h1><h2 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h2><p>代表<strong>整个<code>web</code>应用</strong>，可以和<strong>程序的容器(服务器)</strong>来通信</p><h2 id="8-2-获取"><a href="#8-2-获取" class="headerlink" title="8.2 获取"></a>8.2 获取</h2><ol><li><p>通过<code>request</code>对象获取      <code>request.getServletContext();</code></p></li><li><p>通过<code>HttpServlet</code>获取     <code>this.getServletContext();</code></p></li></ol><h2 id="8-3-功能"><a href="#8-3-功能" class="headerlink" title="8.3 功能"></a>8.3 功能</h2><p>[1] <strong>获取<code>MIME</code>类型</strong>：</p><ul><li><code>MIME</code>类型：在互联网通信过程中定义的一种文件数据类型<ul><li>格式： 大类型/小类型   <code>text/html</code>,<code>image/jpeg</code></li><li>获取：<code>String getMimeType(String file)</code>  </li></ul></li></ul><p>[2]<strong>域对象：共享数据</strong>【非必要不用】</p><ul><li><p><code>ServletContext</code>对象范围：所有用户所有请求的数据</p><ol><li><code>setAttribute(String name,Object value)</code></li><li><code>getAttribute(String name)</code></li><li><code>removeAttribute(String name)</code></li></ol></li></ul><p>[3]<strong>获取文件的真实(服务器)路径</strong>：</p><p>方法：<code>String getRealPath(String path)</code>  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//web目录下资源访问</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//WEB-INF目录下的资源访问</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//src目录下的资源访问</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-案例：文件下载"><a href="#8-4-案例：文件下载" class="headerlink" title="8.4 案例：文件下载"></a>8.4 案例：文件下载</h2><p>文件下载需求：</p><pre><code>1. 页面显示超链接2. 点击超链接后弹出下载提示框</code></pre><p>​    3. 完成图片文件下载</p><p>分析：</p><pre><code>1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求1. 任何资源都必须弹出下载提示框</code></pre><ol><li>使用响应头设置资源的打开方式：<code>content-disposition:attachment;filename=xxx</code></li></ol><p>步骤：</p><ol><li><p>定义页面，编辑超链接<code>href</code>属性，指向<code>Servlet</code>，传递资源名称<code>filename</code></p></li><li><p>定义<code>Servlet</code></p><ul><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定<code>response</code>的响应头： <code>content-disposition:attachment;filename=xxx</code></li></ul></li><li>将数据写出到<code>response</code>输出流</li></ol><p><code>download.html</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/img/2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/1.avi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/downloadServlet?filename=2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/downloadServlet?filename=1.avi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DownloadServlet.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/downloadServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 获取请求参数，文件名称</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 使用字节输入流加载文件进内存</span>        <span class="token comment">//2.1 找到文件服务器路径</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/img/"</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2 用字节流关联</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 设置response的响应头</span>        <span class="token comment">//3.1 设置响应头类型:content-type</span>        <span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取文件的mime类型</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.2 设置响应头打开方式:content-disposition</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 将输入流的数据写出到输出流中</span>        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：中文文件问题的解决思路：</p><ol><li><p>获取客户端使用的浏览器版本信息</p></li><li><p>根据不同的版本信息，设置<code>filename</code>的编码方式不同(<code>URL</code>,<code>BASE64</code>等)</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.获取user-agent请求头(获取浏览器版本信息)</span><span class="token class-name">String</span> agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用工具类方法编码文件名即可</span>filename <span class="token operator">=</span> <span class="token class-name">DownLoadUtils</span><span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.基础算法</title>
      <link href="/2022/08/13/suan-fa-01-ji-chu-suan-fa/"/>
      <url>/2022/08/13/suan-fa-01-ji-chu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、排序算法"><a href="#一、排序算法" class="headerlink" title="一、排序算法"></a>一、排序算法</h1><h2 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h2><ul><li><strong>确定分界点x</strong>：<code>q[1]</code>、<code>q[(1+r)/2]</code>、<code>q[r]</code>、随机</li><li><strong>调整区间</strong>：保证所有小于等于x的数在x的左区间，大于等于x的数在x的右区间</li><li><strong>递归处理左右两段</strong></li></ul><p>调整区间可实现的方法：</p><p><strong>方法1</strong></p><ul><li>开额外的数组<code>a[]</code>、<code>b[]</code></li><li>扫描<code>q[1-r]</code><ul><li>当$q[i]\leq x$时，将<code>x</code>插入到<code>a[]</code></li><li>当$q[i]\geq x$时，将<code>x</code>插入到<code>b[]</code></li></ul></li><li>分别将<code>a[]</code>、<code>b[]</code>中的数放在<code>q</code>中</li></ul><p><strong>方法2</strong></p><p><code>i</code>、<code>j</code>指针分别指向第一个和末尾一个，并分别向右向左移动</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//判边界</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当数据经过加强时,应取区间中点x = a[(l + r) / 2]或随机点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> i <span class="token operator">++</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j <span class="token operator">--</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h2><p>采用<strong>分治</strong>的思想。</p><ul><li><strong>确定分界点</strong>：<code>mid=(l+r)/2</code></li><li><strong>递归排序</strong><code>left</code>、<code>right</code></li><li><strong>归并，合二为一</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">++</span> <span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、二分算法"><a href="#二、二分算法" class="headerlink" title="二、二分算法"></a>二、二分算法</h1><h2 id="2-1-整数二分算法"><a href="#2-1-整数二分算法" class="headerlink" title="2.1 整数二分算法"></a>2.1 整数二分算法</h2><p>检查一个数的范围是否满足某种性质，通过二分算法将一列数分为红色区间（满足性质）和绿色区间（不满足性质），找到<strong>边界</strong>。</p><p><strong>二分并不是找某个数，而是找到符合条件的最小的数或最大的数。</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220720214820406.png" alt="image-20220720214820406"></p><p><strong>Case1</strong>：二分红色区间分界点<code>mid=(l+r+1)/2</code>，<code>if(check(mid))</code>：&#x2F;&#x2F;检查<code>mid</code>是否满足某种性质</p><ul><li>若为<code>true</code>，则<code>mid</code>取在红色区间内，答案（区间）更新为<code>[mid,r]</code>，<code>l=mid</code>；</li><li>若为<code>false</code>，则<code>mid</code>取在绿色区间内，答案（区间）更新为<code>[l,mid-1]</code>，<code>r=mid-1</code>。</li></ul><p><strong>Case2</strong>：二分绿色区间分界点<code>mid=(l+r)/2</code>，<code>if(check(mid))</code>：</p><ul><li>若为<code>true</code>，则<code>mid</code>取在红色区间内，答案（区间）更新为<code>[1,mid]</code>，<code>r=mid</code>；</li><li>若为<code>false</code>，则<code>mid</code>取在绿色区间内，答案（区间）更新为<code>[mid+1,r]</code>，<code>l=mid+1</code>。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100100</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1 -1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//左边都满足&lt;=x,右边不满足</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-浮点数二分算法"><a href="#2-2-浮点数二分算法" class="headerlink" title="2.2 浮点数二分算法"></a>2.2 浮点数二分算法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span> <span class="token comment">// 检查x是否满足某种性质</span><span class="token keyword">double</span> <span class="token function">bsearch_3</span><span class="token punctuation">(</span><span class="token keyword">double</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span>   <span class="token comment">// eps 表示精度，取决于题目对精度的要求</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> eps<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> <span class="token number">1e-8</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">*</span> mid<span class="token operator">>=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、高精度"><a href="#三、高精度" class="headerlink" title="三、高精度"></a>三、高精度</h1><p>大整数通过<strong>数组</strong>存储，数组每一位存一位数字，<strong>小端形式</strong>。</p><h2 id="3-1-高精度加法"><a href="#3-1-高精度加法" class="headerlink" title="3.1 高精度加法"></a>3.1 高精度加法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C = A + B, A >= 0, B >= 0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【知识点】<strong>C++ vector</strong>：</p><p>vector是一个可以不用再初始化就必须制定大小的变长数组。</p><ul><li><strong>初始化</strong>：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>father<span class="token operator">></span> v2<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v3<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">//注意空格。这里相当于二维数组int a[n][n];</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//列表初始化,注意使用的是花括号</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"hi"</span><span class="token punctuation">,</span><span class="token string">"my"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"lee"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v7</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化为-1,-1,-1,-1,-1。第一个参数是数目，第二个参数是要初始化的值</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">v8</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v9</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认初始化为0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v10</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认初始化为空字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>添加元素</strong>：</li></ul><p>通过**push_back()**添加元素，该元素添加到vector数组的末尾。</p><ul><li><strong>访问vector中的元素</strong>：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用迭代器来访问元素：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"hi"</span><span class="token punctuation">,</span><span class="token string">"my"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"lee"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> v6<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> v6<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//下面两种方法都都可以检查迭代器是否为空</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>插入元素</strong>：</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/d5c3f1c28583919e9686dce526d94866.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> demo<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//第一种格式用法</span>    demo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;1,3,2&#125;</span>     <span class="token comment">//第二种格式用法</span>    demo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;1,3,2,5,5&#125;</span>     <span class="token comment">//第三种格式用法</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">></span>test<span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;1,3,2,5,5,7,8,9&#125;</span>     <span class="token comment">//第四种格式用法</span>    demo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;1,3,2,5,5,7,8,9,10,11&#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> demo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> demo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>删除元素</strong>：</li></ul><p>通过<strong>pop_back()</strong> 方法删除元素。该方法删除最后一个元素，若需删除里面的一个元素，可以先交换其与最后一个元素的位置，再进行元素删除。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为了方便计算，让A中保存较长的数字， B中保存较短的数字</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span><span class="token comment">//保存结果的数组</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//进位，开始时是0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token comment">//依次计算每一位</span>    <span class="token punctuation">&#123;</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//加上 A 的第 i 位上的数字</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//加上 B 的第 i 位上的数字</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//C 中放入结果</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//t 更新成进位</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后如果进位上有数，放进结果数组</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token comment">//返回结果</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token comment">//以字符串形式保存输入的两个整数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span><span class="token comment">//保存两个整数的数组</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span><span class="token comment">//接收输入</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//倒序存储第一个数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//倒序存储第二个数</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用加和函数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//倒序输出C中的数字</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-高精度减法"><a href="#3-2-高精度减法" class="headerlink" title="3.2 高精度减法"></a>3.2 高精度减法</h2><p>$A_{3}A_{2}A_{1}A_{0}-B_{2}B_{1}B_{0}$</p><p>对每位进行计算：$A_{i}-B_{i}-t$，有：</p><ul><li>$\geq 0$，$A_{i}-B_{i}-t$</li><li>$&lt;0$，借一位并补上10，$A_{i}-B_{i}+10-t$</li></ul><p>计算<code>A-B</code>，有：</p><ul><li>当$A\geq B$时，<code>A-B</code></li><li>当$A&lt;B$时，<code>-(B-A)</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C = A - B, 满足A >= B, A >= 0, B >= 0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//判断是否有 A >= B</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//C = A - B</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除前导0</span><span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span><span class="token comment">//a = "123456"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//A = [6,5,4,3,2,1]</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-高精度乘低精度"><a href="#3-3-高精度乘低精度" class="headerlink" title="3.3 高精度乘低精度"></a>3.3 高精度乘低精度</h2><p><strong>手算模拟</strong>：每个<strong>被乘数位</strong>与B的整体进行<strong>相乘</strong></p><p>A 1 2 3</p><p>B    1 2</p><hr><p>$C_{3}C_{2}C_{1}C_{0}$</p><p>每位分别是：</p><p>$C_{0}&#x3D;(3*12)%10&#x3D;6$</p><p>$t_{1}&#x3D;(3*12)&#x2F;10&#x3D;3$</p><p>$C_{1}&#x3D;(2*12+t_{1})%10&#x3D;7$</p><p>$t_{2}&#x3D;2$</p><p>$C_{2}&#x3D;(1*12+t_{2})%10&#x3D;4$</p><p>$t_{3}&#x3D;1$</p><p>$C_{3}&#x3D;1$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// C = A * b, A >= 0, b >= 0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除前导0</span><span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-高精度除以低精度"><a href="#3-4-高精度除以低精度" class="headerlink" title="3.4 高精度除以低精度"></a>3.4 高精度除以低精度</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// A / b = C ... r, A >= 0, b > 0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">%=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//A / b,商是c,余数是r</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span><span class="token comment">//商</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//除法从最高位开始,为了统一加减乘,需要逆序</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">%=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//algorithm头文件中的函数</span><span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除前导0</span><span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、前缀和"><a href="#四、前缀和" class="headerlink" title="四、前缀和"></a>四、前缀和</h1><h2 id="4-1-一维前缀和"><a href="#4-1-一维前缀和" class="headerlink" title="4.1 一维前缀和"></a>4.1 一维前缀和</h2><p>前缀和表示为：$S_{i}&#x3D;a_{1}+a_{2}+…+a_{i}$（<code>S[0]=0</code>）</p><ul><li>**求$S_{i}$**：<code>for(i = 1; i &lt;= n; i++) &#123;S[i] = S[i-1] + a[i];&#125;</code></li><li><strong>作用</strong>：范围为<code>[l,r]</code>数组的和，若没有前缀和数组，时间复杂度为<code>O(n)</code>；运用前缀和数组，可以用<code>S[r]-S[l-1]</code>进行计算，时间复杂度为<code>O(1)</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和的初始化</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间和的计算</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-二维前缀和"><a href="#4-2-二维前缀和" class="headerlink" title="4.2 二维前缀和"></a>4.2 二维前缀和</h2><p><strong>容斥原理</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722160459614.png" alt="image-20220722160459614"></p><ul><li><p><code>S[i, j]</code> &#x3D; 第<code>i</code>行<code>j</code>列格子左上部分所有元素的和</p></li><li><p>以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵的和为：</p><p><code>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</code></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//求前缀和</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//算子矩阵的和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、差分"><a href="#五、差分" class="headerlink" title="五、差分"></a>五、差分</h1><h2 id="5-1-一维差分"><a href="#5-1-一维差分" class="headerlink" title="5.1 一维差分"></a>5.1 一维差分</h2><p>有$a_{1},a_{2},…,a_{n}$[前缀和]，构造$b_{1},b_{2},…,b_{n}$[差分]，使得$a_{i}&#x3D;b_{1}+b_{2}+…+b_{i}$，则有：</p><p>$\begin{cases} b_{1}&#x3D;a_{1} \ b_{2}&#x3D; a_{2}-a_{1} \ b_{3}&#x3D; a_{3}-a_{2} \ … \ b_{n}&#x3D; a_{n}-a_{n-1} \end{cases}$</p><ul><li><code>O(n)</code>时间由<code>B</code>数组得到<code>A</code>数组</li><li>给<code>A</code>数组区间<code>[l, r]</code>中的每个数加上<code>c</code>：<code>B[l] += c</code>, <code>B[r + 1] -= c</code></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722162509157.png" alt="image-20220722162509157"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>b<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将b数组读入值</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和得到"新的a[i]"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-二维差分"><a href="#5-2-二维差分" class="headerlink" title="5.2 二维差分"></a>5.2 二维差分</h2><p>设<code>a[i][j]</code>是<code>b[i][j]</code>的前缀和。</p><p>给以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵中的所有元素加上<code>c</code>：<br><code>S[x1, y1] += c</code>, <code>S[x2 + 1, y1] -= c</code>, <code>S[x1, y2 + 1] -= c</code>, <code>S[x2 + 1, y2 + 1] += c</code>。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722171706570.png" alt="image-20220722171706570"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 插入到差分矩阵中</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token comment">// 读取数据 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c<span class="token punctuation">;</span>            cin <span class="token operator">>></span> c<span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取a[i][j]的值</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 处理插入</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2 <span class="token operator">>></span> c<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 还原矩阵，输出数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、双指针算法"><a href="#六、双指针算法" class="headerlink" title="六、双指针算法"></a>六、双指针算法</h1><p><strong>Case1：</strong>对于两个序列，维护某种次序：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722222255815.png" alt="image-20220722222255815"><br>    如在归并排序中合并两个有序序列的操作：两个指针分别位于数组相应的位置，依次向右遍历，当数组执行到尾部，合并完成。</p><p><strong>Case2：</strong>对于一个序列，用两个指针维护一段区间：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722222346120.png" alt="image-20220722222346120"></p><p>​如快排，两个指针分别位于左右两端，依次中间比较交换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//寻找i，j的单调关系</span>    <span class="token comment">//每道题的具体逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>核心思想</strong>：将<code>for(int i = 0;i &lt; n;i++) for(int j = 0;j &lt; n;j++)</code>朴素算法的时间复杂度优化到<code>O(n)</code>。</p><p>[<strong>例：给定一个字符串，进行分割</strong>]</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这道题具体逻辑</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>i <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//双指针算法:O(n)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//j往左最远能到什么地方</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【题解】</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">--</span> <span class="token punctuation">;</span>            j <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> j <span class="token operator">+</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、位运算"><a href="#七、位运算" class="headerlink" title="七、位运算"></a>七、位运算</h1><h2 id="7-1-n的二进制表示第k位"><a href="#7-1-n的二进制表示第k位" class="headerlink" title="7.1 n的二进制表示第k位"></a>7.1 n的二进制表示第k位</h2><p><code>n</code>的二进制表示中第<code>k</code>位是几($k&#x3D;{0,1,2,…,n}$)</p><ul><li>先把第<code>k</code>位移到最后一位，<code>n&gt;&gt;k</code></li><li>看个位是几，<code>x &amp;&amp; 1</code></li></ul><p>即<code>n&gt;&gt;k &amp; 1</code></p><h2 id="7-2-lowbit"><a href="#7-2-lowbit" class="headerlink" title="7.2 lowbit"></a>7.2 lowbit</h2><p><code>lowbit(x)</code>：返回<code>x</code>的最后一位<code>1</code>是多少，是树状数组的基本操作。</p><p><code>x=1010</code>，<code>lowbit(x)=10</code></p><p><code>x=101000</code>，<code>lowbit(x)=1000</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>cin <span class="token operator">>></span> x<span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//每次减去x的最后一位1</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、离散化"><a href="#八、离散化" class="headerlink" title="八、离散化"></a>八、离散化</h1><p>值域$0-10^{9}$，个数$10^{5}$</p><p><code>a[]</code>:1、3、100、2000、500000映射为0、1、2、3、4。</p><p>问题：</p><ul><li><code>a[]</code>中可能有重复元素—–&gt;<strong>去重</strong></li><li>如何算出<code>x</code>离散化后的值—–&gt;<strong>二分</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> alls<span class="token punctuation">;</span> <span class="token comment">// 存储所有待离散化的值</span><span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将所有值排序</span>alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 去掉重复元素</span><span class="token comment">// 二分求出x对应的离散化的值</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// 找到第一个大于等于x的位置</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 映射到1, 2, ...n</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">300010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> alls<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> add<span class="token punctuation">,</span> query<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> c<span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        cin <span class="token operator">>></span> l <span class="token operator">>></span> r<span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span> r<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 去重</span>    <span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理插入</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span> add<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 预处理前缀和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 处理询问</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span> query<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[注]<code>unique</code>函数实现方法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">unique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//若其为第一个元素或其与前一个元素不相同</span>         a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// a[0] - a[j-1]所有a中不重复的数</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="九、区间合并"><a href="#九、区间合并" class="headerlink" title="九、区间合并"></a>九、区间合并</h1><p><strong>按区间左端点进行排序</strong>，则区间与现有维护区间仅存在以下三种情况：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220821114923101.png" alt="区间合并"></p><ul><li><strong>Case1</strong>：现有维护区间不变</li><li><strong>Case2</strong>：<code>ed</code>更新</li><li><strong>Case3</strong>：由于按左端点进行排序，两个区间没有交集，则现有维护区间不会发生改变，可以直接放入答案中，然后将维护区间更新成现在的<code>st</code>和<code>ed</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 将所有存在交集的区间合并</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> <span class="token operator">&amp;</span>segs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>segs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> segs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所有区间排序</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span><span class="token comment">//2*10的九次方</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> seg <span class="token operator">:</span> segs<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ed <span class="token operator">&lt;</span> seg<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token comment">//第三种情况即找到新区间</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> seg<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ed <span class="token operator">=</span> seg<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> ed <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span> seg<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右端点更新</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将最后一个区间加入答案,st != -2e9防止空区间</span>    segs <span class="token operator">=</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
