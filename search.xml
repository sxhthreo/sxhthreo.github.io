<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法基础</title>
      <link href="/2022/08/13/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/13/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<div style="font-size:35px" align = "center" ><strong>算法笔记</strong></div><h1 id="【1-基础算法】"><a href="#【1-基础算法】" class="headerlink" title="【1.基础算法】"></a>【1.基础算法】</h1><h1 id="一、排序算法"><a href="#一、排序算法" class="headerlink" title="一、排序算法"></a>一、排序算法</h1><h2 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h2><ul><li><strong>确定分界点x</strong>：<code>q[1]</code>、<code>q[(1+r)/2]</code>、<code>q[r]</code>、随机</li><li><strong>调整区间</strong>：保证所有小于等于x的数在x的左区间，大于等于x的数在x的右区间</li><li><strong>递归处理左右两段</strong></li></ul><p>调整区间可实现的方法：</p><p><strong>方法1</strong></p><ul><li>开额外的数组<code>a[]</code>、<code>b[]</code></li><li>扫描<code>q[1-r]</code><ul><li>当$q[i]\leq x$时，将<code>x</code>插入到<code>a[]</code></li><li>当$q[i]\geq x$时，将<code>x</code>插入到<code>b[]</code></li></ul></li><li>分别将<code>a[]</code>、<code>b[]</code>中的数放在<code>q</code>中</li></ul><p><strong>方法2</strong></p><p><code>i</code>、<code>j</code>指针分别指向第一个和末尾一个，并分别向右向左移动</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">void quick_sort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;&#x2F;&#x2F;判边界    int x &#x3D; q[l], i &#x3D; l - 1, j &#x3D; r + 1;&#x2F;&#x2F;当数据经过加强时,应取区间中点x &#x3D; a[(l + r) &#x2F; 2]或随机点    while (i &lt; j)    &#123;        do i ++ ; while (q[i] &lt; x);        do j -- ; while (q[j] &gt; x);        if (i &lt; j) swap(q[i], q[j]);    &#125;    quick_sort(q, l, j), quick_sort(q, j + 1, r);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h2><p>采用<strong>分治</strong>的思想。</p><ul><li><strong>确定分界点</strong>：<code>mid=(l+r)/2</code></li><li><strong>递归排序</strong><code>left</code>、<code>right</code></li><li><strong>归并，合二为一</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">void merge_sort(int q[], int l, int r)&#123;    if (l &gt;&#x3D; r) return;    int mid &#x3D; l + r &gt;&gt; 1;    merge_sort(q, l, mid);    merge_sort(q, mid + 1, r);    int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1;    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)        if (q[i] &lt;&#x3D; q[j]) tmp[k++] &#x3D; q[i++];        else tmp[k++] &#x3D; q[j++];    while (i &lt;&#x3D; mid) tmp[k++] &#x3D; q[i++];    while (j &lt;&#x3D; r) tmp[k++] &#x3D; q[j++];    for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i ++, j ++ ) q[i] &#x3D; tmp[j];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、二分算法"><a href="#二、二分算法" class="headerlink" title="二、二分算法"></a>二、二分算法</h1><h2 id="2-1-整数二分算法"><a href="#2-1-整数二分算法" class="headerlink" title="2.1 整数二分算法"></a>2.1 整数二分算法</h2><p>检查一个数的范围是否满足某种性质，通过二分算法将一列数分为红色区间（满足性质）和绿色区间（不满足性质），找到<strong>边界</strong>。</p><p><strong>二分并不是找某个数，而是找到符合条件的最小的数或最大的数。</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220720214820406.png" alt="image-20220720214820406"></p><p><strong>Case1</strong>：二分红色区间分界点<code>mid=(l+r+1)/2</code>，<code>if(check(mid))</code>：&#x2F;&#x2F;检查<code>mid</code>是否满足某种性质</p><ul><li>若为<code>true</code>，则<code>mid</code>取在红色区间内，答案（区间）更新为<code>[mid,r]</code>，<code>l=mid</code>；</li><li>若为<code>false</code>，则<code>mid</code>取在绿色区间内，答案（区间）更新为<code>[l,mid-1]</code>，<code>r=mid-1</code>。</li></ul><p><strong>Case2</strong>：二分绿色区间分界点<code>mid=(l+r)/2</code>，<code>if(check(mid))</code>：</p><ul><li>若为<code>true</code>，则<code>mid</code>取在红色区间内，答案（区间）更新为<code>[1,mid]</code>，<code>r=mid</code>；</li><li>若为<code>false</code>，则<code>mid</code>取在绿色区间内，答案（区间）更新为<code>[mid+1,r]</code>，<code>l=mid+1</code>。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 100100;int n,m;int q[N];int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i &#x3D; 0; i &lt;n; i++) scanf(&quot;%d&quot;,&amp;q[i]);    while(m--)    &#123;        int x;        scanf(&quot;%d&quot;,&amp;x);        int l &#x3D; 0, r &#x3D; n - 1;        while(l &lt; r)        &#123;            int mid &#x3D; l + r &gt;&gt; 1;            if(q[mid] &gt;&#x3D; x) r &#x3D; mid;            else l &#x3D; mid + 1;        &#125;        if (q[l] !&#x3D; x) printf(&quot;-1 -1\n&quot;);        else        &#123;            printf(&quot;%d &quot;,l);            &#x2F;&#x2F;左边都满足&lt;&#x3D;x,右边不满足            int l &#x3D; 0, r &#x3D; n - 1;            while(l &lt; r)            &#123;                int mid &#x3D; l + r + 1 &gt;&gt; 1;                if(q[mid] &lt;&#x3D; x) l &#x3D; mid;                else r &#x3D; mid - 1;            &#125;            printf(&quot;%d\n&quot;,l);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-浮点数二分算法"><a href="#2-2-浮点数二分算法" class="headerlink" title="2.2 浮点数二分算法"></a>2.2 浮点数二分算法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool check(double x) &#123;&#x2F;* ... *&#x2F;&#125; &#x2F;&#x2F; 检查x是否满足某种性质double bsearch_3(double l, double r)&#123;    const double eps &#x3D; 1e-6;   &#x2F;&#x2F; eps 表示精度，取决于题目对精度的要求    while (r - l &gt; eps)    &#123;        double mid &#x3D; (l + r) &#x2F; 2;        if (check(mid)) r &#x3D; mid;        else l &#x3D; mid;    &#125;    return l;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;int main()&#123;    double x;    cin &gt;&gt; x;    double l &#x3D; -10000,r &#x3D; 10000;    while(r - l &gt; 1e-8)    &#123;        double mid &#x3D; (l + r) &#x2F;2;        if(mid * mid * mid&gt;&#x3D; x)        &#123;            r &#x3D; mid;        &#125;        else        &#123;            l &#x3D; mid;        &#125;    &#125;    printf(&quot;%lf\n&quot;,l);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、高精度"><a href="#三、高精度" class="headerlink" title="三、高精度"></a>三、高精度</h1><p>大整数通过<strong>数组</strong>存储，数组每一位存一位数字，<strong>小端形式</strong>。</p><h2 id="3-1-高精度加法"><a href="#3-1-高精度加法" class="headerlink" title="3.1 高精度加法"></a>3.1 高精度加法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A + B, A &gt;&#x3D; 0, B &gt;&#x3D; 0vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)&#123;    if (A.size() &lt; B.size()) return add(B, A);    vector&lt;int&gt; C;    int t &#x3D; 0;    for (int i &#x3D; 0; i &lt; A.size(); i ++ )    &#123;        t +&#x3D; A[i];        if (i &lt; B.size()) t +&#x3D; B[i];        C.push_back(t % 10);        t &#x2F;&#x3D; 10;    &#125;    if (t) C.push_back(t);    return C;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【知识点】<strong>C++ vector</strong>：</p><p>vector是一个可以不用再初始化就必须制定大小的变长数组。</p><ul><li><strong>初始化</strong>：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">vector&lt;int&gt; v1;vector&lt;father&gt; v2;vector&lt;string&gt; v3;vector&lt;vector&lt;int&gt; &gt;;  &#x2F;&#x2F;注意空格。这里相当于二维数组int a[n][n];vector&lt;int&gt; v5 &#x3D; &#123; 1,2,3,4,5 &#125;; &#x2F;&#x2F;列表初始化,注意使用的是花括号vector&lt;string&gt; v6 &#x3D; &#123; &quot;hi&quot;,&quot;my&quot;,&quot;name&quot;,&quot;is&quot;,&quot;lee&quot; &#125;;vector&lt;int&gt; v7(5, -1); &#x2F;&#x2F;初始化为-1,-1,-1,-1,-1。第一个参数是数目，第二个参数是要初始化的值vector&lt;string&gt; v8(3, &quot;hi&quot;);vector&lt;int&gt; v9(10); &#x2F;&#x2F;默认初始化为0vector&lt;int&gt; v10(4); &#x2F;&#x2F;默认初始化为空字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>添加元素</strong>：</li></ul><p>通过**push_back()**添加元素，该元素添加到vector数组的末尾。</p><ul><li><strong>访问vector中的元素</strong>：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">for(auto x : a)&#123;cout &lt;&lt; x &lt;&lt; endl;   &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用迭代器来访问元素：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector&lt;string&gt; v6 &#x3D; &#123; &quot;hi&quot;,&quot;my&quot;,&quot;name&quot;,&quot;is&quot;,&quot;lee&quot; &#125;;for (vector&lt;string&gt;::iterator iter &#x3D; v6.begin(); iter !&#x3D; v6.end(); iter++)&#123;cout &lt;&lt; *iter &lt;&lt; endl;&#x2F;&#x2F;下面两种方法都都可以检查迭代器是否为空cout &lt;&lt; (*iter).empty() &lt;&lt; endl;cout &lt;&lt; iter-&gt;empty() &lt;&lt; endl; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>插入元素</strong>：</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/d5c3f1c28583919e9686dce526d94866.png" alt="img"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;array&gt; using namespace std;int main()&#123;    std::vector&lt;int&gt; demo&#123;1,2&#125;;    &#x2F;&#x2F;第一种格式用法    demo.insert(demo.begin() + 1, 3);&#x2F;&#x2F;&#123;1,3,2&#125;     &#x2F;&#x2F;第二种格式用法    demo.insert(demo.end(), 2, 5);&#x2F;&#x2F;&#123;1,3,2,5,5&#125;     &#x2F;&#x2F;第三种格式用法    std::array&lt;int,3&gt;test&#123; 7,8,9 &#125;;    demo.insert(demo.end(), test.begin(), test.end());&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9&#125;     &#x2F;&#x2F;第四种格式用法    demo.insert(demo.end(), &#123; 10,11 &#125;);&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9,10,11&#125;     for (int i &#x3D; 0; i &lt; demo.size(); i++) &#123;        cout &lt;&lt; demo[i] &lt;&lt; &quot; &quot;;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>删除元素</strong>：</li></ul><p>通过<strong>pop_back()</strong> 方法删除元素。该方法删除最后一个元素，若需删除里面的一个元素，可以先交换其与最后一个元素的位置，再进行元素删除。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)&#123;    if (A.size() &lt; B.size()) return add(B, A);&#x2F;&#x2F;为了方便计算，让A中保存较长的数字， B中保存较短的数字    vector&lt;int&gt; C;&#x2F;&#x2F;保存结果的数组    int t &#x3D; 0;&#x2F;&#x2F;进位，开始时是0    for (int i &#x3D; 0; i &lt; A.size(); i ++ )&#x2F;&#x2F;依次计算每一位    &#123;        t +&#x3D; A[i];&#x2F;&#x2F;加上 A 的第 i 位上的数字        if (i &lt; B.size()) t +&#x3D; B[i];&#x2F;&#x2F;加上 B 的第 i 位上的数字        C.push_back(t % 10); &#x2F;&#x2F;C 中放入结果        t &#x2F;&#x3D; 10;&#x2F;&#x2F;t 更新成进位    &#125;    if (t) C.push_back(t);&#x2F;&#x2F;最后如果进位上有数，放进结果数组    return C;&#x2F;&#x2F;返回结果&#125;int main()&#123;    string a, b;&#x2F;&#x2F;以字符串形式保存输入的两个整数    vector&lt;int&gt; A, B;&#x2F;&#x2F;保存两个整数的数组    cin &gt;&gt; a &gt;&gt; b;&#x2F;&#x2F;接收输入    for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i -- ) A.push_back(a[i] - &#39;0&#39;);&#x2F;&#x2F;倒序存储第一个数    for (int i &#x3D; b.size() - 1; i &gt;&#x3D; 0; i -- ) B.push_back(b[i] - &#39;0&#39;);&#x2F;&#x2F;倒序存储第二个数    auto C &#x3D; add(A, B);&#x2F;&#x2F;调用加和函数    for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i -- ) cout &lt;&lt; C[i];&#x2F;&#x2F;倒序输出C中的数字    cout &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-高精度减法"><a href="#3-2-高精度减法" class="headerlink" title="3.2 高精度减法"></a>3.2 高精度减法</h2><p>$A_{3}A_{2}A_{1}A_{0}-B_{2}B_{1}B_{0}$</p><p>对每位进行计算：$A_{i}-B_{i}-t$，有：</p><ul><li>$\geq 0$，$A_{i}-B_{i}-t$</li><li>$&lt;0$，借一位并补上10，$A_{i}-B_{i}+10-t$</li></ul><p>计算<code>A-B</code>，有：</p><ul><li>当$A\geq B$时，<code>A-B</code></li><li>当$A&lt;B$时，<code>-(B-A)</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A - B, 满足A &gt;&#x3D; B, A &gt;&#x3D; 0, B &gt;&#x3D; 0vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)&#123;    vector&lt;int&gt; C;    for (int i &#x3D; 0, t &#x3D; 0; i &lt; A.size(); i ++ )    &#123;        t &#x3D; A[i] - t;        if (i &lt; B.size()) t -&#x3D; B[i];        C.push_back((t + 10) % 10);        if (t &lt; 0) t &#x3D; 1;        else t &#x3D; 0;    &#125;    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;&#x2F;&#x2F;判断是否有 A &gt;&#x3D; Bbool cmp(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B)&#123;if (A.size() !&#x3D; B.size())return A.size() &gt; B.size();for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i--)&#123;if (A[i] !&#x3D; B[i])return A[i] &gt; B[i];&#125;return true;&#125;&#x2F;&#x2F;C &#x3D; A - Bvector&lt;int&gt; sub(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B)&#123;vector&lt;int&gt; C;for (int i &#x3D; 0, t &#x3D; 0; i &lt; A.size(); i++)&#123;t &#x3D; A[i] - t;if (i &lt; B.size()) t -&#x3D; B[i];C.push_back((t + 10) % 10);if (t &lt; 0) t &#x3D; 1;else t &#x3D; 0;&#125;while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0)C.pop_back();&#x2F;&#x2F;去除前导0return C;&#125;int main()&#123;string a, b;vector&lt;int&gt; A, B;cin &gt;&gt; a &gt;&gt; b;&#x2F;&#x2F;a &#x3D; &quot;123456&quot;for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i--)&#123;A.push_back(a[i] - &#39;0&#39;); &#x2F;&#x2F;A &#x3D; [6,5,4,3,2,1]&#125;for (int i &#x3D; b.size() - 1; i &gt;&#x3D; 0; i--)&#123;B.push_back(b[i] - &#39;0&#39;);&#125;if (cmp(A, B))&#123;auto C &#x3D; sub(A, B);for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i--)&#123;cout &lt;&lt; C[i];&#125;&#125;else &#123;auto C &#x3D; sub(B, A);cout &lt;&lt; &quot;-&quot;;for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i--)&#123;cout &lt;&lt; C[i];&#125;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-高精度乘低精度"><a href="#3-3-高精度乘低精度" class="headerlink" title="3.3 高精度乘低精度"></a>3.3 高精度乘低精度</h2><p><strong>手算模拟</strong>：每个<strong>被乘数位</strong>与B的整体进行<strong>相乘</strong></p><p>A 1 2 3</p><p>B    1 2</p><hr><p>$C_{3}C_{2}C_{1}C_{0}$</p><p>每位分别是：</p><p>$C_{0}&#x3D;(3*12)%10&#x3D;6$</p><p>$t_{1}&#x3D;(3*12)&#x2F;10&#x3D;3$</p><p>$C_{1}&#x3D;(2*12+t_{1})%10&#x3D;7$</p><p>$t_{2}&#x3D;2$</p><p>$C_{2}&#x3D;(1*12+t_{2})%10&#x3D;4$</p><p>$t_{3}&#x3D;1$</p><p>$C_{3}&#x3D;1$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; C &#x3D; A * b, A &gt;&#x3D; 0, b &gt;&#x3D; 0vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)&#123;    vector&lt;int&gt; C;    int t &#x3D; 0;    for (int i &#x3D; 0; i &lt; A.size() || t; i ++ )    &#123;        if (i &lt; A.size()) t +&#x3D; A[i] * b;        C.push_back(t % 10);        t &#x2F;&#x3D; 10;    &#125;    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;vector&lt;int&gt; mul(vector&lt;int&gt;&amp; A, int b)&#123;vector&lt;int&gt; C;int t &#x3D; 0;for (int i &#x3D; 0; i &lt; A.size() || t; i++)&#123;if (i &lt; A.size()) t +&#x3D; A[i] * b;C.push_back(t % 10);t &#x2F;&#x3D; 10;&#125;while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0)C.pop_back();&#x2F;&#x2F;去除前导0return C;&#125;int main()&#123;string a;int b;cin &gt;&gt; a &gt;&gt; b;vector&lt;int&gt; A;for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i--)A.push_back(a[i] - &#39;0&#39;);auto C &#x3D; mul(A, b);for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i--)cout &lt;&lt; C[i];return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-高精度除以低精度"><a href="#3-4-高精度除以低精度" class="headerlink" title="3.4 高精度除以低精度"></a>3.4 高精度除以低精度</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; A &#x2F; b &#x3D; C ... r, A &gt;&#x3D; 0, b &gt; 0vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)&#123;    vector&lt;int&gt; C;    r &#x3D; 0;    for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i -- )    &#123;        r &#x3D; r * 10 + A[i];        C.push_back(r &#x2F; b);        r %&#x3D; b;    &#125;    reverse(C.begin(), C.end());    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;&#x2F;&#x2F;A &#x2F; b,商是c,余数是rvector&lt;int&gt; div(vector&lt;int&gt;&amp; A, int b, int&amp; r)&#123;vector&lt;int&gt; C;&#x2F;&#x2F;商r &#x3D; 0;&#x2F;&#x2F;除法从最高位开始,为了统一加减乘,需要逆序for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i--)&#123;r &#x3D; r * 10 + A[i];C.push_back(r &#x2F; b);r %&#x3D; b;&#125;reverse(C.begin(), C.end());&#x2F;&#x2F;algorithm头文件中的函数while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0)C.pop_back();&#x2F;&#x2F;去除前导0return C;&#125;int main()&#123;string a;int b;cin &gt;&gt; a &gt;&gt; b;vector&lt;int&gt; A;for (int i &#x3D; a.size() - 1; i &gt;&#x3D; 0; i--)&#123;A.push_back(a[i]-&#39;0&#39;);&#125;int r;auto C &#x3D; div(A, b, r);for (int i &#x3D; C.size() - 1; i &gt;&#x3D; 0; i--)&#123;cout &lt;&lt; C[i];&#125;cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、前缀和"><a href="#四、前缀和" class="headerlink" title="四、前缀和"></a>四、前缀和</h1><h2 id="4-1-一维前缀和"><a href="#4-1-一维前缀和" class="headerlink" title="4.1 一维前缀和"></a>4.1 一维前缀和</h2><p>前缀和表示为：$S_{i}&#x3D;a_{1}+a_{2}+…+a_{i}$（<code>S[0]=0</code>）</p><ul><li>**求$S_{i}$**：<code>for(i = 1; i &lt;= n; i++) &#123;S[i] = S[i-1] + a[i];&#125;</code></li><li><strong>作用</strong>：范围为<code>[l,r]</code>数组的和，若没有前缀和数组，时间复杂度为<code>O(n)</code>；运用前缀和数组，可以用<code>S[r]-S[l-1]</code>进行计算，时间复杂度为<code>O(1)</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int n, m;int a[N], s[N];int main()&#123;scanf(&quot;%d%d&quot;, &amp;n, &amp;m);for (int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;    scanf(&quot;%d&quot;,&amp;a[i]); &#125;for (int i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;s[i] &#x3D; s[i - 1] + a[i];&#x2F;&#x2F;前缀和的初始化&#125;while (m--)&#123;int l, r;scanf(&quot;%d%d&quot;, &amp;l, &amp;r);printf(&quot;%d\n&quot;, s[r] - s[l - 1]);&#x2F;&#x2F;区间和的计算&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-二维前缀和"><a href="#4-2-二维前缀和" class="headerlink" title="4.2 二维前缀和"></a>4.2 二维前缀和</h2><p><strong>容斥原理</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722160459614.png" alt="image-20220722160459614"></p><ul><li><p><code>S[i, j]</code> &#x3D; 第<code>i</code>行<code>j</code>列格子左上部分所有元素的和</p></li><li><p>以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵的和为：</p><p><code>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</code></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;const int N &#x3D; 1010;int n, m, q;int a[N][N], s[N][N];int main()&#123;scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);for (int i &#x3D; 1; i &lt;&#x3D; n; i++)for (int j &#x3D; 1; j &lt;&#x3D; m; j++)scanf(&quot;%d&quot;, &amp;a[i][j]);for (int i &#x3D; 1; i &lt;&#x3D; n; i++)for (int j &#x3D; 1; j &lt;&#x3D; m; j++)&#x2F;&#x2F;求前缀和s[i][j] &#x3D; s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];while (q--)&#123;int x1, y1, x2, y2;scanf(&quot;%d%d%d%d&quot;, &amp;x1, &amp;y1, &amp;x2, &amp;y2);&#x2F;&#x2F;算子矩阵的和printf(&quot;%d\n&quot;, s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]);&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、差分"><a href="#五、差分" class="headerlink" title="五、差分"></a>五、差分</h1><h2 id="5-1-一维差分"><a href="#5-1-一维差分" class="headerlink" title="5.1 一维差分"></a>5.1 一维差分</h2><p>有$a_{1},a_{2},…,a_{n}$[前缀和]，构造$b_{1},b_{2},…,b_{n}$[差分]，使得$a_{i}&#x3D;b_{1}+b_{2}+…+b_{i}$，则有：</p><p>$\begin{cases} b_{1}&#x3D;a_{1} \ b_{2}&#x3D; a_{2}-a_{1} \ b_{3}&#x3D; a_{3}-a_{2} \ … \ b_{n}&#x3D; a_{n}-a_{n-1} \end{cases}$</p><ul><li><code>O(n)</code>时间由<code>B</code>数组得到<code>A</code>数组</li><li>给<code>A</code>数组区间<code>[l, r]</code>中的每个数加上<code>c</code>：<code>B[l] += c</code>, <code>B[r + 1] -= c</code></li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722162509157.png" alt="image-20220722162509157"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int n, m;int a[N], b[N];void insert(int l, int r, int c)&#123;b[l] +&#x3D; c;b[r + 1] -&#x3D; c;&#125;int main()&#123;scanf(&quot;%d%d&quot;, &amp;n, &amp;m);for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;scanf(&quot;%d&quot;, &amp;a[i]);&#125;for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;insert(i, i, a[i]);&#x2F;&#x2F;将b数组读入值&#125;while (m--)&#123;int l, r, c;scanf(&quot;%d%d%d&quot;, &amp;l, &amp;r, &amp;c);insert(l, r, c);&#125;for (int i &#x3D; 1; i &lt;&#x3D; n; i++)b[i] +&#x3D; b[i - 1];&#x2F;&#x2F;前缀和得到&quot;新的a[i]&quot;for (int i &#x3D; 1; i &lt;&#x3D; n; i++)printf(&quot;%d &quot;, b[i]);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-二维差分"><a href="#5-2-二维差分" class="headerlink" title="5.2 二维差分"></a>5.2 二维差分</h2><p>设<code>a[i][j]</code>是<code>b[i][j]</code>的前缀和。</p><p>给以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵中的所有元素加上<code>c</code>：<br><code>S[x1, y1] += c</code>, <code>S[x2 + 1, y1] -= c</code>, <code>S[x1, y2 + 1] -= c</code>, <code>S[x2 + 1, y2 + 1] += c</code>。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722171706570.png" alt="image-20220722171706570"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 1010;int n, m, q;int a[N][N];&#x2F;&#x2F; 插入到差分矩阵中void insert(int x1, int y1, int x2, int y2, int c) &#123;    a[x1][y1] +&#x3D; c;    a[x2 + 1][y1] -&#x3D; c;    a[x1][y2 + 1] -&#x3D; c;    a[x2 + 1][y2 + 1] +&#x3D; c;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;    &#x2F;&#x2F; 读取数据     for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;            int c;            cin &gt;&gt; c;            insert(i, j, i, j, c);&#x2F;&#x2F;读取a[i][j]的值        &#125;    &#125;    &#x2F;&#x2F; 处理插入    while (q--) &#123;        int x1, y1, x2, y2, c;        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;        insert(x1, y1, x2, y2, c);    &#125;    &#x2F;&#x2F; 还原矩阵，输出数据    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for (int j &#x3D; 1; j &lt;&#x3D; m; j++) &#123;            a[i][j] +&#x3D; a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];            cout &lt;&lt; a[i][j] &lt;&lt; &quot; &quot;;        &#125;        puts(&quot;&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、双指针算法"><a href="#六、双指针算法" class="headerlink" title="六、双指针算法"></a>六、双指针算法</h1><p><strong>Case1：</strong>对于两个序列，维护某种次序：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722222255815.png" alt="image-20220722222255815"><br>    如在归并排序中合并两个有序序列的操作：两个指针分别位于数组相应的位置，依次向右遍历，当数组执行到尾部，合并完成。</p><p><strong>Case2：</strong>对于一个序列，用两个指针维护一段区间：</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220722222346120.png" alt="image-20220722222346120"></p><p>​如快排，两个指针分别位于左右两端，依次中间比较交换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">for(i &#x3D; 0,j &#x3D; 0;i &lt; n;i++)&#123;while(j &lt; i &amp;&amp; check(i,j)) j++;&#x2F;&#x2F;寻找i，j的单调关系    &#x2F;&#x2F;每道题的具体逻辑&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>核心思想</strong>：将<code>for(int i = 0;i &lt; n;i++) for(int j = 0;j &lt; n;j++)</code>朴素算法的时间复杂度优化到<code>O(n)</code>。</p><p>[<strong>例：给定一个字符串，进行分割</strong>]</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;int main()&#123;char str[1000];gets(str);int n &#x3D; strlen(str);for (int i &#x3D; 0; i &lt; n; i++)&#123;int j &#x3D; i;while (j &lt; n &amp;&amp; str[j] !&#x3D; &#39; &#39;) j++;&#x2F;&#x2F;这道题具体逻辑for (int k &#x3D; i; k &lt; j; k++)&#123;cout &lt;&lt; str[k];&#125;cout &lt;&lt; endl;i &#x3D; j;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;双指针算法:O(n)for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i++)&#123;while (j &lt;&#x3D; i &amp;&amp; check(j, i)) j++;&#x2F;&#x2F;j往左最远能到什么地方res &#x3D; max(res, i - j + 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【题解】</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int n;int a[N],s[N];int main()&#123;    cin &gt;&gt; n;    for (int i &#x3D; 0; i &lt; n; i ++ ) cin &gt;&gt; a[i];    int res &#x3D; 0;    for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i ++ )    &#123;        s[a[i]] ++ ;        while (s[a[i]] &gt; 1)        &#123;            s[a[j]] -- ;            j ++ ;        &#125;        res &#x3D; max(res, i - j +  1);    &#125;    cout &lt;&lt; res &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、位运算"><a href="#七、位运算" class="headerlink" title="七、位运算"></a>七、位运算</h1><h2 id="7-1-n的二进制表示第k位"><a href="#7-1-n的二进制表示第k位" class="headerlink" title="7.1 n的二进制表示第k位"></a>7.1 n的二进制表示第k位</h2><p><code>n</code>的二进制表示中第<code>k</code>位是几($k&#x3D;{0,1,2,…,n}$)</p><ul><li>先把第<code>k</code>位移到最后一位，<code>n&gt;&gt;k</code></li><li>看个位是几，<code>x &amp;&amp; 1</code></li></ul><p>即<code>n&gt;&gt;k &amp; 1</code></p><h2 id="7-2-lowbit"><a href="#7-2-lowbit" class="headerlink" title="7.2 lowbit"></a>7.2 lowbit</h2><p><code>lowbit(x)</code>：返回<code>x</code>的最后一位<code>1</code>是多少，是树状数组的基本操作。</p><p><code>x=1010</code>，<code>lowbit(x)=10</code></p><p><code>x=101000</code>，<code>lowbit(x)=1000</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;int lowbit(int x)&#123;return x &amp; -x;&#125;int main()&#123;int n;cin &gt;&gt; n;while (n--)&#123;int x;cin &gt;&gt; x;int res &#x3D; 0;while (x)&#123;x -&#x3D; lowbit(x);res++;&#x2F;&#x2F;每次减去x的最后一位1&#125;cout &lt;&lt; res &lt;&lt; &quot; &quot;;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、离散化"><a href="#八、离散化" class="headerlink" title="八、离散化"></a>八、离散化</h1><p>值域$0-10^{9}$，个数$10^{5}$</p><p><code>a[]</code>:1、3、100、2000、500000映射为0、1、2、3、4。</p><p>问题：</p><ul><li><code>a[]</code>中可能有重复元素—–&gt;<strong>去重</strong></li><li>如何算出<code>x</code>离散化后的值—–&gt;<strong>二分</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector&lt;int&gt; alls; &#x2F;&#x2F; 存储所有待离散化的值sort(alls.begin(), alls.end()); &#x2F;&#x2F; 将所有值排序alls.erase(unique(alls.begin(), alls.end()), alls.end());   &#x2F;&#x2F; 去掉重复元素&#x2F;&#x2F; 二分求出x对应的离散化的值int find(int x) &#x2F;&#x2F; 找到第一个大于等于x的位置&#123;    int l &#x3D; 0, r &#x3D; alls.size() - 1;    while (l &lt; r)    &#123;        int mid &#x3D; l + r &gt;&gt; 1;        if (alls[mid] &gt;&#x3D; x) r &#x3D; mid;        else l &#x3D; mid + 1;    &#125;    return r + 1; &#x2F;&#x2F; 映射到1, 2, ...n&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 300010;int n, m;int a[N], s[N];vector&lt;int&gt; alls;vector&lt;PII&gt; add, query;int find(int x)&#123;    int l &#x3D; 0, r &#x3D; alls.size() - 1;    while (l &lt; r)    &#123;        int mid &#x3D; l + r &gt;&gt; 1;        if (alls[mid] &gt;&#x3D; x) r &#x3D; mid;        else l &#x3D; mid + 1;    &#125;    return r + 1;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        int x, c;        cin &gt;&gt; x &gt;&gt; c;        add.push_back(&#123;x, c&#125;);        alls.push_back(x);    &#125;    for (int i &#x3D; 0; i &lt; m; i ++ )    &#123;        int l, r;        cin &gt;&gt; l &gt;&gt; r;        query.push_back(&#123;l, r&#125;);        alls.push_back(l);        alls.push_back(r);    &#125;    &#x2F;&#x2F; 去重    sort(alls.begin(), alls.end());    alls.erase(unique(alls.begin(), alls.end()), alls.end());    &#x2F;&#x2F; 处理插入    for (auto item : add)    &#123;        int x &#x3D; find(item.first);        a[x] +&#x3D; item.second;    &#125;    &#x2F;&#x2F; 预处理前缀和    for (int i &#x3D; 1; i &lt;&#x3D; alls.size(); i ++ ) s[i] &#x3D; s[i - 1] + a[i];    &#x2F;&#x2F; 处理询问    for (auto item : query)    &#123;        int l &#x3D; find(item.first), r &#x3D; find(item.second);        cout &lt;&lt; s[r] - s[l - 1] &lt;&lt; endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[注]<code>unique</code>函数实现方法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector&lt;int&gt;::iterator unique(vector&lt;int&gt; &amp;a)&#123; int j &#x3D; 0; for(int i &#x3D; 0;i &lt; a.size();i++) &#123;     if(!i || a[i] !&#x3D; a[i-1])&#x2F;&#x2F;若其为第一个元素或其与前一个元素不相同         a[j++] &#x3D; a[i]; &#125; &#x2F;&#x2F; a[0] - a[j-1]所有a中不重复的数 return a.begin() + j;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="九、区间合并"><a href="#九、区间合并" class="headerlink" title="九、区间合并"></a>九、区间合并</h1><ul><li><strong>按区间左端点进行排序</strong></li><li><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220723212053110.png" alt="image-20220723212053110"></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 将所有存在交集的区间合并void merge(vector&lt;PII&gt; &amp;segs)&#123;    vector&lt;PII&gt; res;    sort(segs.begin(), segs.end());&#x2F;&#x2F;将所有区间排序    int st &#x3D; -2e9, ed &#x3D; -2e9;&#x2F;&#x2F;2*10的九次方    for (auto seg : segs)        if (ed &lt; seg.first)        &#123;            if (st !&#x3D; -2e9) res.push_back(&#123;st, ed&#125;);            st &#x3D; seg.first, ed &#x3D; seg.second;        &#125;        else ed &#x3D; max(ed, seg.second);    if (st !&#x3D; -2e9) res.push_back(&#123;st, ed&#125;);    segs &#x3D; res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【2-数据结构】"><a href="#【2-数据结构】" class="headerlink" title="【2.数据结构】"></a>【2.数据结构】</h1><h1 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h1><p>这里讲解的是用<strong>数组</strong>模拟链表的实现。</p><h2 id="1-1-单链表"><a href="#1-1-单链表" class="headerlink" title="1.1 单链表"></a>1.1 单链表</h2><p>应用：使用邻接表来存储(树和图)。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220723223002534.png" alt="image-20220723223002534"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; head存储链表头,e[]存储节点的值,ne[]存储节点的next指针,idx表示当前用到了哪个节点int head, e[N], ne[N], idx;&#x2F;&#x2F; 初始化void init()&#123;    head &#x3D; -1;    idx &#x3D; 0;&#125;&#x2F;&#x2F; 在链表头插入一个数xvoid insert_head(int x)&#123;    e[idx] &#x3D; x, ne[idx] &#x3D; head, head &#x3D; idx++;&#x2F;&#x2F;当前idx已经被使用,自增&#125;&#x2F;&#x2F;在k后插入一个数xvoid insert(int k,int x)&#123;    e[idx] &#x3D; x, ne[idx] &#x3D; ne[k], ne[k] &#x3D; idx++;&#125;&#x2F;&#x2F; 将头结点删除,需要保证头结点存在void remove_head()&#123;    head &#x3D; ne[head];&#125;&#x2F;&#x2F; 将下标是k的点后面的点删掉void remove(int k)&#123;    ne[k] &#x3D; ne[ne[k]];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-双链表"><a href="#1-2-双链表" class="headerlink" title="1.2 双链表"></a>1.2 双链表</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; e[]表示节点的值,l[]表示节点的左指针,r[]表示节点的右指针,idx表示当前用到了哪个节点int e[N], l[N], r[N], idx;&#x2F;&#x2F; 初始化void init()&#123;    &#x2F;&#x2F;0是左端点,1是右端点(边界)    r[0] &#x3D; 1, l[1] &#x3D; 0;    idx &#x3D; 2;&#125;&#x2F;&#x2F; 在节点a的右边插入一个数x(若为左边,则调用add(l[a],x)即可)void insert(int a, int x)&#123;    e[idx] &#x3D; x;    l[idx] &#x3D; a, r[idx] &#x3D; r[a];    l[r[a]] &#x3D; idx, r[a] &#x3D; idx ++ ;&#125;&#x2F;&#x2F; 删除节点avoid remove(int a)&#123;    l[r[a]] &#x3D; l[a];    r[l[a]] &#x3D; r[a];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、栈和队列"><a href="#二、栈和队列" class="headerlink" title="二、栈和队列"></a>二、栈和队列</h1><p>栈：后进先出；队列：先进先出</p><h2 id="2-1-栈"><a href="#2-1-栈" class="headerlink" title="2.1 栈"></a>2.1 栈</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; tt表示栈顶int stk[N], tt &#x3D; 0;&#x2F;&#x2F; 向栈顶插入一个数stk[ ++ tt] &#x3D; x;&#x2F;&#x2F; 从栈顶弹出一个数tt -- ;&#x2F;&#x2F; 栈顶的值stk[tt];&#x2F;&#x2F; 判断栈是否为空if (tt &gt; 0)&#123;&#x2F;&#x2F;not empty&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-队列"><a href="#2-2-队列" class="headerlink" title="2.2 队列"></a>2.2 队列</h2><h3 id="2-2-1-普通队列"><a href="#2-2-1-普通队列" class="headerlink" title="2.2.1 普通队列"></a>2.2.1 普通队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; hh 表示队头，tt表示队尾int q[N], hh &#x3D; 0, tt &#x3D; -1;&#x2F;&#x2F; 向队尾插入一个数q[ ++ tt] &#x3D; x;&#x2F;&#x2F; 从队头弹出一个数hh ++ ;&#x2F;&#x2F; 队头的值q[hh];&#x2F;&#x2F; 判断队列是否为空if (hh &lt;&#x3D; tt)&#123;&#x2F;&#x2F;not empty&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-循环队列"><a href="#2-2-2-循环队列" class="headerlink" title="2.2.2 循环队列"></a>2.2.2 循环队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; hh 表示队头，tt表示队尾的后一个位置int q[N], hh &#x3D; 0, tt &#x3D; 0;&#x2F;&#x2F; 向队尾插入一个数q[tt ++ ] &#x3D; x;if (tt &#x3D;&#x3D; N) tt &#x3D; 0;&#x2F;&#x2F; 从队头弹出一个数hh ++ ;if (hh &#x3D;&#x3D; N) hh &#x3D; 0;&#x2F;&#x2F; 队头的值q[hh];&#x2F;&#x2F; 判断队列是否为空if (hh !&#x3D; tt)&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-单调栈"><a href="#2-3-单调栈" class="headerlink" title="2.3 单调栈"></a>2.3 单调栈</h2><p>常见模型：找出每个数左边离它最近的比它大&#x2F;小的数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int tt &#x3D; 0;for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;    while (tt &amp;&amp; check(stk[tt], i)) tt -- ;    stk[ ++ tt] &#x3D; i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int stk[N], tt;int main()&#123;    int n;    cin &gt;&gt; n;    while (n--)    &#123;        int x;        scanf(&quot;%d&quot;, &amp;x);        &#x2F;&#x2F;若当前栈顶比x大时,其不会再被用到,直接删去        while (tt &amp;&amp; stk[tt] &gt;&#x3D; x)tt--;        &#x2F;&#x2F;若栈为空,则输出-1        if (!tt) printf(&quot;-1 &quot;);        else printf(&quot;%d &quot;, stk[tt]);        stk[ ++ tt] &#x3D; x;&#x2F;&#x2F;将x置入栈顶    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[分析]每个元素只会有一次进栈和出栈操作，算法时间复杂度为<code>O(n)</code>。</p><h2 id="2-4-单调队列"><a href="#2-4-单调队列" class="headerlink" title="2.4 单调队列"></a>2.4 单调队列</h2><p>常见模型：找出<strong>滑动窗口</strong>中的最大值&#x2F;最小值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int hh &#x3D; 0, tt &#x3D; -1;for (int i &#x3D; 0; i &lt; n; i ++ )&#123;    while (hh &lt;&#x3D; tt &amp;&amp; check_out(q[hh])) hh ++ ;  &#x2F;&#x2F; 判断队头是否滑出窗口    while (hh &lt;&#x3D; tt &amp;&amp; check(q[tt], i)) tt -- ;    q[ ++ tt] &#x3D; i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>朴素算法—<strong>栈&#x2F;队列哪些元素是无用的，删去后是否具有单调性</strong>—&gt;优化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 1000010;int a[N], q[N];int main()&#123;    int n, k;    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);    for (int i &#x3D; 0; i &lt; n; i ++ ) scanf(&quot;%d&quot;, &amp;a[i]);    int hh &#x3D; 0, tt &#x3D; -1;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        if (hh &lt;&#x3D; tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ;        while (hh &lt;&#x3D; tt &amp;&amp; a[q[tt]] &gt;&#x3D; a[i]) tt -- ;        q[ ++ tt] &#x3D; i;        if (i &gt;&#x3D; k - 1) printf(&quot;%d &quot;, a[q[hh]]);    &#125;    puts(&quot;&quot;);    hh &#x3D; 0, tt &#x3D; -1;    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        if (hh &lt;&#x3D; tt &amp;&amp; i - k + 1 &gt; q[hh]) hh ++ ;        while (hh &lt;&#x3D; tt &amp;&amp; a[q[tt]] &lt;&#x3D; a[i]) tt -- ;        q[ ++ tt] &#x3D; i;        if (i &gt;&#x3D; k - 1) printf(&quot;%d &quot;, a[q[hh]]);    &#125;    puts(&quot;&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、KMP算法"><a href="#三、KMP算法" class="headerlink" title="三、KMP算法"></a>三、KMP算法</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100010, M &#x3D; 1000010;&#x2F;&#x2F; s[]是长文本,p[]是模式串,n是s的长度,m是p的长度int n, m;int ne[N];char s[M], p[N];int main()&#123;    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;    for (int i &#x3D; 2, j &#x3D; 0; i &lt;&#x3D; n; i ++ )    &#123;        while (j &amp;&amp; p[i] !&#x3D; p[j + 1]) j &#x3D; ne[j];        if (p[i] &#x3D;&#x3D; p[j + 1]) j ++ ;        ne[i] &#x3D; j;    &#125;    for (int i &#x3D; 1, j &#x3D; 0; i &lt;&#x3D; m; i ++ )    &#123;        while (j &amp;&amp; s[i] !&#x3D; p[j + 1]) j &#x3D; ne[j];        if (s[i] &#x3D;&#x3D; p[j + 1]) j ++ ;        if (j &#x3D;&#x3D; n)        &#123;            printf(&quot;%d &quot;, i - n);            j &#x3D; ne[j];        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Trie树"><a href="#四、Trie树" class="headerlink" title="四、Trie树"></a>四、Trie树</h1><p>用于高效地<strong>存储和查找字符串集合</strong>的数据结构。</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220724161401751.png" alt="image-20220724161401751"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int son[N][26], cnt[N], idx;&#x2F;&#x2F; 0号点既是根节点，又是空节点&#x2F;&#x2F; son[][]存储树中每个节点的子节点&#x2F;&#x2F; cnt[]存储以每个节点结尾的单词数量&#x2F;&#x2F; 插入一个字符串void insert(char *str)&#123;    int p &#x3D; 0;    for (int i &#x3D; 0; str[i]; i ++ )    &#123;        int u &#x3D; str[i] - &#39;a&#39;;        if (!son[p][u]) son[p][u] &#x3D; ++ idx;        p &#x3D; son[p][u];    &#125;    cnt[p] ++ ;&#125;&#x2F;&#x2F; 查询字符串出现的次数int query(char *str)&#123;    int p &#x3D; 0;    for (int i &#x3D; 0; str[i]; i ++ )    &#123;        int u &#x3D; str[i] - &#39;a&#39;;        if (!son[p][u]) return 0;        p &#x3D; son[p][u];    &#125;    return cnt[p];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如何理解单(双)链表，<code>Trie</code>树和堆中的<code>idx</code>：</p><p><a href="https://www.acwing.com/solution/content/5673/">https://www.acwing.com/solution/content/5673/</a></p></blockquote><h1 id="五、并查集"><a href="#五、并查集" class="headerlink" title="五、并查集"></a>五、并查集</h1><p><strong>操作</strong>：</p><ul><li>将两个集合合并</li><li>询问两个元素是否在一个集合之中</li></ul><p>并查集在近乎<code>O(1)</code>时间内快速支持两个操作。</p><p><strong>基本原理</strong>：每个集合用一棵树来表示，树根的编号就是整个集合的编号。每个节点存储它的父节点，<code>p[x]</code>表示<code>x</code>的父节点。</p><ul><li>判断树根的方法：<code>if(p[x] == x)</code></li><li>求<code>x</code>的集合编号的方法：<code>while(p[x] != x) x = p[x];</code></li><li>合并两个集合的方法：<code>p[x]</code>是<code>x</code>的集合编号，<code>p[y]</code>是<code>y</code>的集合编号，<code>p[x] = y</code></li></ul><p><strong>优化(路径压缩)<strong>：找到某节点后，将路径中所有节点的前驱都</strong>指向根节点</strong></p><h2 id="5-1-朴素并查集"><a href="#5-1-朴素并查集" class="headerlink" title="5.1 朴素并查集"></a>5.1 朴素并查集</h2><ul><li><strong><code>find()</code>函数</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int p[N]; &#x2F;&#x2F;存储每个点的祖宗节点&#x2F;&#x2F; 返回x的祖宗节点 + 路径压缩int find(int x)&#123;if (p[x] !&#x3D; x) p[x] &#x3D; find(p[x]);return p[x];&#125;&#x2F;&#x2F; 初始化，假定节点编号是1~nfor (int i &#x3D; 1; i &lt;&#x3D; n; i++) p[i] &#x3D; i;&#x2F;&#x2F; 合并a和b所在的两个集合：p[find(a)] &#x3D; find(b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int p[N];int find(int x)&#123;    if (p[x] !&#x3D; x) p[x] &#x3D; find(p[x]);    return p[x];&#125;int main()&#123;    int n, m;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ ) p[i] &#x3D; i;    while (m--)    &#123;        char op[2];        int a, b;        scanf(&quot;%s%d%d&quot;, op, &amp;a, &amp;b);&#x2F;&#x2F;当需要读取一个字母时,使用字符串进行读取        if (*op &#x3D;&#x3D; &#39;M&#39;) p[find(a)] &#x3D; find(b);        else        &#123;            if (find(a) &#x3D;&#x3D; find(b)) puts(&quot;Yes&quot;);            else puts(&quot;No&quot;);        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-维护size的并查集"><a href="#5-2-维护size的并查集" class="headerlink" title="5.2 维护size的并查集"></a>5.2 维护size的并查集</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int p[N], size[N];&#x2F;&#x2F;p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量&#x2F;&#x2F; 返回x的祖宗节点int find(int x)&#123;    if (p[x] !&#x3D; x) p[x] &#x3D; find(p[x]);    return p[x];&#125;&#x2F;&#x2F; 初始化，假定节点编号是1~nfor (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;    p[i] &#x3D; i;    size[i] &#x3D; 1;&#125;&#x2F;&#x2F; 合并a和b所在的两个集合：size[find(b)] +&#x3D; size[find(a)];p[find(a)] &#x3D; find(b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;using namespace std;const int N &#x3D; 100010;int n, m;int p[N], cnt[N];int find(int x)&#123;    if (p[x] !&#x3D; x) p[x] &#x3D; find(p[x]);    return p[x];&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )    &#123;        p[i] &#x3D; i;        cnt[i] &#x3D; 1;    &#125;    while (m--)    &#123;        string op;        int a, b;        cin &gt;&gt; op;        if (op &#x3D;&#x3D; &quot;C&quot;)        &#123;            cin &gt;&gt; a &gt;&gt; b;            a &#x3D; find(a), b &#x3D; find(b);            if (a !&#x3D; b)            &#123;                p[a] &#x3D; b;                cnt[b] +&#x3D; cnt[a];            &#125;        &#125;        else if (op &#x3D;&#x3D; &quot;Q1&quot;)        &#123;            cin &gt;&gt; a &gt;&gt; b;            if (find(a) &#x3D;&#x3D; find(b)) puts(&quot;Yes&quot;);            else puts(&quot;No&quot;);        &#125;        else        &#123;            cin &gt;&gt; a;            cout &lt;&lt; cnt[find(a)] &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、堆"><a href="#六、堆" class="headerlink" title="六、堆"></a>六、堆</h1><p>这里讲述的是手写堆。堆是一个完全二叉树。以小根堆为例，堆使用数组存储，根节点在第一号单元，<code>x</code>的左儿子是<code>2x</code>，右儿子是<code>2x+1</code>；<code>down(x)</code>往下调整，<code>up(x)</code>往上调整。</p><p>堆需要完成以下操作：（下标从<code>1</code>开始）</p><ul><li><p><strong>插入一个数</strong>：<code>heap[++size] = x; up(size);</code></p></li><li><p><strong>求集合中的最小值</strong>：<code>heap[1]</code></p></li><li><p><strong>删除最小值</strong>：<code>heap[1] = heap[size]; size--; down(1);</code></p></li><li><p><strong>删除任意一个元素</strong>：<code>heap[k] = heap[size]; size--; down(k); up(k);</code></p></li><li><p><strong>修改任意一个元素</strong>：<code>heap[k] = x; down(k); up(k);</code></p></li></ul><h2 id="6-1-堆排序"><a href="#6-1-堆排序" class="headerlink" title="6.1 堆排序"></a>6.1 堆排序</h2><ul><li>熟练掌握<code>down()</code>、<code>up()</code>函数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int n, m;int h[N], size;void down(int u)&#123;int t &#x3D; u;&#x2F;&#x2F;t为点、左孩子、右孩子三个点中最小的一个点if (u * 2 &lt;&#x3D; size &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;if (u * 2 + 1 &lt;&#x3D; size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;if (u !&#x3D; t)&#x2F;&#x2F;根节点不是最小的&#123;&#x2F;&#x2F;与最小的点交换swap(h[u], h[t]);down(t);&#x2F;&#x2F;递归处理&#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        swap(h[u &#x2F; 2], h[u]);        u &gt;&gt;&#x3D; 1;&#x2F;&#x2F;u &#x2F;&#x3D; 2换上去    &#125;&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) scanf(&quot;%d&quot;, &amp;h[i]);    cnt &#x3D; n;    for (int i &#x3D; n &#x2F; 2; i; i--) down(i);&#x2F;&#x2F;O(n)的时间复杂度建堆    while (m--)    &#123;        printf(&quot;%d &quot;, h[1]);        h[1] &#x3D; h[cnt--];        down(1);    &#125;    puts(&quot;&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-带映射关系的堆排序"><a href="#6-2-带映射关系的堆排序" class="headerlink" title="6.2 带映射关系的堆排序"></a>6.2 带映射关系的堆排序</h2><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220724232309449.png" alt="image-20220724232309449"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string.h&gt;using namespace std;const int N &#x3D; 100010;&#x2F;&#x2F;ph[j]存储第j个插入的数的下标,hp[k]存储堆内下标为k的点的插入顺序&#x2F;&#x2F;ph[j] &#x3D; k, hp[k] &#x3D; jp 下标(pointer), h 堆(heap)int h[N], ph[N], hp[N], cnt;void heap_swap(int a, int b)&#123;    swap(ph[hp[a]],ph[hp[b]]);    swap(hp[a], hp[b]);    swap(h[a], h[b]);&#125;void down(int u)&#123;    int t &#x3D; u;    if (u * 2 &lt;&#x3D; cnt &amp;&amp; h[u * 2] &lt; h[t]) t &#x3D; u * 2;    if (u * 2 + 1 &lt;&#x3D; cnt &amp;&amp; h[u * 2 + 1] &lt; h[t]) t &#x3D; u * 2 + 1;    if (u !&#x3D; t)    &#123;        heap_swap(u, t);        down(t);    &#125;&#125;void up(int u)&#123;    while (u &#x2F; 2 &amp;&amp; h[u] &lt; h[u &#x2F; 2])    &#123;        heap_swap(u, u &#x2F; 2);        u &gt;&gt;&#x3D; 1;    &#125;&#125;int main()&#123;    int n, m &#x3D; 0;    scanf(&quot;%d&quot;, &amp;n);    while (n -- )    &#123;        char op[5];        int k, x;        scanf(&quot;%s&quot;, op);        if (!strcmp(op, &quot;I&quot;))        &#123;            scanf(&quot;%d&quot;, &amp;x);            cnt ++ ;&#x2F;&#x2F;堆的元素加1            m ++ ;&#x2F;&#x2F;第m个插入的数            ph[m] &#x3D; cnt, hp[cnt] &#x3D; m;            h[cnt] &#x3D; x;            up(cnt);        &#125;        else if (!strcmp(op, &quot;PM&quot;)) printf(&quot;%d\n&quot;, h[1]);        else if (!strcmp(op, &quot;DM&quot;))        &#123;            heap_swap(1, cnt);            cnt -- ;            down(1);        &#125;        else if (!strcmp(op, &quot;D&quot;))&#x2F;&#x2F;删除第k个插入的位置        &#123;            scanf(&quot;%d&quot;, &amp;k);            k &#x3D; ph[k];            heap_swap(k, cnt);            cnt -- ;            up(k);            down(k);        &#125;        else        &#123;&#x2F;&#x2F;将第k个插入的数修改            scanf(&quot;%d%d&quot;, &amp;k, &amp;x);            k &#x3D; ph[k];            h[k] &#x3D; x;            up(k);            down(k);        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、哈希表"><a href="#七、哈希表" class="headerlink" title="七、哈希表"></a>七、哈希表</h1><ul><li><strong>存储结构</strong><ul><li>开放寻址法</li><li>拉链法</li></ul></li><li><strong>字符串哈希方式</strong></li></ul><p>时间复杂度为<code>O(1)</code>。</p><h2 id="7-1-一般哈希"><a href="#7-1-一般哈希" class="headerlink" title="7.1 一般哈希"></a>7.1 一般哈希</h2><p>（1）拉链法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int h[N], e[N], ne[N], idx;&#x2F;&#x2F; 向哈希表中插入一个数void insert(int x)&#123;    int k &#x3D; (x % N + N) % N;    e[idx] &#x3D; x;    ne[idx] &#x3D; h[k];    h[k] &#x3D; idx ++ ;&#125;&#x2F;&#x2F; 在哈希表中查询某个数是否存在bool find(int x)&#123;    int k &#x3D; (x % N + N) % N;    for (int i &#x3D; h[k]; i !&#x3D; -1; i &#x3D; ne[i])    if (e[i] &#x3D;&#x3D; x)    return true;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>通过<code>memset(h,-1,sizeof h)</code>对<code>h[]</code>数组进行初始化，<code>memset</code>函数按字节来进行初始化，在<code>cpp</code>中每个字节赋<code>-1</code>即每一位都是<code>1</code>，整体结果即为<code>-1</code>。</p></blockquote><p>（2）&#x3D;&#x3D;<strong>开放寻址法</strong>&#x3D;&#x3D;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int h[N];&#x2F;&#x2F; 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置int find(int x)&#123;int t &#x3D; (x % N + N) % N;while (h[t] !&#x3D; null &amp;&amp; h[t] !&#x3D; x)&#x2F;&#x2F;有人且不是x&#123;t ++ ;if (t &#x3D;&#x3D; N) t &#x3D; 0;&#x2F;&#x2F;已经到底,循环到第一个坑位&#125;return t;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p><code>null</code>可以设为<code>null = 0x3f3f3f3f</code>。</p></blockquote><h2 id="7-2-字符串哈希"><a href="#7-2-字符串哈希" class="headerlink" title="7.2 字符串哈希"></a>7.2 字符串哈希</h2><p><strong>求前缀的哈希值</strong>。</p><ul><li><strong>核心思想</strong>：将字符串看成<code>P</code>进制数，<code>P</code>的经验值是<code>131</code>或<code>13331</code>，取这两个值的冲突概率低；然后将其转化为十进制，即$x_{n}*p^{n}+x_{n-1}*p^{n-1}+…+x_{0}*p^{0}$，再<code>mod Q</code>，即可将任何一个字符串映射到<code>0-Q-1</code>之间的数。</li><li><strong>小技巧</strong>：取模的数用$2^{64}$，这样直接用<code>unsigned long long</code>存储，溢出的结果就是取模的结果。</li><li><strong>运用场景</strong>：[例]判断两个字符串是否相等</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typedef unsigned long long ULL;const int P &#x3D; 131;ULL h[N], p[N]; &#x2F;&#x2F; h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64&#x2F;&#x2F; 初始化p[0] &#x3D; 1;for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )&#123;    h[i] &#x3D; h[i - 1] * P + str[i];    p[i] &#x3D; p[i - 1] * P;&#125;&#x2F;&#x2F; 计算子串 str[l ~ r] 的哈希值ULL get(int l, int r)&#123;    return h[r] - h[l - 1] * p[r - l + 1];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、C-STL"><a href="#八、C-STL" class="headerlink" title="八、C++ STL"></a>八、C++ STL</h1><h2 id="8-1-vector"><a href="#8-1-vector" class="headerlink" title="8.1 vector"></a>8.1 vector</h2><p>变长数组：倍增的思想</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size()  返回元素个数empty()  返回是否为空clear()  清空front() &#x2F; back()push_back() &#x2F; pop_back()begin() &#x2F; end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历的三种形式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F;1for (int i &#x3D; 0; i &lt; 10; i++) cout &lt;&lt; a[i] &lt;&lt; &#39; &#39;;cout &lt;&lt; endl;&#x2F;&#x2F;2for (auto i &#x3D; a.begin(); i !&#x3D; a.end(); i++) cout &lt;&lt; *i &lt;&lt; &#39; &#39;;cout &lt;&lt; endl;&#x2F;&#x2F;3for (auto x : a) cout &lt;&lt; x &lt;&lt; &#39; &#39;;cout &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持比较运算，按字典序：</p><p><code>vector&lt;int&gt; a(4,3),b(3,4)//a初始化4个3</code>，则有<code>a&lt;b</code>。</p><h2 id="8-2-pair-lt-int-int-gt"><a href="#8-2-pair-lt-int-int-gt" class="headerlink" title="8.2 pair&lt;int, int&gt;"></a>8.2 pair&lt;int, int&gt;</h2><ul><li><code>first</code>, 第一个元素</li><li><code>second</code>, 第二个元素</li></ul><p><strong>支持比较运算</strong>，以<code>first</code>为<strong>第一关键字</strong>，以<code>second</code>为第二关键字（字典序）。</p><p><code>pair</code>相当于<strong>两个变量的结构体+比较函数</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pair&lt;int, string&gt; p;p &#x3D; make_pair(10, &quot;yxc&quot;);p &#x3D; &#123; 20,&quot;abc&quot; &#125;;&#x2F;&#x2F;存储三种属性pair&lt;int, pair&lt;int,int&gt;&gt; p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-string"><a href="#8-3-string" class="headerlink" title="8.3 string"></a>8.3 string</h2><p>字符串<code>string a = &quot;yxc&quot;; a += &quot;def&quot;;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size() &#x2F; length()  返回字符串长度empty()clear()substr(起始下标,(子串长度))  返回子串c_str()  返回字符串所在字符数组的起始地址&#x2F;&#x2F;printf(&quot;%s\n&quot;,a.c_str());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-队列"><a href="#8-4-队列" class="headerlink" title="8.4 队列"></a>8.4 队列</h2><h3 id="8-4-1-queue"><a href="#8-4-1-queue" class="headerlink" title="8.4.1 queue"></a>8.4.1 queue</h3><p>队列：<code>queue&lt;int&gt; q;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size()empty()push()  向队尾插入一个元素front() 返回队头元素back()  返回队尾元素pop()   弹出队头元素q &#x3D; queue&lt;int&gt;();&#x2F;&#x2F;清空队列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-2-priority-queue"><a href="#8-4-2-priority-queue" class="headerlink" title="8.4.2 priority_queue"></a>8.4.2 priority_queue</h3><p> <strong>优先队列</strong>，默认是<strong>大根堆</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue&lt;int&gt; heap;    size()    empty()    push()  插入一个元素    top()   返回堆顶元素    pop()   弹出堆顶元素定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-3-deque"><a href="#8-4-3-deque" class="headerlink" title="8.4.3 deque"></a>8.4.3 deque</h3><p><strong>双端队列</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size()empty()clear()front() &#x2F; back()push_back() &#x2F; pop_back()push_front() &#x2F; pop_front()&#x2F;&#x2F;从队首弹出一元素begin() &#x2F; end()[]&#x2F;&#x2F;支持随机访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-5-stack"><a href="#8-5-stack" class="headerlink" title="8.5 stack"></a>8.5 stack</h2><p>栈<code>stack</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size()empty()push()  向栈顶插入一个元素top()   返回栈顶元素pop()   弹出栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-6-set和map"><a href="#8-6-set和map" class="headerlink" title="8.6 set和map"></a>8.6 set和map</h2><h3 id="8-6-1-set-map-multiset-multimap"><a href="#8-6-1-set-map-multiset-multimap" class="headerlink" title="8.6.1 set, map, multiset, multimap"></a>8.6.1 set, map, multiset, multimap</h3><p>基于平衡二叉树（红黑树），动态维护有序序列。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size()empty()clear()begin()&#x2F;end()++, -- 返回前驱和后继 时间复杂度为 O(logn)set&#x2F;multiset(set不能有重复元素,multiset可以)    insert()  插入一个数    find()  查找一个数,不存在则返回end迭代器    count()  返回某一个数的个数    erase()       (1) 输入是一个数x，删除所有x   O(k + logn)       (2) 输入一个迭代器，删除这个迭代器    &#x2F;&#x2F;离散数学中的最小上界    lower_bound()&#x2F;upper_bound()       lower_bound(x)  返回大于等于x的最小的数的迭代器       upper_bound(x)  返回大于x的最小的数的迭代器map&#x2F;multimap    insert()  插入的数是一个pair    erase()  输入的参数是pair或者迭代器    find()    []  注意multimap不支持此操作。 时间复杂度是 O(logn)    lower_bound()&#x2F;upper_bound()Example:    map&lt;string,int&gt; a;    a[&quot;yxc&quot;] &#x3D; 1;    cout &lt;&lt; a[&quot;yxc&quot;] &lt;&lt; endl;&#x2F;&#x2F;可和数组一样来取数据,但时间复杂度比数组高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-2-unordered-set-unordered-map-unordered-multiset-unordered-multimap"><a href="#8-6-2-unordered-set-unordered-map-unordered-multiset-unordered-multimap" class="headerlink" title="8.6.2 unordered_set, unordered_map, unordered_multiset, unordered_multimap"></a>8.6.2 unordered_set, unordered_map, unordered_multiset, unordered_multimap</h3><p>基于哈希表。</p><ul><li>和上面类似，增删改查的时间复杂度是 <code>O(1)</code></li><li>不支持基于排序的操作：<code>lower_bound()/upper_bound()</code>， 迭代器的++，–</li></ul><h2 id="8-7-bitset"><a href="#8-7-bitset" class="headerlink" title="8.7 bitset"></a>8.7 bitset</h2><p><strong>压位</strong>，每个字节中存八位</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bitset&lt;10000&gt; s;&#x2F;&#x2F;&lt;&gt;中写明个数&#x2F;&#x2F;支持位运算操作~, &amp;, | , ^&gt;&gt; , &lt;&lt;&#x3D;&#x3D;, !&#x3D;&#x2F;&#x2F;支持随机访问[]count()    返回有多少个1any()      判断是否至少有一个1none()     判断是否全为0set()     把所有位置成1set(k, v)  将第k位变成vreset()    把所有位变成0flip()     等价于~flip(k)    把第k位取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【3-搜索与图论】"><a href="#【3-搜索与图论】" class="headerlink" title="【3.搜索与图论】"></a>【3.搜索与图论】</h1><h1 id="一、DFS和BFS"><a href="#一、DFS和BFS" class="headerlink" title="一、DFS和BFS"></a>一、DFS和BFS</h1><table><thead><tr><th align="center"></th><th align="center">数据结构</th><th align="center">空间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">DFS</td><td align="center">stack</td><td align="center">$O(h)$（树的高度相关）</td><td align="center">&#x2F;</td></tr><tr><td align="center">BFS</td><td align="center">queue</td><td align="center">$O(2^{h})$（树的层相关）</td><td align="center">具有<strong>最短路径</strong>的性质</td></tr></tbody></table><h2 id="1-1-DFS"><a href="#1-1-DFS" class="headerlink" title="1.1 DFS"></a>1.1 DFS</h2><p><strong>回溯、恢复现场</strong></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727164858902.png" alt="image-20220727164858902"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 10;int n;int path[N];&#x2F;&#x2F;路径保存(存储方案)bool st[N];&#x2F;&#x2F;检验这个点是否被用过void dfs(int u)&#123;if (u &#x3D;&#x3D; n)&#x2F;&#x2F;递归到最后一层&#123;for (int i &#x3D; 0; i &lt; n; i++)printf(&quot;%d &quot;, path[i]);puts(&quot;&quot;);return;&#125;for (int i &#x3D; 1; i &lt;&#x3D; n; i++)&#x2F;&#x2F;未递归到最后一层&#123;if (!st[i])&#x2F;&#x2F;如果该点未被使用过&#123;path[u] &#x3D; i;&#x2F;&#x2F;将该点记录st[i] &#x3D; true;dfs(u + 1);st[i] &#x3D; false;&#x2F;&#x2F;恢复现场&#125;&#125;&#125;int main()&#123;cin &gt;&gt; n;dfs(0);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一种搜索顺序：按行枚举</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727211718696.png" alt="image-20220727211718696"></p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220727211246336.png" alt="image-20220727211246336"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 20;&#x2F;&#x2F;对角线需要两倍的nint n;char g[N][N];&#x2F;&#x2F;存储棋子情况bool col[N], dg[N], udg[N];&#x2F;&#x2F;列、对角线、反对角线情况void dfs(int u)&#123;if (u &#x3D;&#x3D; n)&#123;for (int i &#x3D; 0; i &lt; n; i++)puts(g[i]);&#x2F;&#x2F;输出每行的棋子情况puts(&quot;&quot;);return;&#125;for (int i &#x3D; 0; i &lt; n; i++)&#123;if (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i])&#123;g[u][i] &#x3D; &#39;Q&#39;;col[i] &#x3D; dg[u + i] &#x3D; udg[n - u + i] &#x3D; true;&#x2F;&#x2F;记录为truedfs(u + 1);col[i] &#x3D; dg[u + i] &#x3D; udg[n - u + i] &#x3D; false;&#x2F;&#x2F;恢复现场g[u][i] &#x3D; &#39;.&#39;;&#125;&#125;&#125;int main()&#123;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)for (int j &#x3D; 0; j &lt; n; j++)g[i][j] &#x3D; &#39;.&#39;;dfs(0);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种搜索顺序：一个一个格子进行搜索。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;using namespace std;const int N &#x3D; 20;&#x2F;&#x2F;对角线需要两倍的nint n;char g[N][N];&#x2F;&#x2F;存储棋子情况bool row[N],col[N], dg[N], udg[N];&#x2F;&#x2F;行、列、对角线、反对角线情况void dfs(int x,int y,int s)&#x2F;&#x2F;行列坐标及当前皇后的数量&#123;if (y &#x3D;&#x3D; n)y &#x3D; 0, x++;if (x &#x3D;&#x3D; n)&#123;if (s &#x3D;&#x3D; n)&#x2F;&#x2F;找到了一种成功的方案&#123;for (int i &#x3D; 0; i &lt; n; i++) puts(g[i]);puts(&quot;&quot;);&#125;return;&#125;&#x2F;&#x2F;枚举两种情况:不放皇后dfs(x, y + 1, s);&#x2F;&#x2F;放皇后if (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n])&#123;g[x][y] &#x3D; &#39;Q&#39;;row[x] &#x3D; col[y] &#x3D; dg[x + y] &#x3D; udg[x - y + n] &#x3D; true;dfs(x, y + 1, s + 1);row[x] &#x3D; col[y] &#x3D; dg[x + y] &#x3D; udg[x - y + n] &#x3D; false;g[x][y] &#x3D; &#39;.&#39;;&#x2F;&#x2F;恢复现场&#125;&#125;int main()&#123;cin &gt;&gt; n;for (int i &#x3D; 0; i &lt; n; i++)for (int j &#x3D; 0; j &lt; n; j++)g[i][j] &#x3D; &#39;.&#39;;dfs(0, 0, 0);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-BFS"><a href="#1-2-BFS" class="headerlink" title="1.2 BFS"></a>1.2 BFS</h2><p>当所有边的权重都为1时，才可以使用<code>BFS</code>求解最短路径问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 110;int n, m;int g[N][N];&#x2F;&#x2F;存储地图int d[N][N];&#x2F;&#x2F;存储最短路径PII q[N * N];int bfs()&#123;int hh &#x3D; 0, tt &#x3D; 0;&#x2F;&#x2F;定义空队列q[0] &#x3D; &#123; 0,0 &#125;;&#x2F;&#x2F;记录开始点坐标memset(d, -1, sizeof d);&#x2F;&#x2F;初始化最短距离为-1d[0][0] &#x3D; 0;    &#x2F;&#x2F;向量表示(-1,0),(0,1),(1,0),(0,-1)int dx[4] &#x3D; &#123; -1,0,1,0 &#125;, dy[4] &#x3D; &#123; 0,1,0,-1 &#125;;while (hh &lt;&#x3D; tt)&#123;auto t &#x3D; q[hh++];&#x2F;&#x2F;将队首元素入队for (int i &#x3D; 0; i &lt; 4; i++)&#123;int x &#x3D; t.first + dx[i], y &#x3D; t.second + dy[i];if (x &gt;&#x3D; 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;&#x3D; 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] &#x3D;&#x3D; 0 &amp;&amp; d[x][y] &#x3D;&#x3D; -1)&#123;&#x2F;&#x2F;g数组等于0表示该点是路径上的点,d数组为-1表示未被选过d[x][y] &#x3D; d[t.first][t.second] + 1;q[++tt] &#x3D; &#123; x,y &#125;;&#x2F;&#x2F;将该点记录&#125;&#125;&#125;return d[n - 1][m - 1];&#125;int main()&#123;cin &gt;&gt; n &gt;&gt; m;for (int i &#x3D; 0; i &lt; n; i++)for (int j &#x3D; 0; j &lt; m; j++)cin &gt;&gt; g[i][j];cout &lt;&lt; bfs() &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​若需要<strong>输出路径</strong>，则可以在<code>d[x][y] = d[t.first][t.second] + 1;</code>后添加一句代码用于存储当前元素的前一个元素<code>Prev[x][y] = t;</code>【记录路径】，然后在函数返回前输出路径：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int x &#x3D; n - 1,y &#x3D; m - 1;while(x || y)&#123;    cout &lt;&lt; x &lt;&lt; &#39; &#39; &lt;&lt; y &lt;&lt; endl;    auto t &#x3D; Prev[x][y];    x &#x3D; t.first, y &#x3D; t.second;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-图的存储方式与遍历"><a href="#1-3-图的存储方式与遍历" class="headerlink" title="1.3 图的存储方式与遍历"></a>1.3 图的存储方式与遍历</h2><p>树是<strong>无环连通图</strong>，是一种特殊的图。图分为有向图和无向图。</p><ul><li>邻接矩阵</li><li><strong>邻接表</strong>：每个节点开了一个单链表</li></ul><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220802160521020.png" alt="image-20220802160521020"></p><p>给定一颗树，树中包含 n 个结点（编号 1∼n）和 n−1 条无向边。</p><p>请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。</p><p>重心定义：重心是指树中的一个结点，<strong>如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心</strong>。</p><p><strong>输入格式</strong></p><p>第一行包含整数 n，表示树的结点数。</p><p>接下来 n−1 行，每行包含两个整数 a 和 b，表示点 a 和点 b 之间存在一条边。</p><p><strong>输出格式</strong></p><p>输出一个整数 m，表示将重心删除后，剩余各个连通块中点数的最大值。</p><p><strong>数据范围</strong></p><p>$1≤n≤10^5$</p><p><img src="https://qianzeshu.oss-cn-hangzhou.aliyuncs.com/img/image-20220802160530398.png" alt="image-20220802160530398"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010, M &#x3D; N * 2;int h[N], e[M], ne[M];&#x2F;&#x2F;h数组存储每个链表的链表头,e数组存储每个节点的编号,ne存储的是每个节点的next指针int n, idx;bool st[N];&#x2F;&#x2F;标记是否已经被访问int ans &#x3D; N;&#x2F;&#x2F;记录答案void add(int a, int b)&#123;e[idx] &#x3D; b, ne[idx] &#x3D; h[a], h[a] &#x3D; idx++;&#125;&#x2F;&#x2F;以u为根的子树中点的数量int dfs(int u)&#123;st[u] &#x3D; true;&#x2F;&#x2F;标记一下,已经被搜过int sum &#x3D; 1, res &#x3D; 0;&#x2F;&#x2F;sum记录当前子树的点, res记录当前子树的连通块点数for (int i &#x3D; h[u]; i !&#x3D; -1; i &#x3D; ne[i])&#123;int j &#x3D; e[i];if (!st[j])&#123;int s &#x3D; dfs(j);&#x2F;&#x2F;获得子树连通块点的数量res &#x3D; max(res, s);&#x2F;&#x2F;将s与res取大sum +&#x3D; s;&#x2F;&#x2F;将子树的数量加入点数&#125;&#125;res &#x3D; max(res, n - sum);&#x2F;&#x2F;n - sum为除了以该点为子树的剩余部分ans &#x3D; min(ans, res);&#x2F;&#x2F;记录结果return sum;&#x2F;&#x2F;返回子树数量&#125;int main()&#123;cin &gt;&gt; n;memset(h, -1, sizeof h);for (int i &#x3D; 0; i &lt; n - 1; i++)&#123;int a, b;cin &gt;&gt; a &gt;&gt; b;add(a, b), add(b, a);&#x2F;&#x2F;无向边,需要添加不同方向的两条边&#125;dfs(1);&#x2F;&#x2F;从任意节点开始深度优先cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int h[N], e[N], ne[N], idx, n, m;int d[N], q[N];&#x2F;&#x2F;d数组记录最远距离,q数组记录队列void add(int a, int b)&#123;e[idx] &#x3D; b, ne[idx] &#x3D; h[a], h[a] &#x3D; idx++;&#125;int bfs()&#123;int hh &#x3D; 0, tt &#x3D; 0;q[0] &#x3D; 1;&#x2F;&#x2F;初始化memset(d, -1, sizeof d);d[1] &#x3D; 0;while (hh &lt;&#x3D; tt)&#123;int t &#x3D; q[hh++];for (int i &#x3D; h[t]; i !&#x3D; -1; i &#x3D; ne[i])&#x2F;&#x2F;扩展每个点的邻边&#123;int j &#x3D; e[i];if (d[j] &#x3D;&#x3D; -1)&#x2F;&#x2F;第一次被访问&#123;d[j] &#x3D; d[t] + 1;q[++tt] &#x3D; j;&#125;&#125;&#125;return d[n];&#125;int main()&#123;cin &gt;&gt; n &gt;&gt; m;memset(h, -1, sizeof h);for (int i &#x3D; 0; i &lt; m; i++)&#123;int a, b;cin &gt;&gt; a &gt;&gt; b;add(a, b);&#125;cout &lt;&lt; bfs() &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-有向图的拓扑序列"><a href="#1-4-有向图的拓扑序列" class="headerlink" title="1.4 有向图的拓扑序列"></a>1.4 有向图的拓扑序列</h2><p>若一个由图中所有点构成的序列 A 满足：对于图中的每条边 (x,y)，x 在 A 中都出现在 y 之前，则称 A 是该图的一个拓扑序列。</p><p><strong>有向无环图称为拓扑图。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">queue &lt;- 所有入度为0的点while queue不为空&#123;t &lt;- 队头枚举 t 的所有出边 t -&gt; j删去t -&gt; j, d[j]--;if d[j] &#x3D;&#x3D; 0:queue &lt;- j;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 100010;int n, m;int h[N], e[N], ne[N], idx;int d[N];int q[N];void add(int a, int b)&#123;    e[idx] &#x3D; b, ne[idx] &#x3D; h[a], h[a] &#x3D; idx ++ ;&#125;bool topsort()&#123;    int hh &#x3D; 0, tt &#x3D; -1;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )        if (!d[i])            q[ ++ tt] &#x3D; i;    while (hh &lt;&#x3D; tt)    &#123;        int t &#x3D; q[hh ++ ];        for (int i &#x3D; h[t]; i !&#x3D; -1; i &#x3D; ne[i])        &#123;            int j &#x3D; e[i];            if (-- d[j] &#x3D;&#x3D; 0)                q[ ++ tt] &#x3D; j;        &#125;    &#125;    return tt &#x3D;&#x3D; n - 1;&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    memset(h, -1, sizeof h);    for (int i &#x3D; 0; i &lt; m; i ++ )    &#123;        int a, b;        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);        add(a, b);        d[b] ++ ;    &#125;    if (!topsort()) puts(&quot;-1&quot;);    else    &#123;        for (int i &#x3D; 0; i &lt; n; i ++ ) printf(&quot;%d &quot;, q[i]);        puts(&quot;&quot;);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、最短路径问题"><a href="#二、最短路径问题" class="headerlink" title="二、最短路径问题"></a>二、最短路径问题</h1><p>[<strong>注意算法的时间复杂度</strong>]</p><p><strong>单源最短路径</strong></p><ul><li>所有边权都是正数<ul><li>朴素<code>Dijkstra</code>算法$O(n^2)$  边稠密图   <code>m~n^2</code></li><li>堆优化版的<code>Dijkstra</code>算法$O(mlogn)$   边稀疏图   <code>m~n</code></li></ul></li><li>存在负权边<ul><li><code>Bellman-Ford</code>算法<code>O(nm)</code></li><li><code>SPFA</code>算法    一般<code>O(m)</code>，最坏<code>O(nm)</code></li></ul></li></ul><p><strong>多源汇最短路径</strong>(起点、终点任选)</p><ul><li><code>Floyd</code>算法   $O(n^3)$</li></ul><h2 id="2-1-朴素Dijkstra算法"><a href="#2-1-朴素Dijkstra算法" class="headerlink" title="2.1 朴素Dijkstra算法"></a>2.1 朴素Dijkstra算法</h2><ol><li><p><code>dist[1]=0</code>，<code>dist[i]=+∞</code>，<code>s</code>为当前已确定最短路径的点</p></li><li><p><code>for i: 0~n</code></p><p><code>t&lt;-</code> 不在<code>s</code>中的、距离最近的点</p><p><code>s&lt;-t</code>，用<code>t</code>更新其他点的距离，<code>dist[x] &gt; dist[t] + w</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N &#x3D; 510;int n, m;int g[N][N];int dist[N];bool st[N];int dijkstra()&#123;memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;&#x2F;&#x2F;初始化for (int i &#x3D; 0; i &lt; n; i++)&#123;int t &#x3D; -1;&#x2F;&#x2F;t为-1表示还未选择一个点for (int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;if (!st[j] &amp;&amp; (t &#x3D;&#x3D; -1 || dist[t] &gt; dist[j]))t &#x3D; j;&#x2F;&#x2F;选取还未被选择的且距离最近的点&#125;st[t] &#x3D; true;for (int j &#x3D; 1; j &lt;&#x3D; n; j++)&#123;dist[j] &#x3D; min(dist[j], dist[t] + g[t][j]);&#125;&#125;if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;&#x2F;&#x2F;不连通return dist[n];&#125;int main()&#123;scanf(&quot;%d%d&quot;, &amp;n, &amp;m);memset(g, 0x3f, sizeof g);while (m--)&#123;int a, b, c;scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);g[a][b] &#x3D; min(g[a][b], c);&#125;int t &#x3D; dijkstra();printf(&quot;%d\n&quot;, t);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-堆优化版的Dijkstra算法"><a href="#2-2-堆优化版的Dijkstra算法" class="headerlink" title="2.2 堆优化版的Dijkstra算法"></a>2.2 堆优化版的Dijkstra算法</h2><p>堆：</p><ul><li>手写堆（n个数）</li><li><strong>优先队列</strong>（m个数）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;using namespace std;typedef pair&lt;int, int&gt; PII;const int N &#x3D; 1e6 + 10;int n, m;int h[N], w[N], e[N], ne[N], idx;int dist[N];bool st[N];void add(int a, int b, int c)&#123;    e[idx] &#x3D; b, w[idx] &#x3D; c, ne[idx] &#x3D; h[a], h[a] &#x3D; idx ++ ;&#125;int dijkstra()&#123;    memset(dist, 0x3f, sizeof dist);    dist[1] &#x3D; 0;    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;&#x2F;&#x2F;小根堆    heap.push(&#123;0, 1&#125;);    while (heap.size())    &#123;        auto t &#x3D; heap.top();        heap.pop();        int ver &#x3D; t.second, distance &#x3D; t.first;        if (st[ver]) continue;&#x2F;&#x2F;被更新过，是冗余备份        st[ver] &#x3D; true;        for (int i &#x3D; h[ver]; i !&#x3D; -1; i &#x3D; ne[i])        &#123;            int j &#x3D; e[i];            if (dist[j] &gt; dist[ver] + w[i])            &#123;                dist[j] &#x3D; dist[ver] + w[i];                heap.push(&#123;dist[j], j&#125;);            &#125;        &#125;    &#125;    if (dist[n] &#x3D;&#x3D; 0x3f3f3f3f) return -1;    return dist[n];&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    memset(h, -1, sizeof h);    while (m -- )    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        add(a, b, c);    &#125;    cout &lt;&lt; dijkstra() &lt;&lt; endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-Bellman-Ford算法"><a href="#2-3-Bellman-Ford算法" class="headerlink" title="2.3 Bellman-Ford算法"></a>2.3 Bellman-Ford算法</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">for n次for 所有边a,b,wdist[b] &#x3D; min(dist[b],dist[a] + w);&#x2F;&#x2F;松弛操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有<strong>三角不等式</strong>：<code>dist[b] &lt;= dist[a] + w</code>。</p><p><code>k</code>次—&gt;经过不超过<code>k</code>条边的最短路径的距离</p><p><code>n</code>次—&gt;存在一条最短路径，上面有<code>n</code>条边，则路径上一定存在<strong>负环</strong></p><p>算法时间复杂度 <code>O(nm)</code>，<code>n</code>表示点数，<code>m</code>表示边数。</p><p>注意在模板题中需要对下面的模板稍作修改，加上备份数组，详情见模板题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int n, m;       &#x2F;&#x2F; n表示点数，m表示边数int dist[N];        &#x2F;&#x2F; dist[x]存储1到x的最短路距离struct Edge     &#x2F;&#x2F; 边，a表示出点，b表示入点，w表示边的权重&#123;    int a, b, w;&#125;edges[M];&#x2F;&#x2F; 求1到n的最短路距离，如果无法从1走到n，则返回-1。int bellman_ford()&#123;    memset(dist, 0x3f, sizeof dist);    dist[1] &#x3D; 0;    &#x2F;&#x2F; 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。    for (int i &#x3D; 0; i &lt; n; i ++ )    &#123;        for (int j &#x3D; 0; j &lt; m; j ++ )        &#123;            int a &#x3D; edges[j].a, b &#x3D; edges[j].b, w &#x3D; edges[j].w;            if (dist[b] &gt; dist[a] + w)                dist[b] &#x3D; dist[a] + w;        &#125;    &#125;    if (dist[n] &gt; 0x3f3f3f3f &#x2F; 2) return -1;    return dist[n];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 510, M &#x3D; 10010;struct Edge&#123;    int a, b, c;&#125;edges[M];int n, m, k;int dist[N];int last[N];        &#x2F;&#x2F;用于备份void bellman_ford()&#123;    memset(dist, 0x3f, sizeof dist);        &#x2F;&#x2F;初始化    dist[1] &#x3D; 0;    for (int i &#x3D; 0; i &lt; k; i++)    &#123;        memcpy(last, dist, sizeof dist);    &#x2F;&#x2F;将当前的值赋值到last数组中来备份        for (int j &#x3D; 0; j &lt; m; j++)        &#123;            auto e &#x3D; edges[j];            dist[e.b] &#x3D; min(dist[e.b], last[e.a] + e.c);    &#x2F;&#x2F;取最小值        &#125;    &#125;&#125;int main()&#123;    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);    for (int i &#x3D; 0; i &lt; m; i++)    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        edges[i] &#x3D; &#123; a, b, c &#125;;    &#125;    bellman_ford();    &#x2F;&#x2F;除以2的原因是0x3f3f3f3f也可能经历一些小的改变    if (dist[n] &gt; 0x3f3f3f3f &#x2F; 2) puts(&quot;impossible&quot;);    else printf(&quot;%d\n&quot;, dist[n]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-SPFA算法"><a href="#2-4-SPFA算法" class="headerlink" title="2.4 SPFA算法"></a>2.4 SPFA算法</h2><p>考虑到<code>dist[e.b] = min(dist[e.b], last[e.a] + e.c);</code>一式只有当<code>a</code>变化的时候<code>dist[e.b]</code>才会发生改变，故有：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">while queue 不空(1)t &lt;- q.front;q.pop();(2)更新t的所有出边: t -w-&gt; b;&#x2F;&#x2F;待更新的点的集合queue &lt;- b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-1-SPFA算法求最短路径"><a href="#2-4-1-SPFA算法求最短路径" class="headerlink" title="2.4.1 SPFA算法求最短路径"></a>2.4.1 SPFA算法求最短路径</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;using namespace std;const int N &#x3D; 100010;int n, m;int h[N], w[N], e[N], ne[N], idx;int dist[N];bool st[N];void add(int a, int b, int c)&#123;e[idx] &#x3D; b, w[idx] &#x3D; c, ne[idx] &#x3D; h[a], h[a] &#x3D; idx++;&#125;int spfa()&#123;memset(dist, 0x3f, sizeof dist);dist[1] &#x3D; 0;queue&lt;int&gt; q;q.push(1);st[1] &#x3D; true;while (q.size())&#123;int t &#x3D; q.front();&#x2F;&#x2F;将队首元素取出q.pop();st[t] &#x3D; false;&#x2F;&#x2F;设为false代表已经出队for (int i &#x3D; h[t]; i !&#x3D; -1; i &#x3D; ne[i])&#123;int j &#x3D; e[i];if(dist[j] &gt; dist[t] + w[i])&#123;dist[j] &#x3D; dist[t] + w[i];if (!st[j])&#123;&#x2F;&#x2F;如果不在队列里,将其入队q.push(j);st[j] &#x3D; true;&#125;&#125;&#125;&#125;return dist[n];&#125;int main()&#123;scanf(&quot;%d%d&quot;, &amp;n, &amp;m);memset(h, -1, sizeof h);while (m--)&#123;int a, b, c;scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);add(a, b, c);&#125;int t &#x3D; spfa();if (t &#x3D;&#x3D; 0x3f3f3f3f) puts(&quot;impossible&quot;);else printf(&quot;%d\n&quot;, t);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-2-SPFA算法判断负环"><a href="#2-4-2-SPFA算法判断负环" class="headerlink" title="2.4.2 SPFA算法判断负环"></a>2.4.2 SPFA算法判断负环</h3><p>​有：<code>dist[x] = dist[t] + w[i]; cnt[x] = cnt[t] + 1</code>，若有<code>cnt[x] &gt;= n</code>，则在这个路径上有<code>n+1</code>个点，由<strong>抽屉原理</strong>可知，存在有两个相同的点，该路径存在负环。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;using namespace std;const int N &#x3D; 2010, M &#x3D; 10010;int n, m;int h[N], w[M], e[M], ne[M], idx;int dist[N], cnt[N];bool st[N];void add(int a, int b, int c)&#123;    e[idx] &#x3D; b, w[idx] &#x3D; c, ne[idx] &#x3D; h[a], h[a] &#x3D; idx ++ ;&#125;bool spfa()&#123;    queue&lt;int&gt; q;    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )    &#123;        st[i] &#x3D; true;        q.push(i);    &#125;    while (q.size())    &#123;        int t &#x3D; q.front();        q.pop();        st[t] &#x3D; false;        for (int i &#x3D; h[t]; i !&#x3D; -1; i &#x3D; ne[i])        &#123;            int j &#x3D; e[i];            if (dist[j] &gt; dist[t] + w[i])            &#123;                dist[j] &#x3D; dist[t] + w[i];                cnt[j] &#x3D; cnt[t] + 1;                if (cnt[j] &gt;&#x3D; n) return true;                if (!st[j])                &#123;                    q.push(j);                    st[j] &#x3D; true;                &#125;            &#125;        &#125;    &#125;    return false;&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    memset(h, -1, sizeof h);    while (m -- )    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        add(a, b, c);    &#125;    if (spfa()) puts(&quot;Yes&quot;);    else puts(&quot;No&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-Floyd算法"><a href="#2-5-Floyd算法" class="headerlink" title="2.5 Floyd算法"></a>2.5 Floyd算法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N &#x3D; 210, INF &#x3D; 1e9;int n, m, Q;int d[N][N];void floyd()&#123;    for (int k &#x3D; 1; k &lt;&#x3D; n; k ++ )        for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )            for (int j &#x3D; 1; j &lt;&#x3D; n; j ++ )                d[i][j] &#x3D; min(d[i][j], d[i][k] + d[k][j]);&#125;int main()&#123;    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;Q);    for (int i &#x3D; 1; i &lt;&#x3D; n; i ++ )        for (int j &#x3D; 1; j &lt;&#x3D; n; j ++ )            if (i &#x3D;&#x3D; j) d[i][j] &#x3D; 0;            else d[i][j] &#x3D; INF;    while (m -- )    &#123;        int a, b, c;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);        d[a][b] &#x3D; min(d[a][b], c);    &#125;    floyd();    while (Q -- )    &#123;        int a, b;        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);        int t &#x3D; d[a][b];        if (t &gt; INF &#x2F; 2) puts(&quot;impossible&quot;);        else printf(&quot;%d\n&quot;, t);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【4-数学知识】"><a href="#【4-数学知识】" class="headerlink" title="【4.数学知识】"></a>【4.数学知识】</h1><h1 id="一、质数"><a href="#一、质数" class="headerlink" title="一、质数"></a>一、质数</h1><p>在大于1的整数中，如果只包含1和本身这两个约数，就被称为质数&#x2F;素数。</p><h2 id="1-1-质数的判定"><a href="#1-1-质数的判定" class="headerlink" title="1.1 质数的判定"></a>1.1 质数的判定</h2><p><strong>试除法判定质数</strong>：若<code>d|n</code>，则<code>n/d|n</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bool is_prime(int x)&#123;    if (x &lt; 2) return false;    for (int i &#x3D; 2; i &lt;&#x3D; x &#x2F; i; i ++ )        if (x % i &#x3D;&#x3D; 0)            return false;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-分解质因数"><a href="#1-2-分解质因数" class="headerlink" title="1.2 分解质因数"></a>1.2 分解质因数</h2><p><strong>试除法分解质因数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void divide(int x)&#123;    for (int i &#x3D; 2; i &lt;&#x3D; x &#x2F; i; i ++ )        if (x % i &#x3D;&#x3D; 0)&#x2F;&#x2F;若此条件成立,i一定是质数        &#123;            int s &#x3D; 0;            while (x % i &#x3D;&#x3D; 0) x &#x2F;&#x3D; i, s ++ ;            cout &lt;&lt; i &lt;&lt; &#39; &#39; &lt;&lt; s &lt;&lt; endl;        &#125;    if (x &gt; 1) cout &lt;&lt; x &lt;&lt; &#39; &#39; &lt;&lt; 1 &lt;&lt; endl;&#x2F;&#x2F;单独处理,唯一一个大于sqrt(n)的质因子    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：</p><ul><li>若<code>x % i = 0</code>成立，则已经将在<code>i = 2~ (n - 1)</code>中的所有质因子除尽，<code>i</code>不包含其中的所有质因子，故<code>i</code>一定是质数；</li><li><code>n</code>中最多只包含一个大于<code>sqrt(n)</code>的质因子；</li><li>当<code>n = 2^k</code>时，时间复杂度为<code>O(log n)</code>，而最坏时间复杂度为<code>O(sqrt(n))</code>，平均情况是介于两者之间。</li></ul></blockquote><h2 id="1-3-求素数"><a href="#1-3-求素数" class="headerlink" title="1.3 求素数"></a>1.3 求素数</h2><p><strong>朴素筛法求素数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int primes[N], cnt;     &#x2F;&#x2F; primes[]存储所有素数bool st[N];         &#x2F;&#x2F; st[x]存储x是否被筛掉void get_primes(int n)&#123;    for (int i &#x3D; 2; i &lt;&#x3D; n; i ++ )    &#123;        if (st[i]) continue;&#x2F;&#x2F;被筛过        primes[cnt ++ ] &#x3D; i;        for (int j &#x3D; i + i; j &lt;&#x3D; n; j +&#x3D; i)            st[j] &#x3D; true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线性筛法求素数</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int primes[N], cnt;     &#x2F;&#x2F; primes[]存储所有素数bool st[N];         &#x2F;&#x2F; st[x]存储x是否被筛掉void get_primes(int n)&#123;    for (int i &#x3D; 2; i &lt;&#x3D; n; i ++ )    &#123;        if (!st[i]) primes[cnt ++ ] &#x3D; i;        for (int j &#x3D; 0; primes[j] &lt;&#x3D; n &#x2F; i; j ++ )        &#123;            st[primes[j] * i] &#x3D; true;            if (i % primes[j] &#x3D;&#x3D; 0) break;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/13/hello-world/"/>
      <url>/2022/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
